
ADASSystemProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004dbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00004dbc  00004e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800156  00800156  00004f46  2**0
                  ALLOC
  3 .stab         0000531c  00000000  00000000  00004f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002081  00000000  00000000  0000a264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c2e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c425  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c595  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e1de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fe78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010265  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_1>
       8:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_2>
       c:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_6>
      1c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_7>
      20:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_8>
      24:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_9>
      28:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_10>
      2c:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <main>
      8a:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e2       	ldi	r26, 0x2E	; 46
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c1 26 	jmp	0x4d82	; 0x4d82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a5 26 	jmp	0x4d4a	; 0x4d4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e2       	ldi	r24, 0x2E	; 46
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c1 26 	jmp	0x4d82	; 0x4d82 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_Init>:
static void (*Timer1_OCB_Fptr)(void) = NULL_PTR;
static void (*Timer1_ICU_Fptr)(void) = NULL_PTR;
/******************************************************************************************/
/*timer 0 functions*/
void TIMER0_Init(Timer0Mode_type mode,Timer0Scaler_type scaler)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER0_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <TIMER0_Init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	21 f1       	breq	.+72     	; 0xbb2 <TIMER0_Init+0x6c>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <TIMER0_Init+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <TIMER0_Init+0x4e>
     b7c:	46 c0       	rjmp	.+140    	; 0xc0a <TIMER0_Init+0xc4>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	21 f1       	breq	.+72     	; 0xbd0 <TIMER0_Init+0x8a>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	71 f1       	breq	.+92     	; 0xbee <TIMER0_Init+0xa8>
     b92:	3b c0       	rjmp	.+118    	; 0xc0a <TIMER0_Init+0xc4>
	{
		case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0, TCCR0_WGM00);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, TCCR0_WGM01);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	8c 93       	st	X, r24
     bb0:	2c c0       	rjmp	.+88     	; 0xc0a <TIMER0_Init+0xc4>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0, TCCR0_WGM00);
     bb2:	a3 e5       	ldi	r26, 0x53	; 83
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e3 e5       	ldi	r30, 0x53	; 83
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, TCCR0_WGM01);
     bc0:	a3 e5       	ldi	r26, 0x53	; 83
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e3 e5       	ldi	r30, 0x53	; 83
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	87 7f       	andi	r24, 0xF7	; 247
     bcc:	8c 93       	st	X, r24
     bce:	1d c0       	rjmp	.+58     	; 0xc0a <TIMER0_Init+0xc4>
		break;
		case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0, TCCR0_WGM00);
     bd0:	a3 e5       	ldi	r26, 0x53	; 83
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e3 e5       	ldi	r30, 0x53	; 83
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7b       	andi	r24, 0xBF	; 191
     bdc:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_WGM01);
     bde:	a3 e5       	ldi	r26, 0x53	; 83
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e3 e5       	ldi	r30, 0x53	; 83
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	88 60       	ori	r24, 0x08	; 8
     bea:	8c 93       	st	X, r24
     bec:	0e c0       	rjmp	.+28     	; 0xc0a <TIMER0_Init+0xc4>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0, TCCR0_WGM00);
     bee:	a3 e5       	ldi	r26, 0x53	; 83
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e3 e5       	ldi	r30, 0x53	; 83
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_WGM01);
     bfc:	a3 e5       	ldi	r26, 0x53	; 83
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e3 e5       	ldi	r30, 0x53	; 83
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 60       	ori	r24, 0x08	; 8
     c08:	8c 93       	st	X, r24
		break;
	}
	TCCR0&=0XF8;//0b11111000
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	88 7f       	andi	r24, 0xF8	; 248
     c16:	8c 93       	st	X, r24
	TCCR0|=scaler;
     c18:	a3 e5       	ldi	r26, 0x53	; 83
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e3 e5       	ldi	r30, 0x53	; 83
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	90 81       	ld	r25, Z
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	89 2b       	or	r24, r25
     c26:	8c 93       	st	X, r24
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <TIMER0_OC0Mode>:

void TIMER0_OC0Mode(OC0Mode_type mode)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <TIMER0_OC0Mode+0x6>
     c3c:	0f 92       	push	r0
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	89 83       	std	Y+1, r24	; 0x01
	switch (mode)
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	3b 83       	std	Y+3, r19	; 0x03
     c4c:	2a 83       	std	Y+2, r18	; 0x02
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	9b 81       	ldd	r25, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	91 05       	cpc	r25, r1
     c56:	21 f1       	breq	.+72     	; 0xca0 <TIMER0_OC0Mode+0x6a>
     c58:	2a 81       	ldd	r18, Y+2	; 0x02
     c5a:	3b 81       	ldd	r19, Y+3	; 0x03
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	31 05       	cpc	r19, r1
     c60:	2c f4       	brge	.+10     	; 0xc6c <TIMER0_OC0Mode+0x36>
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	61 f0       	breq	.+24     	; 0xc82 <TIMER0_OC0Mode+0x4c>
     c6a:	46 c0       	rjmp	.+140    	; 0xcf8 <TIMER0_OC0Mode+0xc2>
     c6c:	2a 81       	ldd	r18, Y+2	; 0x02
     c6e:	3b 81       	ldd	r19, Y+3	; 0x03
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	21 f1       	breq	.+72     	; 0xcbe <TIMER0_OC0Mode+0x88>
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	9b 81       	ldd	r25, Y+3	; 0x03
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	91 05       	cpc	r25, r1
     c7e:	71 f1       	breq	.+92     	; 0xcdc <TIMER0_OC0Mode+0xa6>
     c80:	3b c0       	rjmp	.+118    	; 0xcf8 <TIMER0_OC0Mode+0xc2>
	{
		case OC0_DISCONNECTED:
		CLR_BIT(TCCR0, TCCR0_COM00);
     c82:	a3 e5       	ldi	r26, 0x53	; 83
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	8f 7e       	andi	r24, 0xEF	; 239
     c8e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, TCCR0_COM01);
     c90:	a3 e5       	ldi	r26, 0x53	; 83
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e3 e5       	ldi	r30, 0x53	; 83
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8f 7d       	andi	r24, 0xDF	; 223
     c9c:	8c 93       	st	X, r24
     c9e:	2c c0       	rjmp	.+88     	; 0xcf8 <TIMER0_OC0Mode+0xc2>
		break;
		case OC0_TOGGLE:
		SET_BIT(TCCR0, TCCR0_COM00);
     ca0:	a3 e5       	ldi	r26, 0x53	; 83
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e3 e5       	ldi	r30, 0x53	; 83
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 61       	ori	r24, 0x10	; 16
     cac:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, TCCR0_COM01);
     cae:	a3 e5       	ldi	r26, 0x53	; 83
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e3 e5       	ldi	r30, 0x53	; 83
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 7d       	andi	r24, 0xDF	; 223
     cba:	8c 93       	st	X, r24
     cbc:	1d c0       	rjmp	.+58     	; 0xcf8 <TIMER0_OC0Mode+0xc2>
		break;
		case OC0_NON_INVERTING:
		CLR_BIT(TCCR0, TCCR0_COM00);
     cbe:	a3 e5       	ldi	r26, 0x53	; 83
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e3 e5       	ldi	r30, 0x53	; 83
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	8f 7e       	andi	r24, 0xEF	; 239
     cca:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_COM01);
     ccc:	a3 e5       	ldi	r26, 0x53	; 83
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e3 e5       	ldi	r30, 0x53	; 83
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	80 62       	ori	r24, 0x20	; 32
     cd8:	8c 93       	st	X, r24
     cda:	0e c0       	rjmp	.+28     	; 0xcf8 <TIMER0_OC0Mode+0xc2>
		break;
		case OC0_INVERTING:
		SET_BIT(TCCR0, TCCR0_COM00);
     cdc:	a3 e5       	ldi	r26, 0x53	; 83
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e3 e5       	ldi	r30, 0x53	; 83
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_COM01);
     cea:	a3 e5       	ldi	r26, 0x53	; 83
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e3 e5       	ldi	r30, 0x53	; 83
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 62       	ori	r24, 0x20	; 32
     cf6:	8c 93       	st	X, r24
		break;
	}
}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <TIMER0_OV_InterruptEnable>:

void TIMER0_OV_InterruptEnable(void)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_TOIE0);
     d0c:	a9 e5       	ldi	r26, 0x59	; 89
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e9 e5       	ldi	r30, 0x59	; 89
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	81 60       	ori	r24, 0x01	; 1
     d18:	8c 93       	st	X, r24
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <TIMER0_OV_InterruptDisable>:
void TIMER0_OV_InterruptDisable(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TIMSK_TOIE0);
     d28:	a9 e5       	ldi	r26, 0x59	; 89
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 e5       	ldi	r30, 0x59	; 89
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8e 7f       	andi	r24, 0xFE	; 254
     d34:	8c 93       	st	X, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <TIMER0_OC_InterruptEnable>:
void TIMER0_OC_InterruptEnable(void)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_OCIE0);
     d44:	a9 e5       	ldi	r26, 0x59	; 89
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e9 e5       	ldi	r30, 0x59	; 89
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	8c 93       	st	X, r24
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <TIMER0_OC_InterruptDisable>:
void TIMER0_OC_InterruptDisable(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TIMSK_OCIE0);
     d60:	a9 e5       	ldi	r26, 0x59	; 89
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e9 e5       	ldi	r30, 0x59	; 89
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8d 7f       	andi	r24, 0xFD	; 253
     d6c:	8c 93       	st	X, r24
}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <TIMER0_OV_SetCallBack>:

void TIMER0_OV_SetCallBack(void (*local_fptr)(void)) {
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <TIMER0_OV_SetCallBack+0x6>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01

	Timer_OV_Fptr = local_fptr;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	90 93 57 01 	sts	0x0157, r25
     d8a:	80 93 56 01 	sts	0x0156, r24
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <TIMER0_COMP_SetCallBack>:

void TIMER0_COMP_SetCallBack(void (*local_fptr)(void)) {
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <TIMER0_COMP_SetCallBack+0x6>
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01

    Timer_COMP_Fptr = local_fptr;
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	90 93 59 01 	sts	0x0159, r25
     dae:	80 93 58 01 	sts	0x0158, r24
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <Timer1_Init>:

/*************************************************************************/
/*timer 1 functions*/
void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <Timer1_Init+0x6>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <Timer1_Init+0x8>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	3c 83       	std	Y+4, r19	; 0x04
     dd4:	2b 83       	std	Y+3, r18	; 0x03
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	9c 81       	ldd	r25, Y+4	; 0x04
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	91 05       	cpc	r25, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <Timer1_Init+0x26>
     de0:	56 c0       	rjmp	.+172    	; 0xe8e <Timer1_Init+0xd2>
     de2:	2b 81       	ldd	r18, Y+3	; 0x03
     de4:	3c 81       	ldd	r19, Y+4	; 0x04
     de6:	23 30       	cpi	r18, 0x03	; 3
     de8:	31 05       	cpc	r19, r1
     dea:	54 f4       	brge	.+20     	; 0xe00 <Timer1_Init+0x44>
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	99 f0       	breq	.+38     	; 0xe1a <Timer1_Init+0x5e>
     df4:	2b 81       	ldd	r18, Y+3	; 0x03
     df6:	3c 81       	ldd	r19, Y+4	; 0x04
     df8:	21 30       	cpi	r18, 0x01	; 1
     dfa:	31 05       	cpc	r19, r1
     dfc:	59 f1       	breq	.+86     	; 0xe54 <Timer1_Init+0x98>
     dfe:	9d c0       	rjmp	.+314    	; 0xf3a <Timer1_Init+0x17e>
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	91 05       	cpc	r25, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <Timer1_Init+0x50>
     e0a:	5e c0       	rjmp	.+188    	; 0xec8 <Timer1_Init+0x10c>
     e0c:	2b 81       	ldd	r18, Y+3	; 0x03
     e0e:	3c 81       	ldd	r19, Y+4	; 0x04
     e10:	24 30       	cpi	r18, 0x04	; 4
     e12:	31 05       	cpc	r19, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <Timer1_Init+0x5c>
     e16:	75 c0       	rjmp	.+234    	; 0xf02 <Timer1_Init+0x146>
     e18:	90 c0       	rjmp	.+288    	; 0xf3a <Timer1_Init+0x17e>
	{
		case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A, TCCR1A_WGM10);
     e1a:	af e4       	ldi	r26, 0x4F	; 79
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ef e4       	ldi	r30, 0x4F	; 79
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_WGM11);
     e28:	af e4       	ldi	r26, 0x4F	; 79
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ef e4       	ldi	r30, 0x4F	; 79
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8d 7f       	andi	r24, 0xFD	; 253
     e34:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, TCCR1B_WGM12);
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 7f       	andi	r24, 0xF7	; 247
     e42:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, TCCR1B_WGM13);
     e44:	ae e4       	ldi	r26, 0x4E	; 78
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ee e4       	ldi	r30, 0x4E	; 78
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7e       	andi	r24, 0xEF	; 239
     e50:	8c 93       	st	X, r24
     e52:	73 c0       	rjmp	.+230    	; 0xf3a <Timer1_Init+0x17e>
		break;
		case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A, TCCR1A_WGM10);
     e54:	af e4       	ldi	r26, 0x4F	; 79
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ef e4       	ldi	r30, 0x4F	; 79
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8e 7f       	andi	r24, 0xFE	; 254
     e60:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_WGM11);
     e62:	af e4       	ldi	r26, 0x4F	; 79
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ef e4       	ldi	r30, 0x4F	; 79
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8d 7f       	andi	r24, 0xFD	; 253
     e6e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
     e70:	ae e4       	ldi	r26, 0x4E	; 78
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ee e4       	ldi	r30, 0x4E	; 78
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 60       	ori	r24, 0x08	; 8
     e7c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM13);
     e7e:	ae e4       	ldi	r26, 0x4E	; 78
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	ee e4       	ldi	r30, 0x4E	; 78
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 61       	ori	r24, 0x10	; 16
     e8a:	8c 93       	st	X, r24
     e8c:	56 c0       	rjmp	.+172    	; 0xf3a <Timer1_Init+0x17e>
		break;
		
		case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A, TCCR1A_WGM10);
     e8e:	af e4       	ldi	r26, 0x4F	; 79
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ef e4       	ldi	r30, 0x4F	; 79
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8e 7f       	andi	r24, 0xFE	; 254
     e9a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_WGM11);
     e9c:	af e4       	ldi	r26, 0x4F	; 79
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ef e4       	ldi	r30, 0x4F	; 79
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
     ea8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
     eaa:	ae e4       	ldi	r26, 0x4E	; 78
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ee e4       	ldi	r30, 0x4E	; 78
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 60       	ori	r24, 0x08	; 8
     eb6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, TCCR1B_WGM13);
     eb8:	ae e4       	ldi	r26, 0x4E	; 78
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e4       	ldi	r30, 0x4E	; 78
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7e       	andi	r24, 0xEF	; 239
     ec4:	8c 93       	st	X, r24
     ec6:	39 c0       	rjmp	.+114    	; 0xf3a <Timer1_Init+0x17e>
		break;
		
		case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLR_BIT(TCCR1A, TCCR1A_WGM10);
     ec8:	af e4       	ldi	r26, 0x4F	; 79
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ef e4       	ldi	r30, 0x4F	; 79
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_WGM11);
     ed6:	af e4       	ldi	r26, 0x4F	; 79
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ef e4       	ldi	r30, 0x4F	; 79
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
     ee4:	ae e4       	ldi	r26, 0x4E	; 78
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ee e4       	ldi	r30, 0x4E	; 78
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM13);
     ef2:	ae e4       	ldi	r26, 0x4E	; 78
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ee e4       	ldi	r30, 0x4E	; 78
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 61       	ori	r24, 0x10	; 16
     efe:	8c 93       	st	X, r24
     f00:	1c c0       	rjmp	.+56     	; 0xf3a <Timer1_Init+0x17e>
		break;
		
		case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A, TCCR1A_WGM10);
     f02:	af e4       	ldi	r26, 0x4F	; 79
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ef e4       	ldi	r30, 0x4F	; 79
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_WGM11);
     f10:	af e4       	ldi	r26, 0x4F	; 79
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ef e4       	ldi	r30, 0x4F	; 79
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	82 60       	ori	r24, 0x02	; 2
     f1c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM12);
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ee e4       	ldi	r30, 0x4E	; 78
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, TCCR1B_WGM13);
     f2c:	ae e4       	ldi	r26, 0x4E	; 78
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ee e4       	ldi	r30, 0x4E	; 78
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	8c 93       	st	X, r24
		break;
	}

	TCCR1B&=0XF8;
     f3a:	ae e4       	ldi	r26, 0x4E	; 78
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ee e4       	ldi	r30, 0x4E	; 78
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	88 7f       	andi	r24, 0xF8	; 248
     f46:	8c 93       	st	X, r24
	TCCR1B|=scaler;
     f48:	ae e4       	ldi	r26, 0x4E	; 78
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ee e4       	ldi	r30, 0x4E	; 78
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	90 81       	ld	r25, Z
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	89 2b       	or	r24, r25
     f56:	8c 93       	st	X, r24

}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <Timer1_OCRA1Mode>:
void Timer1_OCRA1Mode(OC1A_Mode_type oc1a_mode)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <Timer1_OCRA1Mode+0x6>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1a_mode)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3b 83       	std	Y+3, r19	; 0x03
     f7c:	2a 83       	std	Y+2, r18	; 0x02
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	9b 81       	ldd	r25, Y+3	; 0x03
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	21 f1       	breq	.+72     	; 0xfd0 <Timer1_OCRA1Mode+0x6a>
     f88:	2a 81       	ldd	r18, Y+2	; 0x02
     f8a:	3b 81       	ldd	r19, Y+3	; 0x03
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	2c f4       	brge	.+10     	; 0xf9c <Timer1_OCRA1Mode+0x36>
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	9b 81       	ldd	r25, Y+3	; 0x03
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	61 f0       	breq	.+24     	; 0xfb2 <Timer1_OCRA1Mode+0x4c>
     f9a:	46 c0       	rjmp	.+140    	; 0x1028 <Timer1_OCRA1Mode+0xc2>
     f9c:	2a 81       	ldd	r18, Y+2	; 0x02
     f9e:	3b 81       	ldd	r19, Y+3	; 0x03
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	21 f1       	breq	.+72     	; 0xfee <Timer1_OCRA1Mode+0x88>
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	71 f1       	breq	.+92     	; 0x100c <Timer1_OCRA1Mode+0xa6>
     fb0:	3b c0       	rjmp	.+118    	; 0x1028 <Timer1_OCRA1Mode+0xc2>
	{
		case OCRA_DISCONNECTED:
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     fb2:	af e4       	ldi	r26, 0x4F	; 79
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ef e4       	ldi	r30, 0x4F	; 79
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7b       	andi	r24, 0xBF	; 191
     fbe:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1A1);
     fc0:	af e4       	ldi	r26, 0x4F	; 79
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	ef e4       	ldi	r30, 0x4F	; 79
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 77       	andi	r24, 0x7F	; 127
     fcc:	8c 93       	st	X, r24
     fce:	2c c0       	rjmp	.+88     	; 0x1028 <Timer1_OCRA1Mode+0xc2>
		break;
		case OCRA_TOGGLE:
		SET_BIT(TCCR1A, TCCR1A_COM1A0);
     fd0:	af e4       	ldi	r26, 0x4F	; 79
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ef e4       	ldi	r30, 0x4F	; 79
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1A1);
     fde:	af e4       	ldi	r26, 0x4F	; 79
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ef e4       	ldi	r30, 0x4F	; 79
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 77       	andi	r24, 0x7F	; 127
     fea:	8c 93       	st	X, r24
     fec:	1d c0       	rjmp	.+58     	; 0x1028 <Timer1_OCRA1Mode+0xc2>
		break;
		case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     fee:	af e4       	ldi	r26, 0x4F	; 79
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ef e4       	ldi	r30, 0x4F	; 79
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 7b       	andi	r24, 0xBF	; 191
     ffa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
     ffc:	af e4       	ldi	r26, 0x4F	; 79
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ef e4       	ldi	r30, 0x4F	; 79
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	8c 93       	st	X, r24
    100a:	0e c0       	rjmp	.+28     	; 0x1028 <Timer1_OCRA1Mode+0xc2>
		break;
		case OCRA_INVERTING:
		SET_BIT(TCCR1A, TCCR1A_COM1A0);
    100c:	af e4       	ldi	r26, 0x4F	; 79
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ef e4       	ldi	r30, 0x4F	; 79
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 64       	ori	r24, 0x40	; 64
    1018:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    101a:	af e4       	ldi	r26, 0x4F	; 79
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ef e4       	ldi	r30, 0x4F	; 79
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 68       	ori	r24, 0x80	; 128
    1026:	8c 93       	st	X, r24
		break;
	}
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <Timer1_OCRB1Mode>:
void Timer1_OCRB1Mode(OC1B_Mode_type oc1b_mode)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <Timer1_OCRB1Mode+0x6>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1b_mode)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3b 83       	std	Y+3, r19	; 0x03
    104a:	2a 83       	std	Y+2, r18	; 0x02
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	21 f1       	breq	.+72     	; 0x109e <Timer1_OCRB1Mode+0x6a>
    1056:	2a 81       	ldd	r18, Y+2	; 0x02
    1058:	3b 81       	ldd	r19, Y+3	; 0x03
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	2c f4       	brge	.+10     	; 0x106a <Timer1_OCRB1Mode+0x36>
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	61 f0       	breq	.+24     	; 0x1080 <Timer1_OCRB1Mode+0x4c>
    1068:	46 c0       	rjmp	.+140    	; 0x10f6 <Timer1_OCRB1Mode+0xc2>
    106a:	2a 81       	ldd	r18, Y+2	; 0x02
    106c:	3b 81       	ldd	r19, Y+3	; 0x03
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	21 f1       	breq	.+72     	; 0x10bc <Timer1_OCRB1Mode+0x88>
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	71 f1       	breq	.+92     	; 0x10da <Timer1_OCRB1Mode+0xa6>
    107e:	3b c0       	rjmp	.+118    	; 0x10f6 <Timer1_OCRB1Mode+0xc2>
	{
		case OCRB_DISCONNECTED:
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    1080:	af e4       	ldi	r26, 0x4F	; 79
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ef e4       	ldi	r30, 0x4F	; 79
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 7e       	andi	r24, 0xEF	; 239
    108c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B1);
    108e:	af e4       	ldi	r26, 0x4F	; 79
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ef e4       	ldi	r30, 0x4F	; 79
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 7d       	andi	r24, 0xDF	; 223
    109a:	8c 93       	st	X, r24
    109c:	2c c0       	rjmp	.+88     	; 0x10f6 <Timer1_OCRB1Mode+0xc2>
		break;
		case OCRB_TOGGLE:
		SET_BIT(TCCR1A, TCCR1A_COM1B0);
    109e:	af e4       	ldi	r26, 0x4F	; 79
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ef e4       	ldi	r30, 0x4F	; 79
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 61       	ori	r24, 0x10	; 16
    10aa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B1);
    10ac:	af e4       	ldi	r26, 0x4F	; 79
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ef e4       	ldi	r30, 0x4F	; 79
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 7d       	andi	r24, 0xDF	; 223
    10b8:	8c 93       	st	X, r24
    10ba:	1d c0       	rjmp	.+58     	; 0x10f6 <Timer1_OCRB1Mode+0xc2>
		break;
		case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    10bc:	af e4       	ldi	r26, 0x4F	; 79
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ef e4       	ldi	r30, 0x4F	; 79
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 7e       	andi	r24, 0xEF	; 239
    10c8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);
    10ca:	af e4       	ldi	r26, 0x4F	; 79
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ef e4       	ldi	r30, 0x4F	; 79
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 62       	ori	r24, 0x20	; 32
    10d6:	8c 93       	st	X, r24
    10d8:	0e c0       	rjmp	.+28     	; 0x10f6 <Timer1_OCRB1Mode+0xc2>
		break;
		case OCRB_INVERTING:
		SET_BIT(TCCR1A, TCCR1A_COM1B0);
    10da:	af e4       	ldi	r26, 0x4F	; 79
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 61       	ori	r24, 0x10	; 16
    10e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);
    10e8:	af e4       	ldi	r26, 0x4F	; 79
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ef e4       	ldi	r30, 0x4F	; 79
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 62       	ori	r24, 0x20	; 32
    10f4:	8c 93       	st	X, r24
		break;
	}
}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <Timer1_InputCaptureEdge>:
void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
	if (edge == RISING)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 23       	and	r24, r24
    1112:	41 f4       	brne	.+16     	; 0x1124 <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B, TCCR1B_ICES1);
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	8c 93       	st	X, r24
    1122:	0a c0       	rjmp	.+20     	; 0x1138 <Timer1_InputCaptureEdge+0x36>

	else if (edge == FALLING)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	39 f4       	brne	.+14     	; 0x1138 <Timer1_InputCaptureEdge+0x36>
		CLR_BIT(TCCR1B, TCCR1B_ICES1);
    112a:	ae e4       	ldi	r26, 0x4E	; 78
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ee e4       	ldi	r30, 0x4E	; 78
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8f 7b       	andi	r24, 0xBF	; 191
    1136:	8c 93       	st	X, r24
}
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <Timer1_ICU_InterruptEnable>:


/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_TICIE1);
    1148:	a9 e5       	ldi	r26, 0x59	; 89
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e9 e5       	ldi	r30, 0x59	; 89
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 62       	ori	r24, 0x20	; 32
    1154:	8c 93       	st	X, r24
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TIMSK_TICIE1);
    1164:	a9 e5       	ldi	r26, 0x59	; 89
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e9 e5       	ldi	r30, 0x59	; 89
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7d       	andi	r24, 0xDF	; 223
    1170:	8c 93       	st	X, r24
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_TOIE1);
    1180:	a9 e5       	ldi	r26, 0x59	; 89
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e9 e5       	ldi	r30, 0x59	; 89
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	84 60       	ori	r24, 0x04	; 4
    118c:	8c 93       	st	X, r24
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TIMSK_TOIE1);
    119c:	a9 e5       	ldi	r26, 0x59	; 89
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e9 e5       	ldi	r30, 0x59	; 89
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8b 7f       	andi	r24, 0xFB	; 251
    11a8:	8c 93       	st	X, r24
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_OCIE1A);
    11b8:	a9 e5       	ldi	r26, 0x59	; 89
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e9 e5       	ldi	r30, 0x59	; 89
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	80 61       	ori	r24, 0x10	; 16
    11c4:	8c 93       	st	X, r24
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TIMSK_OCIE1A);
    11d4:	a9 e5       	ldi	r26, 0x59	; 89
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e9 e5       	ldi	r30, 0x59	; 89
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7e       	andi	r24, 0xEF	; 239
    11e0:	8c 93       	st	X, r24
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TIMSK_OCIE1B);
    11f0:	a9 e5       	ldi	r26, 0x59	; 89
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e9 e5       	ldi	r30, 0x59	; 89
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 60       	ori	r24, 0x08	; 8
    11fc:	8c 93       	st	X, r24
}
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TIMSK_OCIE1B);
    120c:	a9 e5       	ldi	r26, 0x59	; 89
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e9 e5       	ldi	r30, 0x59	; 89
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	87 7f       	andi	r24, 0xF7	; 247
    1218:	8c 93       	st	X, r24
}
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <Timer1_OVF_SetCallBack+0x6>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	90 93 5b 01 	sts	0x015B, r25
    1236:	80 93 5a 01 	sts	0x015A, r24
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <Timer1_OCA_SetCallBack+0x6>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	90 93 5d 01 	sts	0x015D, r25
    125a:	80 93 5c 01 	sts	0x015C, r24
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <Timer1_OCB_SetCallBack+0x6>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	90 93 5f 01 	sts	0x015F, r25
    127e:	80 93 5e 01 	sts	0x015E, r24
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <Timer1_ICU_SetCallBack+0x6>
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	90 93 61 01 	sts	0x0161, r25
    12a2:	80 93 60 01 	sts	0x0160, r24
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OVF_Fptr != NULL_PTR)
    12da:	80 91 5a 01 	lds	r24, 0x015A
    12de:	90 91 5b 01 	lds	r25, 0x015B
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	29 f0       	breq	.+10     	; 0x12f0 <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    12e6:	e0 91 5a 01 	lds	r30, 0x015A
    12ea:	f0 91 5b 01 	lds	r31, 0x015B
    12ee:	09 95       	icall
	}
}
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OCA_Fptr != NULL_PTR)
    1340:	80 91 5c 01 	lds	r24, 0x015C
    1344:	90 91 5d 01 	lds	r25, 0x015D
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	29 f0       	breq	.+10     	; 0x1356 <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    134c:	e0 91 5c 01 	lds	r30, 0x015C
    1350:	f0 91 5d 01 	lds	r31, 0x015D
    1354:	09 95       	icall
	}
}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	2f 93       	push	r18
    1388:	3f 93       	push	r19
    138a:	4f 93       	push	r20
    138c:	5f 93       	push	r21
    138e:	6f 93       	push	r22
    1390:	7f 93       	push	r23
    1392:	8f 93       	push	r24
    1394:	9f 93       	push	r25
    1396:	af 93       	push	r26
    1398:	bf 93       	push	r27
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OCB_Fptr != NULL_PTR)
    13a6:	80 91 5e 01 	lds	r24, 0x015E
    13aa:	90 91 5f 01 	lds	r25, 0x015F
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	29 f0       	breq	.+10     	; 0x13bc <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    13b2:	e0 91 5e 01 	lds	r30, 0x015E
    13b6:	f0 91 5f 01 	lds	r31, 0x015F
    13ba:	09 95       	icall
	}
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	2f 93       	push	r18
    13ee:	3f 93       	push	r19
    13f0:	4f 93       	push	r20
    13f2:	5f 93       	push	r21
    13f4:	6f 93       	push	r22
    13f6:	7f 93       	push	r23
    13f8:	8f 93       	push	r24
    13fa:	9f 93       	push	r25
    13fc:	af 93       	push	r26
    13fe:	bf 93       	push	r27
    1400:	ef 93       	push	r30
    1402:	ff 93       	push	r31
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_ICU_Fptr != NULL_PTR)
    140c:	80 91 60 01 	lds	r24, 0x0160
    1410:	90 91 61 01 	lds	r25, 0x0161
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	29 f0       	breq	.+10     	; 0x1422 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    1418:	e0 91 60 01 	lds	r30, 0x0160
    141c:	f0 91 61 01 	lds	r31, 0x0161
    1420:	09 95       	icall
	}
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <__vector_11>:
ISR(TIMER0_OVF_vect) {
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	2f 93       	push	r18
    1454:	3f 93       	push	r19
    1456:	4f 93       	push	r20
    1458:	5f 93       	push	r21
    145a:	6f 93       	push	r22
    145c:	7f 93       	push	r23
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25
    1462:	af 93       	push	r26
    1464:	bf 93       	push	r27
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62

	if (Timer_OV_Fptr != NULL_PTR) {
    1472:	80 91 56 01 	lds	r24, 0x0156
    1476:	90 91 57 01 	lds	r25, 0x0157
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	29 f0       	breq	.+10     	; 0x1488 <__vector_11+0x40>
		Timer_OV_Fptr();
    147e:	e0 91 56 01 	lds	r30, 0x0156
    1482:	f0 91 57 01 	lds	r31, 0x0157
    1486:	09 95       	icall
	}
}
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	bf 91       	pop	r27
    1492:	af 91       	pop	r26
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	7f 91       	pop	r23
    149a:	6f 91       	pop	r22
    149c:	5f 91       	pop	r21
    149e:	4f 91       	pop	r20
    14a0:	3f 91       	pop	r19
    14a2:	2f 91       	pop	r18
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <__vector_10>:
ISR(TIMER0_OC_vect)
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    if (Timer_COMP_Fptr != NULL_PTR)
    14d8:	80 91 58 01 	lds	r24, 0x0158
    14dc:	90 91 59 01 	lds	r25, 0x0159
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	29 f0       	breq	.+10     	; 0x14ee <__vector_10+0x40>
    {
        Timer_COMP_Fptr();
    14e4:	e0 91 58 01 	lds	r30, 0x0158
    14e8:	f0 91 59 01 	lds	r31, 0x0159
    14ec:	09 95       	icall
    }
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	bf 91       	pop	r27
    14f8:	af 91       	pop	r26
    14fa:	9f 91       	pop	r25
    14fc:	8f 91       	pop	r24
    14fe:	7f 91       	pop	r23
    1500:	6f 91       	pop	r22
    1502:	5f 91       	pop	r21
    1504:	4f 91       	pop	r20
    1506:	3f 91       	pop	r19
    1508:	2f 91       	pop	r18
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <M_EXTINT_Void_EXTINTInit>:
void(*ExtInt0_CallBack)(void);
void(*ExtInt1_CallBack)(void);
void(*ExtInt2_CallBack)(void);

void M_EXTINT_Void_EXTINTInit(u8 Copy_U8_ExtIntChannel)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <M_EXTINT_Void_EXTINTInit+0x6>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_ExtIntChannel)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3b 83       	std	Y+3, r19	; 0x03
    152a:	2a 83       	std	Y+2, r18	; 0x02
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	f9 f0       	breq	.+62     	; 0x1574 <M_EXTINT_Void_EXTINTInit+0x60>
    1536:	2a 81       	ldd	r18, Y+2	; 0x02
    1538:	3b 81       	ldd	r19, Y+3	; 0x03
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	81 f1       	breq	.+96     	; 0x15a0 <M_EXTINT_Void_EXTINTInit+0x8c>
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	9b 81       	ldd	r25, Y+3	; 0x03
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	d1 f5       	brne	.+116    	; 0x15bc <M_EXTINT_Void_EXTINTInit+0xa8>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC00_BIT);
    1548:	a5 e5       	ldi	r26, 0x55	; 85
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e5       	ldi	r30, 0x55	; 85
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    1556:	a5 e5       	ldi	r26, 0x55	; 85
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e5       	ldi	r30, 0x55	; 85
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	82 60       	ori	r24, 0x02	; 2
    1562:	8c 93       	st	X, r24
#elif EXTINT0_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT0_BIT);
    1564:	ab e5       	ldi	r26, 0x5B	; 91
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	eb e5       	ldi	r30, 0x5B	; 91
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 64       	ori	r24, 0x40	; 64
    1570:	8c 93       	st	X, r24
    1572:	24 c0       	rjmp	.+72     	; 0x15bc <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT1_CHANNEL:
#if   EXTINT1_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8b 7f       	andi	r24, 0xFB	; 251
    1580:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
#elif EXTINT1_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT1_BIT);
    1590:	ab e5       	ldi	r26, 0x5B	; 91
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	eb e5       	ldi	r30, 0x5B	; 91
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 68       	ori	r24, 0x80	; 128
    159c:	8c 93       	st	X, r24
    159e:	0e c0       	rjmp	.+28     	; 0x15bc <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT2_CHANNEL:
#if   EXTINT2_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#elif EXTINT2_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    15a0:	a4 e5       	ldi	r26, 0x54	; 84
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e4 e5       	ldi	r30, 0x54	; 84
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 64       	ori	r24, 0x40	; 64
    15ac:	8c 93       	st	X, r24
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT2_BIT);
    15ae:	ab e5       	ldi	r26, 0x5B	; 91
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	eb e5       	ldi	r30, 0x5B	; 91
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 62       	ori	r24, 0x20	; 32
    15ba:	8c 93       	st	X, r24
		break;
	default:                                           break;
	}
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <M_EXTINT_Void_SetCallBack>:

void M_EXTINT_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_ptr)(void))
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <M_EXTINT_Void_SetCallBack+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <M_EXTINT_Void_SetCallBack+0x8>
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	7b 83       	std	Y+3, r23	; 0x03
    15da:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_ExtIntChannel)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3d 83       	std	Y+5, r19	; 0x05
    15e4:	2c 83       	std	Y+4, r18	; 0x04
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	81 f0       	breq	.+32     	; 0x1610 <M_EXTINT_Void_SetCallBack+0x48>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	91 f0       	breq	.+36     	; 0x161e <M_EXTINT_Void_SetCallBack+0x56>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	a1 f4       	brne	.+40     	; 0x162a <M_EXTINT_Void_SetCallBack+0x62>
	{
	case INT0_CHANNEL:ExtInt0_CallBack = Copy_ptr; break;
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	9b 81       	ldd	r25, Y+3	; 0x03
    1606:	90 93 81 01 	sts	0x0181, r25
    160a:	80 93 80 01 	sts	0x0180, r24
    160e:	0d c0       	rjmp	.+26     	; 0x162a <M_EXTINT_Void_SetCallBack+0x62>
	case INT1_CHANNEL:ExtInt1_CallBack = Copy_ptr; break;
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	9b 81       	ldd	r25, Y+3	; 0x03
    1614:	90 93 7d 01 	sts	0x017D, r25
    1618:	80 93 7c 01 	sts	0x017C, r24
    161c:	06 c0       	rjmp	.+12     	; 0x162a <M_EXTINT_Void_SetCallBack+0x62>
	case INT2_CHANNEL:ExtInt2_CallBack = Copy_ptr; break;
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	90 93 7f 01 	sts	0x017F, r25
    1626:	80 93 7e 01 	sts	0x017E, r24
	default:                                       break;
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <__vector_1>:

ISR(INT0_vect)
{
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	ExtInt0_CallBack();
    1664:	e0 91 80 01 	lds	r30, 0x0180
    1668:	f0 91 81 01 	lds	r31, 0x0181
    166c:	09 95       	icall
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_2>:
ISR(INT1_vect)
{
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	ExtInt1_CallBack();
    16be:	e0 91 7c 01 	lds	r30, 0x017C
    16c2:	f0 91 7d 01 	lds	r31, 0x017D
    16c6:	09 95       	icall
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_3>:
ISR(INT2_vect)
{
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	ExtInt2_CallBack();
    1718:	e0 91 7e 01 	lds	r30, 0x017E
    171c:	f0 91 7f 01 	lds	r31, 0x017F
    1720:	09 95       	icall
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	2a 97       	sbiw	r28, 0x0a	; 10
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	8b 83       	std	Y+3, r24	; 0x03
    175e:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9a e0       	ldi	r25, 0x0A	; 10
    1764:	69 2f       	mov	r22, r25
    1766:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    176a:	89 2f       	mov	r24, r25
    176c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9a e0       	ldi	r25, 0x0A	; 10
    1772:	69 2f       	mov	r22, r25
    1774:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1778:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3a 87       	std	Y+10, r19	; 0x0a
    1782:	29 87       	std	Y+9, r18	; 0x09
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	39 f0       	breq	.+14     	; 0x179a <M_DIO_Void_SetPinDirection+0x52>
    178c:	29 85       	ldd	r18, Y+9	; 0x09
    178e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1790:	21 30       	cpi	r18, 0x01	; 1
    1792:	31 05       	cpc	r19, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <M_DIO_Void_SetPinDirection+0x50>
    1796:	76 c0       	rjmp	.+236    	; 0x1884 <M_DIO_Void_SetPinDirection+0x13c>
    1798:	e4 c0       	rjmp	.+456    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	38 87       	std	Y+8, r19	; 0x08
    17a2:	2f 83       	std	Y+7, r18	; 0x07
    17a4:	8f 81       	ldd	r24, Y+7	; 0x07
    17a6:	98 85       	ldd	r25, Y+8	; 0x08
    17a8:	82 30       	cpi	r24, 0x02	; 2
    17aa:	91 05       	cpc	r25, r1
    17ac:	61 f1       	breq	.+88     	; 0x1806 <M_DIO_Void_SetPinDirection+0xbe>
    17ae:	2f 81       	ldd	r18, Y+7	; 0x07
    17b0:	38 85       	ldd	r19, Y+8	; 0x08
    17b2:	23 30       	cpi	r18, 0x03	; 3
    17b4:	31 05       	cpc	r19, r1
    17b6:	34 f4       	brge	.+12     	; 0x17c4 <M_DIO_Void_SetPinDirection+0x7c>
    17b8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ba:	98 85       	ldd	r25, Y+8	; 0x08
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	69 f0       	breq	.+26     	; 0x17dc <M_DIO_Void_SetPinDirection+0x94>
    17c2:	cf c0       	rjmp	.+414    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
    17c4:	2f 81       	ldd	r18, Y+7	; 0x07
    17c6:	38 85       	ldd	r19, Y+8	; 0x08
    17c8:	23 30       	cpi	r18, 0x03	; 3
    17ca:	31 05       	cpc	r19, r1
    17cc:	89 f1       	breq	.+98     	; 0x1830 <M_DIO_Void_SetPinDirection+0xe8>
    17ce:	8f 81       	ldd	r24, Y+7	; 0x07
    17d0:	98 85       	ldd	r25, Y+8	; 0x08
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	91 05       	cpc	r25, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <M_DIO_Void_SetPinDirection+0x92>
    17d8:	40 c0       	rjmp	.+128    	; 0x185a <M_DIO_Void_SetPinDirection+0x112>
    17da:	c3 c0       	rjmp	.+390    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    17dc:	aa e3       	ldi	r26, 0x3A	; 58
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ea e3       	ldi	r30, 0x3A	; 58
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <M_DIO_Void_SetPinDirection+0xb2>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <M_DIO_Void_SetPinDirection+0xae>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	ae c0       	rjmp	.+348    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    1806:	a7 e3       	ldi	r26, 0x37	; 55
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e7 e3       	ldi	r30, 0x37	; 55
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <M_DIO_Void_SetPinDirection+0xdc>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <M_DIO_Void_SetPinDirection+0xd8>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	99 c0       	rjmp	.+306    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    1830:	a4 e3       	ldi	r26, 0x34	; 52
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e4 e3       	ldi	r30, 0x34	; 52
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <M_DIO_Void_SetPinDirection+0x106>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <M_DIO_Void_SetPinDirection+0x102>
    1852:	80 95       	com	r24
    1854:	84 23       	and	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	84 c0       	rjmp	.+264    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    185a:	a1 e3       	ldi	r26, 0x31	; 49
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e1 e3       	ldi	r30, 0x31	; 49
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <M_DIO_Void_SetPinDirection+0x130>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <M_DIO_Void_SetPinDirection+0x12c>
    187c:	80 95       	com	r24
    187e:	84 23       	and	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	6f c0       	rjmp	.+222    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3e 83       	std	Y+6, r19	; 0x06
    188c:	2d 83       	std	Y+5, r18	; 0x05
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	91 05       	cpc	r25, r1
    1896:	51 f1       	breq	.+84     	; 0x18ec <M_DIO_Void_SetPinDirection+0x1a4>
    1898:	2d 81       	ldd	r18, Y+5	; 0x05
    189a:	3e 81       	ldd	r19, Y+6	; 0x06
    189c:	23 30       	cpi	r18, 0x03	; 3
    189e:	31 05       	cpc	r19, r1
    18a0:	34 f4       	brge	.+12     	; 0x18ae <M_DIO_Void_SetPinDirection+0x166>
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	91 05       	cpc	r25, r1
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <M_DIO_Void_SetPinDirection+0x17c>
    18ac:	5a c0       	rjmp	.+180    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
    18ae:	2d 81       	ldd	r18, Y+5	; 0x05
    18b0:	3e 81       	ldd	r19, Y+6	; 0x06
    18b2:	23 30       	cpi	r18, 0x03	; 3
    18b4:	31 05       	cpc	r19, r1
    18b6:	71 f1       	breq	.+92     	; 0x1914 <M_DIO_Void_SetPinDirection+0x1cc>
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	84 30       	cpi	r24, 0x04	; 4
    18be:	91 05       	cpc	r25, r1
    18c0:	e9 f1       	breq	.+122    	; 0x193c <M_DIO_Void_SetPinDirection+0x1f4>
    18c2:	4f c0       	rjmp	.+158    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    18c4:	aa e3       	ldi	r26, 0x3A	; 58
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ea e3       	ldi	r30, 0x3A	; 58
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <M_DIO_Void_SetPinDirection+0x19a>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <M_DIO_Void_SetPinDirection+0x196>
    18e6:	84 2b       	or	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	3b c0       	rjmp	.+118    	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    18ec:	a7 e3       	ldi	r26, 0x37	; 55
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <M_DIO_Void_SetPinDirection+0x1c2>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <M_DIO_Void_SetPinDirection+0x1be>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	27 c0       	rjmp	.+78     	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1914:	a4 e3       	ldi	r26, 0x34	; 52
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e4 e3       	ldi	r30, 0x34	; 52
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <M_DIO_Void_SetPinDirection+0x1ea>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <M_DIO_Void_SetPinDirection+0x1e6>
    1936:	84 2b       	or	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	13 c0       	rjmp	.+38     	; 0x1962 <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    193c:	a1 e3       	ldi	r26, 0x31	; 49
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e1 e3       	ldi	r30, 0x31	; 49
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <M_DIO_Void_SetPinDirection+0x212>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <M_DIO_Void_SetPinDirection+0x20e>
    195e:	84 2b       	or	r24, r20
    1960:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
    1962:	2a 96       	adiw	r28, 0x0a	; 10
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	2a 97       	sbiw	r28, 0x0a	; 10
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	8b 83       	std	Y+3, r24	; 0x03
    198a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9a e0       	ldi	r25, 0x0A	; 10
    1990:	69 2f       	mov	r22, r25
    1992:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1996:	89 2f       	mov	r24, r25
    1998:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9a e0       	ldi	r25, 0x0A	; 10
    199e:	69 2f       	mov	r22, r25
    19a0:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    19a4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	3a 87       	std	Y+10, r19	; 0x0a
    19ae:	29 87       	std	Y+9, r18	; 0x09
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	39 f0       	breq	.+14     	; 0x19c6 <M_DIO_Void_SetPinValue+0x52>
    19b8:	29 85       	ldd	r18, Y+9	; 0x09
    19ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    19bc:	21 30       	cpi	r18, 0x01	; 1
    19be:	31 05       	cpc	r19, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <M_DIO_Void_SetPinValue+0x50>
    19c2:	76 c0       	rjmp	.+236    	; 0x1ab0 <M_DIO_Void_SetPinValue+0x13c>
    19c4:	e4 c0       	rjmp	.+456    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	38 87       	std	Y+8, r19	; 0x08
    19ce:	2f 83       	std	Y+7, r18	; 0x07
    19d0:	8f 81       	ldd	r24, Y+7	; 0x07
    19d2:	98 85       	ldd	r25, Y+8	; 0x08
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	91 05       	cpc	r25, r1
    19d8:	61 f1       	breq	.+88     	; 0x1a32 <M_DIO_Void_SetPinValue+0xbe>
    19da:	2f 81       	ldd	r18, Y+7	; 0x07
    19dc:	38 85       	ldd	r19, Y+8	; 0x08
    19de:	23 30       	cpi	r18, 0x03	; 3
    19e0:	31 05       	cpc	r19, r1
    19e2:	34 f4       	brge	.+12     	; 0x19f0 <M_DIO_Void_SetPinValue+0x7c>
    19e4:	8f 81       	ldd	r24, Y+7	; 0x07
    19e6:	98 85       	ldd	r25, Y+8	; 0x08
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	91 05       	cpc	r25, r1
    19ec:	69 f0       	breq	.+26     	; 0x1a08 <M_DIO_Void_SetPinValue+0x94>
    19ee:	cf c0       	rjmp	.+414    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
    19f0:	2f 81       	ldd	r18, Y+7	; 0x07
    19f2:	38 85       	ldd	r19, Y+8	; 0x08
    19f4:	23 30       	cpi	r18, 0x03	; 3
    19f6:	31 05       	cpc	r19, r1
    19f8:	89 f1       	breq	.+98     	; 0x1a5c <M_DIO_Void_SetPinValue+0xe8>
    19fa:	8f 81       	ldd	r24, Y+7	; 0x07
    19fc:	98 85       	ldd	r25, Y+8	; 0x08
    19fe:	84 30       	cpi	r24, 0x04	; 4
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <M_DIO_Void_SetPinValue+0x92>
    1a04:	40 c0       	rjmp	.+128    	; 0x1a86 <M_DIO_Void_SetPinValue+0x112>
    1a06:	c3 c0       	rjmp	.+390    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1a08:	ab e3       	ldi	r26, 0x3B	; 59
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <M_DIO_Void_SetPinValue+0xb2>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <M_DIO_Void_SetPinValue+0xae>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	ae c0       	rjmp	.+348    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1a32:	a8 e3       	ldi	r26, 0x38	; 56
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e8 e3       	ldi	r30, 0x38	; 56
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <M_DIO_Void_SetPinValue+0xdc>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <M_DIO_Void_SetPinValue+0xd8>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	99 c0       	rjmp	.+306    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1a5c:	a5 e3       	ldi	r26, 0x35	; 53
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e3       	ldi	r30, 0x35	; 53
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <M_DIO_Void_SetPinValue+0x106>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <M_DIO_Void_SetPinValue+0x102>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
    1a84:	84 c0       	rjmp	.+264    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1a86:	a2 e3       	ldi	r26, 0x32	; 50
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e2 e3       	ldi	r30, 0x32	; 50
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <M_DIO_Void_SetPinValue+0x130>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <M_DIO_Void_SetPinValue+0x12c>
    1aa8:	80 95       	com	r24
    1aaa:	84 23       	and	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	6f c0       	rjmp	.+222    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3e 83       	std	Y+6, r19	; 0x06
    1ab8:	2d 83       	std	Y+5, r18	; 0x05
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	82 30       	cpi	r24, 0x02	; 2
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	51 f1       	breq	.+84     	; 0x1b18 <M_DIO_Void_SetPinValue+0x1a4>
    1ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac8:	23 30       	cpi	r18, 0x03	; 3
    1aca:	31 05       	cpc	r19, r1
    1acc:	34 f4       	brge	.+12     	; 0x1ada <M_DIO_Void_SetPinValue+0x166>
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <M_DIO_Void_SetPinValue+0x17c>
    1ad8:	5a c0       	rjmp	.+180    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
    1ada:	2d 81       	ldd	r18, Y+5	; 0x05
    1adc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ade:	23 30       	cpi	r18, 0x03	; 3
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	71 f1       	breq	.+92     	; 0x1b40 <M_DIO_Void_SetPinValue+0x1cc>
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	84 30       	cpi	r24, 0x04	; 4
    1aea:	91 05       	cpc	r25, r1
    1aec:	e9 f1       	breq	.+122    	; 0x1b68 <M_DIO_Void_SetPinValue+0x1f4>
    1aee:	4f c0       	rjmp	.+158    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1af0:	ab e3       	ldi	r26, 0x3B	; 59
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	eb e3       	ldi	r30, 0x3B	; 59
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <M_DIO_Void_SetPinValue+0x19a>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <M_DIO_Void_SetPinValue+0x196>
    1b12:	84 2b       	or	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	3b c0       	rjmp	.+118    	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1b18:	a8 e3       	ldi	r26, 0x38	; 56
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <M_DIO_Void_SetPinValue+0x1c2>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <M_DIO_Void_SetPinValue+0x1be>
    1b3a:	84 2b       	or	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	27 c0       	rjmp	.+78     	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1b40:	a5 e3       	ldi	r26, 0x35	; 53
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e5 e3       	ldi	r30, 0x35	; 53
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <M_DIO_Void_SetPinValue+0x1ea>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <M_DIO_Void_SetPinValue+0x1e6>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	13 c0       	rjmp	.+38     	; 0x1b8e <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1b68:	a2 e3       	ldi	r26, 0x32	; 50
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e2 e3       	ldi	r30, 0x32	; 50
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <M_DIO_Void_SetPinValue+0x212>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <M_DIO_Void_SetPinValue+0x20e>
    1b8a:	84 2b       	or	r24, r20
    1b8c:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    1b8e:	2a 96       	adiw	r28, 0x0a	; 10
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <M_DIO_Void_GetPinValue+0x6>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <M_DIO_Void_GetPinValue+0x8>
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <M_DIO_Void_GetPinValue+0xa>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	9a e0       	ldi	r25, 0x0A	; 10
    1bb4:	69 2f       	mov	r22, r25
    1bb6:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1bba:	89 2f       	mov	r24, r25
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	9a e0       	ldi	r25, 0x0A	; 10
    1bc2:	69 2f       	mov	r22, r25
    1bc4:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1bc8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    1bca:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3e 83       	std	Y+6, r19	; 0x06
    1bd4:	2d 83       	std	Y+5, r18	; 0x05
    1bd6:	4d 81       	ldd	r20, Y+5	; 0x05
    1bd8:	5e 81       	ldd	r21, Y+6	; 0x06
    1bda:	42 30       	cpi	r20, 0x02	; 2
    1bdc:	51 05       	cpc	r21, r1
    1bde:	41 f1       	breq	.+80     	; 0x1c30 <M_DIO_Void_GetPinValue+0x90>
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 05       	cpc	r25, r1
    1be8:	34 f4       	brge	.+12     	; 0x1bf6 <M_DIO_Void_GetPinValue+0x56>
    1bea:	2d 81       	ldd	r18, Y+5	; 0x05
    1bec:	3e 81       	ldd	r19, Y+6	; 0x06
    1bee:	21 30       	cpi	r18, 0x01	; 1
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	61 f0       	breq	.+24     	; 0x1c0c <M_DIO_Void_GetPinValue+0x6c>
    1bf4:	52 c0       	rjmp	.+164    	; 0x1c9a <M_DIO_Void_GetPinValue+0xfa>
    1bf6:	4d 81       	ldd	r20, Y+5	; 0x05
    1bf8:	5e 81       	ldd	r21, Y+6	; 0x06
    1bfa:	43 30       	cpi	r20, 0x03	; 3
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	51 f1       	breq	.+84     	; 0x1c54 <M_DIO_Void_GetPinValue+0xb4>
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	91 05       	cpc	r25, r1
    1c08:	b9 f1       	breq	.+110    	; 0x1c78 <M_DIO_Void_GetPinValue+0xd8>
    1c0a:	47 c0       	rjmp	.+142    	; 0x1c9a <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    1c0c:	e9 e3       	ldi	r30, 0x39	; 57
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <M_DIO_Void_GetPinValue+0x84>
    1c20:	55 95       	asr	r21
    1c22:	47 95       	ror	r20
    1c24:	8a 95       	dec	r24
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <M_DIO_Void_GetPinValue+0x80>
    1c28:	ca 01       	movw	r24, r20
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	35 c0       	rjmp	.+106    	; 0x1c9a <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1c30:	e6 e3       	ldi	r30, 0x36	; 54
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a9 01       	movw	r20, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <M_DIO_Void_GetPinValue+0xa8>
    1c44:	55 95       	asr	r21
    1c46:	47 95       	ror	r20
    1c48:	8a 95       	dec	r24
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <M_DIO_Void_GetPinValue+0xa4>
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	81 70       	andi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	23 c0       	rjmp	.+70     	; 0x1c9a <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1c54:	e3 e3       	ldi	r30, 0x33	; 51
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a9 01       	movw	r20, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <M_DIO_Void_GetPinValue+0xcc>
    1c68:	55 95       	asr	r21
    1c6a:	47 95       	ror	r20
    1c6c:	8a 95       	dec	r24
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <M_DIO_Void_GetPinValue+0xc8>
    1c70:	ca 01       	movw	r24, r20
    1c72:	81 70       	andi	r24, 0x01	; 1
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	11 c0       	rjmp	.+34     	; 0x1c9a <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1c78:	e0 e3       	ldi	r30, 0x30	; 48
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a9 01       	movw	r20, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <M_DIO_Void_GetPinValue+0xf0>
    1c8c:	55 95       	asr	r21
    1c8e:	47 95       	ror	r20
    1c90:	8a 95       	dec	r24
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <M_DIO_Void_GetPinValue+0xec>
    1c94:	ca 01       	movw	r24, r20
    1c96:	81 70       	andi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9c:	26 96       	adiw	r28, 0x06	; 6
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <M_DIO_Void_TogPin+0x6>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <M_DIO_Void_TogPin+0x8>
    1cb6:	0f 92       	push	r0
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9a e0       	ldi	r25, 0x0A	; 10
    1cc2:	69 2f       	mov	r22, r25
    1cc4:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1cc8:	89 2f       	mov	r24, r25
    1cca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9a e0       	ldi	r25, 0x0A	; 10
    1cd0:	69 2f       	mov	r22, r25
    1cd2:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1cd6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3d 83       	std	Y+5, r19	; 0x05
    1ce0:	2c 83       	std	Y+4, r18	; 0x04
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	82 30       	cpi	r24, 0x02	; 2
    1ce8:	91 05       	cpc	r25, r1
    1cea:	51 f1       	breq	.+84     	; 0x1d40 <M_DIO_Void_TogPin+0x92>
    1cec:	2c 81       	ldd	r18, Y+4	; 0x04
    1cee:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf0:	23 30       	cpi	r18, 0x03	; 3
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	34 f4       	brge	.+12     	; 0x1d02 <M_DIO_Void_TogPin+0x54>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	61 f0       	breq	.+24     	; 0x1d18 <M_DIO_Void_TogPin+0x6a>
    1d00:	5a c0       	rjmp	.+180    	; 0x1db6 <M_DIO_Void_TogPin+0x108>
    1d02:	2c 81       	ldd	r18, Y+4	; 0x04
    1d04:	3d 81       	ldd	r19, Y+5	; 0x05
    1d06:	23 30       	cpi	r18, 0x03	; 3
    1d08:	31 05       	cpc	r19, r1
    1d0a:	71 f1       	breq	.+92     	; 0x1d68 <M_DIO_Void_TogPin+0xba>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	84 30       	cpi	r24, 0x04	; 4
    1d12:	91 05       	cpc	r25, r1
    1d14:	e9 f1       	breq	.+122    	; 0x1d90 <M_DIO_Void_TogPin+0xe2>
    1d16:	4f c0       	rjmp	.+158    	; 0x1db6 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1d18:	ab e3       	ldi	r26, 0x3B	; 59
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	eb e3       	ldi	r30, 0x3B	; 59
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <M_DIO_Void_TogPin+0x88>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <M_DIO_Void_TogPin+0x84>
    1d3a:	84 27       	eor	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	3b c0       	rjmp	.+118    	; 0x1db6 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    1d40:	a8 e3       	ldi	r26, 0x38	; 56
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <M_DIO_Void_TogPin+0xb0>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <M_DIO_Void_TogPin+0xac>
    1d62:	84 27       	eor	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	27 c0       	rjmp	.+78     	; 0x1db6 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1d68:	a5 e3       	ldi	r26, 0x35	; 53
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e5 e3       	ldi	r30, 0x35	; 53
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <M_DIO_Void_TogPin+0xd8>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <M_DIO_Void_TogPin+0xd4>
    1d8a:	84 27       	eor	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	13 c0       	rjmp	.+38     	; 0x1db6 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    1d90:	a2 e3       	ldi	r26, 0x32	; 50
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e2 e3       	ldi	r30, 0x32	; 50
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <M_DIO_Void_TogPin+0x100>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <M_DIO_Void_TogPin+0xfc>
    1db2:	84 27       	eor	r24, r20
    1db4:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	2a 97       	sbiw	r28, 0x0a	; 10
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	8b 83       	std	Y+3, r24	; 0x03
    1ddc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9a e0       	ldi	r25, 0x0A	; 10
    1de2:	69 2f       	mov	r22, r25
    1de4:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1de8:	89 2f       	mov	r24, r25
    1dea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9a e0       	ldi	r25, 0x0A	; 10
    1df0:	69 2f       	mov	r22, r25
    1df2:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    1df6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1df8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3a 87       	std	Y+10, r19	; 0x0a
    1e00:	29 87       	std	Y+9, r18	; 0x09
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	39 f0       	breq	.+14     	; 0x1e18 <M_DIO_Void_SetPinPullUpRes+0x52>
    1e0a:	29 85       	ldd	r18, Y+9	; 0x09
    1e0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e0e:	21 30       	cpi	r18, 0x01	; 1
    1e10:	31 05       	cpc	r19, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <M_DIO_Void_SetPinPullUpRes+0x50>
    1e14:	76 c0       	rjmp	.+236    	; 0x1f02 <M_DIO_Void_SetPinPullUpRes+0x13c>
    1e16:	e4 c0       	rjmp	.+456    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	38 87       	std	Y+8, r19	; 0x08
    1e20:	2f 83       	std	Y+7, r18	; 0x07
    1e22:	8f 81       	ldd	r24, Y+7	; 0x07
    1e24:	98 85       	ldd	r25, Y+8	; 0x08
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	91 05       	cpc	r25, r1
    1e2a:	61 f1       	breq	.+88     	; 0x1e84 <M_DIO_Void_SetPinPullUpRes+0xbe>
    1e2c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e2e:	38 85       	ldd	r19, Y+8	; 0x08
    1e30:	23 30       	cpi	r18, 0x03	; 3
    1e32:	31 05       	cpc	r19, r1
    1e34:	34 f4       	brge	.+12     	; 0x1e42 <M_DIO_Void_SetPinPullUpRes+0x7c>
    1e36:	8f 81       	ldd	r24, Y+7	; 0x07
    1e38:	98 85       	ldd	r25, Y+8	; 0x08
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	69 f0       	breq	.+26     	; 0x1e5a <M_DIO_Void_SetPinPullUpRes+0x94>
    1e40:	cf c0       	rjmp	.+414    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1e42:	2f 81       	ldd	r18, Y+7	; 0x07
    1e44:	38 85       	ldd	r19, Y+8	; 0x08
    1e46:	23 30       	cpi	r18, 0x03	; 3
    1e48:	31 05       	cpc	r19, r1
    1e4a:	89 f1       	breq	.+98     	; 0x1eae <M_DIO_Void_SetPinPullUpRes+0xe8>
    1e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4e:	98 85       	ldd	r25, Y+8	; 0x08
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	91 05       	cpc	r25, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <M_DIO_Void_SetPinPullUpRes+0x92>
    1e56:	40 c0       	rjmp	.+128    	; 0x1ed8 <M_DIO_Void_SetPinPullUpRes+0x112>
    1e58:	c3 c0       	rjmp	.+390    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1e5a:	ab e3       	ldi	r26, 0x3B	; 59
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	eb e3       	ldi	r30, 0x3B	; 59
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <M_DIO_Void_SetPinPullUpRes+0xae>
    1e7c:	80 95       	com	r24
    1e7e:	84 23       	and	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	ae c0       	rjmp	.+348    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1e84:	a8 e3       	ldi	r26, 0x38	; 56
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e8 e3       	ldi	r30, 0x38	; 56
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <M_DIO_Void_SetPinPullUpRes+0xdc>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <M_DIO_Void_SetPinPullUpRes+0xd8>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	99 c0       	rjmp	.+306    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1eae:	a5 e3       	ldi	r26, 0x35	; 53
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e5 e3       	ldi	r30, 0x35	; 53
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <M_DIO_Void_SetPinPullUpRes+0x106>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <M_DIO_Void_SetPinPullUpRes+0x102>
    1ed0:	80 95       	com	r24
    1ed2:	84 23       	and	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	84 c0       	rjmp	.+264    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1ed8:	a2 e3       	ldi	r26, 0x32	; 50
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e2 e3       	ldi	r30, 0x32	; 50
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <M_DIO_Void_SetPinPullUpRes+0x130>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <M_DIO_Void_SetPinPullUpRes+0x12c>
    1efa:	80 95       	com	r24
    1efc:	84 23       	and	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	6f c0       	rjmp	.+222    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3e 83       	std	Y+6, r19	; 0x06
    1f0a:	2d 83       	std	Y+5, r18	; 0x05
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	91 05       	cpc	r25, r1
    1f14:	51 f1       	breq	.+84     	; 0x1f6a <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1f16:	2d 81       	ldd	r18, Y+5	; 0x05
    1f18:	3e 81       	ldd	r19, Y+6	; 0x06
    1f1a:	23 30       	cpi	r18, 0x03	; 3
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	34 f4       	brge	.+12     	; 0x1f2c <M_DIO_Void_SetPinPullUpRes+0x166>
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	91 05       	cpc	r25, r1
    1f28:	61 f0       	breq	.+24     	; 0x1f42 <M_DIO_Void_SetPinPullUpRes+0x17c>
    1f2a:	5a c0       	rjmp	.+180    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1f2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1f30:	23 30       	cpi	r18, 0x03	; 3
    1f32:	31 05       	cpc	r19, r1
    1f34:	71 f1       	breq	.+92     	; 0x1f92 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	84 30       	cpi	r24, 0x04	; 4
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	e9 f1       	breq	.+122    	; 0x1fba <M_DIO_Void_SetPinPullUpRes+0x1f4>
    1f40:	4f c0       	rjmp	.+158    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1f42:	ab e3       	ldi	r26, 0x3B	; 59
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	eb e3       	ldi	r30, 0x3B	; 59
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 2e       	mov	r0, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <M_DIO_Void_SetPinPullUpRes+0x19a>
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	0a 94       	dec	r0
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <M_DIO_Void_SetPinPullUpRes+0x196>
    1f64:	84 2b       	or	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	3b c0       	rjmp	.+118    	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1f6a:	a8 e3       	ldi	r26, 0x38	; 56
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e8 e3       	ldi	r30, 0x38	; 56
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	48 2f       	mov	r20, r24
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <M_DIO_Void_SetPinPullUpRes+0x1be>
    1f8c:	84 2b       	or	r24, r20
    1f8e:	8c 93       	st	X, r24
    1f90:	27 c0       	rjmp	.+78     	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1f92:	a5 e3       	ldi	r26, 0x35	; 53
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e5 e3       	ldi	r30, 0x35	; 53
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <M_DIO_Void_SetPinPullUpRes+0x1ea>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1fb4:	84 2b       	or	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	13 c0       	rjmp	.+38     	; 0x1fe0 <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1fba:	a2 e3       	ldi	r26, 0x32	; 50
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e2 e3       	ldi	r30, 0x32	; 50
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <M_DIO_Void_SetPinPullUpRes+0x212>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <M_DIO_Void_SetPinPullUpRes+0x20e>
    1fdc:	84 2b       	or	r24, r20
    1fde:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    1fe0:	2a 96       	adiw	r28, 0x0a	; 10
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <M_ADC_Void_ADCInit>:




void M_ADC_Void_ADCInit(void)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1ffa:	a7 e2       	ldi	r26, 0x27	; 39
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e7 e2       	ldi	r30, 0x27	; 39
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 64       	ori	r24, 0x40	; 64
    2006:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    2008:	a7 e2       	ldi	r26, 0x27	; 39
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e7 e2       	ldi	r30, 0x27	; 39
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	8f 77       	andi	r24, 0x7F	; 127
    2014:	8c 93       	st	X, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    2016:	a7 e2       	ldi	r26, 0x27	; 39
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e7 e2       	ldi	r30, 0x27	; 39
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	8f 7d       	andi	r24, 0xDF	; 223
    2022:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    2024:	a6 e2       	ldi	r26, 0x26	; 38
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e6 e2       	ldi	r30, 0x26	; 38
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	81 60       	ori	r24, 0x01	; 1
    2030:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    2032:	a6 e2       	ldi	r26, 0x26	; 38
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e6 e2       	ldi	r30, 0x26	; 38
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	82 60       	ori	r24, 0x02	; 2
    203e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    2040:	a6 e2       	ldi	r26, 0x26	; 38
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e6 e2       	ldi	r30, 0x26	; 38
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	84 60       	ori	r24, 0x04	; 4
    204c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif
	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
    204e:	a6 e2       	ldi	r26, 0x26	; 38
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e6 e2       	ldi	r30, 0x26	; 38
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	80 62       	ori	r24, 0x20	; 32
    205a:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCIUT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    205c:	a6 e2       	ldi	r26, 0x26	; 38
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e6 e2       	ldi	r30, 0x26	; 38
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 68       	ori	r24, 0x80	; 128
    2068:	8c 93       	st	X, r24
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    206a:	a6 e2       	ldi	r26, 0x26	; 38
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e2       	ldi	r30, 0x26	; 38
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 64       	ori	r24, 0x40	; 64
    2076:	8c 93       	st	X, r24
}
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <M_ADC_U16_ADCRead>:

u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG = ADMUX_REG & 0b11100000;
    208a:	a7 e2       	ldi	r26, 0x27	; 39
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e7 e2       	ldi	r30, 0x27	; 39
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	80 7e       	andi	r24, 0xE0	; 224
    2096:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
    2098:	a7 e2       	ldi	r26, 0x27	; 39
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e7 e2       	ldi	r30, 0x27	; 39
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	90 81       	ld	r25, Z
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	89 2b       	or	r24, r25
    20a6:	8c 93       	st	X, r24
    
    SET_BIT(ADCSRA_REG,ADSC_BIT);
    20a8:	a6 e2       	ldi	r26, 0x26	; 38
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e6 e2       	ldi	r30, 0x26	; 38
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 64       	ori	r24, 0x40	; 64
    20b4:	8c 93       	st	X, r24


    while(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE);
    20b6:	e6 e2       	ldi	r30, 0x26	; 38
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	82 95       	swap	r24
    20be:	8f 70       	andi	r24, 0x0F	; 15
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	c9 f3       	breq	.-14     	; 0x20b6 <M_ADC_U16_ADCRead+0x38>

	return ADCVALUE;
    20c4:	e4 e2       	ldi	r30, 0x24	; 36
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
}
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <H_PushButton_Void_PushButtonInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <H_PushButton_Void_PushButtonInit+0x6>
    20da:	0f 92       	push	r0
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	3b 83       	std	Y+3, r19	; 0x03
    20ea:	2a 83       	std	Y+2, r18	; 0x02
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	91 05       	cpc	r25, r1
    20f4:	d1 f0       	breq	.+52     	; 0x212a <H_PushButton_Void_PushButtonInit+0x56>
    20f6:	2a 81       	ldd	r18, Y+2	; 0x02
    20f8:	3b 81       	ldd	r19, Y+3	; 0x03
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	31 05       	cpc	r19, r1
    20fe:	2c f4       	brge	.+10     	; 0x210a <H_PushButton_Void_PushButtonInit+0x36>
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	9b 81       	ldd	r25, Y+3	; 0x03
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	61 f0       	breq	.+24     	; 0x2120 <H_PushButton_Void_PushButtonInit+0x4c>
    2108:	1e c0       	rjmp	.+60     	; 0x2146 <H_PushButton_Void_PushButtonInit+0x72>
    210a:	2a 81       	ldd	r18, Y+2	; 0x02
    210c:	3b 81       	ldd	r19, Y+3	; 0x03
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	31 05       	cpc	r19, r1
    2112:	81 f0       	breq	.+32     	; 0x2134 <H_PushButton_Void_PushButtonInit+0x60>
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	91 05       	cpc	r25, r1
    211c:	81 f0       	breq	.+32     	; 0x213e <H_PushButton_Void_PushButtonInit+0x6a>
    211e:	13 c0       	rjmp	.+38     	; 0x2146 <H_PushButton_Void_PushButtonInit+0x72>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    2120:	8f e2       	ldi	r24, 0x2F	; 47
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
    2128:	0e c0       	rjmp	.+28     	; 0x2146 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    212a:	8e e2       	ldi	r24, 0x2E	; 46
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
    2132:	09 c0       	rjmp	.+18     	; 0x2146 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    2134:	8d e2       	ldi	r24, 0x2D	; 45
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    213e:	8b e2       	ldi	r24, 0x2B	; 43
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	default:                                                                 break;
	}
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	ec 97       	sbiw	r28, 0x3c	; 60
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    216c:	8a ad       	ldd	r24, Y+58	; 0x3a
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	3c af       	std	Y+60, r19	; 0x3c
    2174:	2b af       	std	Y+59, r18	; 0x3b
    2176:	8b ad       	ldd	r24, Y+59	; 0x3b
    2178:	9c ad       	ldd	r25, Y+60	; 0x3c
    217a:	81 30       	cpi	r24, 0x01	; 1
    217c:	91 05       	cpc	r25, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <H_PushButton_U8_PushButtonRead+0x30>
    2180:	97 c0       	rjmp	.+302    	; 0x22b0 <H_PushButton_U8_PushButtonRead+0x15e>
    2182:	2b ad       	ldd	r18, Y+59	; 0x3b
    2184:	3c ad       	ldd	r19, Y+60	; 0x3c
    2186:	22 30       	cpi	r18, 0x02	; 2
    2188:	31 05       	cpc	r19, r1
    218a:	2c f4       	brge	.+10     	; 0x2196 <H_PushButton_U8_PushButtonRead+0x44>
    218c:	8b ad       	ldd	r24, Y+59	; 0x3b
    218e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	71 f0       	breq	.+28     	; 0x21b0 <H_PushButton_U8_PushButtonRead+0x5e>
    2194:	0b c2       	rjmp	.+1046   	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
    2196:	2b ad       	ldd	r18, Y+59	; 0x3b
    2198:	3c ad       	ldd	r19, Y+60	; 0x3c
    219a:	22 30       	cpi	r18, 0x02	; 2
    219c:	31 05       	cpc	r19, r1
    219e:	09 f4       	brne	.+2      	; 0x21a2 <H_PushButton_U8_PushButtonRead+0x50>
    21a0:	07 c1       	rjmp	.+526    	; 0x23b0 <H_PushButton_U8_PushButtonRead+0x25e>
    21a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    21a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <H_PushButton_U8_PushButtonRead+0x5c>
    21ac:	81 c1       	rjmp	.+770    	; 0x24b0 <H_PushButton_U8_PushButtonRead+0x35e>
    21ae:	fe c1       	rjmp	.+1020   	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    21b0:	8f e2       	ldi	r24, 0x2F	; 47
    21b2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    21b6:	88 23       	and	r24, r24
    21b8:	09 f0       	breq	.+2      	; 0x21bc <H_PushButton_U8_PushButtonRead+0x6a>
    21ba:	f8 c1       	rjmp	.+1008   	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a8 e4       	ldi	r26, 0x48	; 72
    21c2:	b2 e4       	ldi	r27, 0x42	; 66
    21c4:	8d ab       	std	Y+53, r24	; 0x35
    21c6:	9e ab       	std	Y+54, r25	; 0x36
    21c8:	af ab       	std	Y+55, r26	; 0x37
    21ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	6d a9       	ldd	r22, Y+53	; 0x35
    21ce:	7e a9       	ldd	r23, Y+54	; 0x36
    21d0:	8f a9       	ldd	r24, Y+55	; 0x37
    21d2:	98 ad       	ldd	r25, Y+56	; 0x38
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4a e7       	ldi	r20, 0x7A	; 122
    21da:	55 e4       	ldi	r21, 0x45	; 69
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	89 ab       	std	Y+49, r24	; 0x31
    21e6:	9a ab       	std	Y+50, r25	; 0x32
    21e8:	ab ab       	std	Y+51, r26	; 0x33
    21ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ec:	69 a9       	ldd	r22, Y+49	; 0x31
    21ee:	7a a9       	ldd	r23, Y+50	; 0x32
    21f0:	8b a9       	ldd	r24, Y+51	; 0x33
    21f2:	9c a9       	ldd	r25, Y+52	; 0x34
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e8       	ldi	r20, 0x80	; 128
    21fa:	5f e3       	ldi	r21, 0x3F	; 63
    21fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2200:	88 23       	and	r24, r24
    2202:	2c f4       	brge	.+10     	; 0x220e <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	98 ab       	std	Y+48, r25	; 0x30
    220a:	8f a7       	std	Y+47, r24	; 0x2f
    220c:	3f c0       	rjmp	.+126    	; 0x228c <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    220e:	69 a9       	ldd	r22, Y+49	; 0x31
    2210:	7a a9       	ldd	r23, Y+50	; 0x32
    2212:	8b a9       	ldd	r24, Y+51	; 0x33
    2214:	9c a9       	ldd	r25, Y+52	; 0x34
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	4c f5       	brge	.+82     	; 0x2278 <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2226:	6d a9       	ldd	r22, Y+53	; 0x35
    2228:	7e a9       	ldd	r23, Y+54	; 0x36
    222a:	8f a9       	ldd	r24, Y+55	; 0x37
    222c:	98 ad       	ldd	r25, Y+56	; 0x38
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e2       	ldi	r20, 0x20	; 32
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	98 ab       	std	Y+48, r25	; 0x30
    224c:	8f a7       	std	Y+47, r24	; 0x2f
    224e:	0f c0       	rjmp	.+30     	; 0x226e <H_PushButton_U8_PushButtonRead+0x11c>
    2250:	80 e9       	ldi	r24, 0x90	; 144
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	9e a7       	std	Y+46, r25	; 0x2e
    2256:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2258:	8d a5       	ldd	r24, Y+45	; 0x2d
    225a:	9e a5       	ldd	r25, Y+46	; 0x2e
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <H_PushButton_U8_PushButtonRead+0x10a>
    2260:	9e a7       	std	Y+46, r25	; 0x2e
    2262:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	8f a5       	ldd	r24, Y+47	; 0x2f
    2266:	98 a9       	ldd	r25, Y+48	; 0x30
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	98 ab       	std	Y+48, r25	; 0x30
    226c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2270:	98 a9       	ldd	r25, Y+48	; 0x30
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	69 f7       	brne	.-38     	; 0x2250 <H_PushButton_U8_PushButtonRead+0xfe>
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	69 a9       	ldd	r22, Y+49	; 0x31
    227a:	7a a9       	ldd	r23, Y+50	; 0x32
    227c:	8b a9       	ldd	r24, Y+51	; 0x33
    227e:	9c a9       	ldd	r25, Y+52	; 0x34
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	98 ab       	std	Y+48, r25	; 0x30
    228a:	8f a7       	std	Y+47, r24	; 0x2f
    228c:	8f a5       	ldd	r24, Y+47	; 0x2f
    228e:	98 a9       	ldd	r25, Y+48	; 0x30
    2290:	9c a7       	std	Y+44, r25	; 0x2c
    2292:	8b a7       	std	Y+43, r24	; 0x2b
    2294:	8b a5       	ldd	r24, Y+43	; 0x2b
    2296:	9c a5       	ldd	r25, Y+44	; 0x2c
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <H_PushButton_U8_PushButtonRead+0x146>
    229c:	9c a7       	std	Y+44, r25	; 0x2c
    229e:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    22a0:	8f e2       	ldi	r24, 0x2F	; 47
    22a2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    22a6:	88 23       	and	r24, r24
    22a8:	09 f0       	breq	.+2      	; 0x22ac <H_PushButton_U8_PushButtonRead+0x15a>
    22aa:	80 c1       	rjmp	.+768    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    22ac:	19 ae       	std	Y+57, r1	; 0x39
    22ae:	7e c1       	rjmp	.+764    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    22b0:	8e e2       	ldi	r24, 0x2E	; 46
    22b2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    22b6:	88 23       	and	r24, r24
    22b8:	09 f0       	breq	.+2      	; 0x22bc <H_PushButton_U8_PushButtonRead+0x16a>
    22ba:	78 c1       	rjmp	.+752    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a8 e4       	ldi	r26, 0x48	; 72
    22c2:	b2 e4       	ldi	r27, 0x42	; 66
    22c4:	8f a3       	std	Y+39, r24	; 0x27
    22c6:	98 a7       	std	Y+40, r25	; 0x28
    22c8:	a9 a7       	std	Y+41, r26	; 0x29
    22ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6f a1       	ldd	r22, Y+39	; 0x27
    22ce:	78 a5       	ldd	r23, Y+40	; 0x28
    22d0:	89 a5       	ldd	r24, Y+41	; 0x29
    22d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a e7       	ldi	r20, 0x7A	; 122
    22da:	55 e4       	ldi	r21, 0x45	; 69
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8b a3       	std	Y+35, r24	; 0x23
    22e6:	9c a3       	std	Y+36, r25	; 0x24
    22e8:	ad a3       	std	Y+37, r26	; 0x25
    22ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ec:	6b a1       	ldd	r22, Y+35	; 0x23
    22ee:	7c a1       	ldd	r23, Y+36	; 0x24
    22f0:	8d a1       	ldd	r24, Y+37	; 0x25
    22f2:	9e a1       	ldd	r25, Y+38	; 0x26
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <H_PushButton_U8_PushButtonRead+0x1bc>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9a a3       	std	Y+34, r25	; 0x22
    230a:	89 a3       	std	Y+33, r24	; 0x21
    230c:	3f c0       	rjmp	.+126    	; 0x238c <H_PushButton_U8_PushButtonRead+0x23a>
	else if (__tmp > 65535)
    230e:	6b a1       	ldd	r22, Y+35	; 0x23
    2310:	7c a1       	ldd	r23, Y+36	; 0x24
    2312:	8d a1       	ldd	r24, Y+37	; 0x25
    2314:	9e a1       	ldd	r25, Y+38	; 0x26
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <H_PushButton_U8_PushButtonRead+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6f a1       	ldd	r22, Y+39	; 0x27
    2328:	78 a5       	ldd	r23, Y+40	; 0x28
    232a:	89 a5       	ldd	r24, Y+41	; 0x29
    232c:	9a a5       	ldd	r25, Y+42	; 0x2a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9a a3       	std	Y+34, r25	; 0x22
    234c:	89 a3       	std	Y+33, r24	; 0x21
    234e:	0f c0       	rjmp	.+30     	; 0x236e <H_PushButton_U8_PushButtonRead+0x21c>
    2350:	80 e9       	ldi	r24, 0x90	; 144
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	98 a3       	std	Y+32, r25	; 0x20
    2356:	8f 8f       	std	Y+31, r24	; 0x1f
    2358:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235a:	98 a1       	ldd	r25, Y+32	; 0x20
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <H_PushButton_U8_PushButtonRead+0x20a>
    2360:	98 a3       	std	Y+32, r25	; 0x20
    2362:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	89 a1       	ldd	r24, Y+33	; 0x21
    2366:	9a a1       	ldd	r25, Y+34	; 0x22
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9a a3       	std	Y+34, r25	; 0x22
    236c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	89 a1       	ldd	r24, Y+33	; 0x21
    2370:	9a a1       	ldd	r25, Y+34	; 0x22
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <H_PushButton_U8_PushButtonRead+0x1fe>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <H_PushButton_U8_PushButtonRead+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	6b a1       	ldd	r22, Y+35	; 0x23
    237a:	7c a1       	ldd	r23, Y+36	; 0x24
    237c:	8d a1       	ldd	r24, Y+37	; 0x25
    237e:	9e a1       	ldd	r25, Y+38	; 0x26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9a a3       	std	Y+34, r25	; 0x22
    238a:	89 a3       	std	Y+33, r24	; 0x21
    238c:	89 a1       	ldd	r24, Y+33	; 0x21
    238e:	9a a1       	ldd	r25, Y+34	; 0x22
    2390:	9e 8f       	std	Y+30, r25	; 0x1e
    2392:	8d 8f       	std	Y+29, r24	; 0x1d
    2394:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2396:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <H_PushButton_U8_PushButtonRead+0x246>
    239c:	9e 8f       	std	Y+30, r25	; 0x1e
    239e:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    23a0:	8e e2       	ldi	r24, 0x2E	; 46
    23a2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    23a6:	88 23       	and	r24, r24
    23a8:	09 f0       	breq	.+2      	; 0x23ac <H_PushButton_U8_PushButtonRead+0x25a>
    23aa:	00 c1       	rjmp	.+512    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    23ac:	19 ae       	std	Y+57, r1	; 0x39
    23ae:	fe c0       	rjmp	.+508    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    23b0:	8d e2       	ldi	r24, 0x2D	; 45
    23b2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    23b6:	88 23       	and	r24, r24
    23b8:	09 f0       	breq	.+2      	; 0x23bc <H_PushButton_U8_PushButtonRead+0x26a>
    23ba:	f8 c0       	rjmp	.+496    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	a8 e4       	ldi	r26, 0x48	; 72
    23c2:	b2 e4       	ldi	r27, 0x42	; 66
    23c4:	89 8f       	std	Y+25, r24	; 0x19
    23c6:	9a 8f       	std	Y+26, r25	; 0x1a
    23c8:	ab 8f       	std	Y+27, r26	; 0x1b
    23ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	69 8d       	ldd	r22, Y+25	; 0x19
    23ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a e7       	ldi	r20, 0x7A	; 122
    23da:	55 e4       	ldi	r21, 0x45	; 69
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8d 8b       	std	Y+21, r24	; 0x15
    23e6:	9e 8b       	std	Y+22, r25	; 0x16
    23e8:	af 8b       	std	Y+23, r26	; 0x17
    23ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ec:	6d 89       	ldd	r22, Y+21	; 0x15
    23ee:	7e 89       	ldd	r23, Y+22	; 0x16
    23f0:	8f 89       	ldd	r24, Y+23	; 0x17
    23f2:	98 8d       	ldd	r25, Y+24	; 0x18
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <H_PushButton_U8_PushButtonRead+0x2bc>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
    240c:	3f c0       	rjmp	.+126    	; 0x248c <H_PushButton_U8_PushButtonRead+0x33a>
	else if (__tmp > 65535)
    240e:	6d 89       	ldd	r22, Y+21	; 0x15
    2410:	7e 89       	ldd	r23, Y+22	; 0x16
    2412:	8f 89       	ldd	r24, Y+23	; 0x17
    2414:	98 8d       	ldd	r25, Y+24	; 0x18
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <H_PushButton_U8_PushButtonRead+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	69 8d       	ldd	r22, Y+25	; 0x19
    2428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9c 8b       	std	Y+20, r25	; 0x14
    244c:	8b 8b       	std	Y+19, r24	; 0x13
    244e:	0f c0       	rjmp	.+30     	; 0x246e <H_PushButton_U8_PushButtonRead+0x31c>
    2450:	80 e9       	ldi	r24, 0x90	; 144
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
    2458:	89 89       	ldd	r24, Y+17	; 0x11
    245a:	9a 89       	ldd	r25, Y+18	; 0x12
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <H_PushButton_U8_PushButtonRead+0x30a>
    2460:	9a 8b       	std	Y+18, r25	; 0x12
    2462:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8b 89       	ldd	r24, Y+19	; 0x13
    2466:	9c 89       	ldd	r25, Y+20	; 0x14
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9c 8b       	std	Y+20, r25	; 0x14
    246c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8b 89       	ldd	r24, Y+19	; 0x13
    2470:	9c 89       	ldd	r25, Y+20	; 0x14
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <H_PushButton_U8_PushButtonRead+0x2fe>
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <H_PushButton_U8_PushButtonRead+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	6d 89       	ldd	r22, Y+21	; 0x15
    247a:	7e 89       	ldd	r23, Y+22	; 0x16
    247c:	8f 89       	ldd	r24, Y+23	; 0x17
    247e:	98 8d       	ldd	r25, Y+24	; 0x18
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
    248c:	8b 89       	ldd	r24, Y+19	; 0x13
    248e:	9c 89       	ldd	r25, Y+20	; 0x14
    2490:	98 8b       	std	Y+16, r25	; 0x10
    2492:	8f 87       	std	Y+15, r24	; 0x0f
    2494:	8f 85       	ldd	r24, Y+15	; 0x0f
    2496:	98 89       	ldd	r25, Y+16	; 0x10
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <H_PushButton_U8_PushButtonRead+0x346>
    249c:	98 8b       	std	Y+16, r25	; 0x10
    249e:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    24a0:	8d e2       	ldi	r24, 0x2D	; 45
    24a2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    24a6:	88 23       	and	r24, r24
    24a8:	09 f0       	breq	.+2      	; 0x24ac <H_PushButton_U8_PushButtonRead+0x35a>
    24aa:	80 c0       	rjmp	.+256    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    24ac:	19 ae       	std	Y+57, r1	; 0x39
    24ae:	7e c0       	rjmp	.+252    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    24b0:	8b e2       	ldi	r24, 0x2B	; 43
    24b2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    24b6:	88 23       	and	r24, r24
    24b8:	09 f0       	breq	.+2      	; 0x24bc <H_PushButton_U8_PushButtonRead+0x36a>
    24ba:	78 c0       	rjmp	.+240    	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a8 e4       	ldi	r26, 0x48	; 72
    24c2:	b2 e4       	ldi	r27, 0x42	; 66
    24c4:	8b 87       	std	Y+11, r24	; 0x0b
    24c6:	9c 87       	std	Y+12, r25	; 0x0c
    24c8:	ad 87       	std	Y+13, r26	; 0x0d
    24ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a e7       	ldi	r20, 0x7A	; 122
    24da:	55 e4       	ldi	r21, 0x45	; 69
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	8f 83       	std	Y+7, r24	; 0x07
    24e6:	98 87       	std	Y+8, r25	; 0x08
    24e8:	a9 87       	std	Y+9, r26	; 0x09
    24ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	2c f4       	brge	.+10     	; 0x250e <H_PushButton_U8_PushButtonRead+0x3bc>
		__ticks = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	3f c0       	rjmp	.+126    	; 0x258c <H_PushButton_U8_PushButtonRead+0x43a>
	else if (__tmp > 65535)
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	4c f5       	brge	.+82     	; 0x2578 <H_PushButton_U8_PushButtonRead+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2526:	6b 85       	ldd	r22, Y+11	; 0x0b
    2528:	7c 85       	ldd	r23, Y+12	; 0x0c
    252a:	8d 85       	ldd	r24, Y+13	; 0x0d
    252c:	9e 85       	ldd	r25, Y+14	; 0x0e
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e2       	ldi	r20, 0x20	; 32
    2534:	51 e4       	ldi	r21, 0x41	; 65
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	0f c0       	rjmp	.+30     	; 0x256e <H_PushButton_U8_PushButtonRead+0x41c>
    2550:	80 e9       	ldi	r24, 0x90	; 144
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <H_PushButton_U8_PushButtonRead+0x40a>
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	69 f7       	brne	.-38     	; 0x2550 <H_PushButton_U8_PushButtonRead+0x3fe>
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <H_PushButton_U8_PushButtonRead+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2578:	6f 81       	ldd	r22, Y+7	; 0x07
    257a:	78 85       	ldd	r23, Y+8	; 0x08
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <H_PushButton_U8_PushButtonRead+0x446>
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    25a0:	8b e2       	ldi	r24, 0x2B	; 43
    25a2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    25a6:	88 23       	and	r24, r24
    25a8:	09 f4       	brne	.+2      	; 0x25ac <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    25aa:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    25ac:	89 ad       	ldd	r24, Y+57	; 0x39
}
    25ae:	ec 96       	adiw	r28, 0x3c	; 60
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <H_LED_Void_LedInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <H_LED_Void_LedInit+0x6>
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	3b 83       	std	Y+3, r19	; 0x03
    25d6:	2a 83       	std	Y+2, r18	; 0x02
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	82 30       	cpi	r24, 0x02	; 2
    25de:	91 05       	cpc	r25, r1
    25e0:	d9 f0       	breq	.+54     	; 0x2618 <H_LED_Void_LedInit+0x58>
    25e2:	2a 81       	ldd	r18, Y+2	; 0x02
    25e4:	3b 81       	ldd	r19, Y+3	; 0x03
    25e6:	23 30       	cpi	r18, 0x03	; 3
    25e8:	31 05       	cpc	r19, r1
    25ea:	34 f4       	brge	.+12     	; 0x25f8 <H_LED_Void_LedInit+0x38>
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	91 05       	cpc	r25, r1
    25f4:	61 f0       	breq	.+24     	; 0x260e <H_LED_Void_LedInit+0x4e>
    25f6:	1e c0       	rjmp	.+60     	; 0x2634 <H_LED_Void_LedInit+0x74>
    25f8:	2a 81       	ldd	r18, Y+2	; 0x02
    25fa:	3b 81       	ldd	r19, Y+3	; 0x03
    25fc:	23 30       	cpi	r18, 0x03	; 3
    25fe:	31 05       	cpc	r19, r1
    2600:	81 f0       	breq	.+32     	; 0x2622 <H_LED_Void_LedInit+0x62>
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	84 30       	cpi	r24, 0x04	; 4
    2608:	91 05       	cpc	r25, r1
    260a:	81 f0       	breq	.+32     	; 0x262c <H_LED_Void_LedInit+0x6c>
    260c:	13 c0       	rjmp	.+38     	; 0x2634 <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    260e:	80 e1       	ldi	r24, 0x10	; 16
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
    2616:	0e c0       	rjmp	.+28     	; 0x2634 <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    2618:	8f e0       	ldi	r24, 0x0F	; 15
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
    2620:	09 c0       	rjmp	.+18     	; 0x2634 <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    2622:	8e e0       	ldi	r24, 0x0E	; 14
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
    262a:	04 c0       	rjmp	.+8      	; 0x2634 <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    262c:	8b e1       	ldi	r24, 0x1B	; 27
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	00 d0       	rcall	.+0      	; 0x2646 <H_LED_Void_LedOn+0x6>
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	3b 83       	std	Y+3, r19	; 0x03
    2656:	2a 83       	std	Y+2, r18	; 0x02
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	9b 81       	ldd	r25, Y+3	; 0x03
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	91 05       	cpc	r25, r1
    2660:	d9 f0       	breq	.+54     	; 0x2698 <H_LED_Void_LedOn+0x58>
    2662:	2a 81       	ldd	r18, Y+2	; 0x02
    2664:	3b 81       	ldd	r19, Y+3	; 0x03
    2666:	23 30       	cpi	r18, 0x03	; 3
    2668:	31 05       	cpc	r19, r1
    266a:	34 f4       	brge	.+12     	; 0x2678 <H_LED_Void_LedOn+0x38>
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	9b 81       	ldd	r25, Y+3	; 0x03
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	91 05       	cpc	r25, r1
    2674:	61 f0       	breq	.+24     	; 0x268e <H_LED_Void_LedOn+0x4e>
    2676:	1e c0       	rjmp	.+60     	; 0x26b4 <H_LED_Void_LedOn+0x74>
    2678:	2a 81       	ldd	r18, Y+2	; 0x02
    267a:	3b 81       	ldd	r19, Y+3	; 0x03
    267c:	23 30       	cpi	r18, 0x03	; 3
    267e:	31 05       	cpc	r19, r1
    2680:	81 f0       	breq	.+32     	; 0x26a2 <H_LED_Void_LedOn+0x62>
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	84 30       	cpi	r24, 0x04	; 4
    2688:	91 05       	cpc	r25, r1
    268a:	81 f0       	breq	.+32     	; 0x26ac <H_LED_Void_LedOn+0x6c>
    268c:	13 c0       	rjmp	.+38     	; 0x26b4 <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    268e:	80 e1       	ldi	r24, 0x10	; 16
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2696:	0e c0       	rjmp	.+28     	; 0x26b4 <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    2698:	8f e0       	ldi	r24, 0x0F	; 15
    269a:	61 e0       	ldi	r22, 0x01	; 1
    269c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    26a0:	09 c0       	rjmp	.+18     	; 0x26b4 <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    26a2:	8e e0       	ldi	r24, 0x0E	; 14
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    26aa:	04 c0       	rjmp	.+8      	; 0x26b4 <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    26ac:	8b e1       	ldi	r24, 0x1B	; 27
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <H_LED_Void_LedOff+0x6>
    26c6:	0f 92       	push	r0
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	3b 83       	std	Y+3, r19	; 0x03
    26d6:	2a 83       	std	Y+2, r18	; 0x02
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	82 30       	cpi	r24, 0x02	; 2
    26de:	91 05       	cpc	r25, r1
    26e0:	d9 f0       	breq	.+54     	; 0x2718 <H_LED_Void_LedOff+0x58>
    26e2:	2a 81       	ldd	r18, Y+2	; 0x02
    26e4:	3b 81       	ldd	r19, Y+3	; 0x03
    26e6:	23 30       	cpi	r18, 0x03	; 3
    26e8:	31 05       	cpc	r19, r1
    26ea:	34 f4       	brge	.+12     	; 0x26f8 <H_LED_Void_LedOff+0x38>
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	91 05       	cpc	r25, r1
    26f4:	61 f0       	breq	.+24     	; 0x270e <H_LED_Void_LedOff+0x4e>
    26f6:	1e c0       	rjmp	.+60     	; 0x2734 <H_LED_Void_LedOff+0x74>
    26f8:	2a 81       	ldd	r18, Y+2	; 0x02
    26fa:	3b 81       	ldd	r19, Y+3	; 0x03
    26fc:	23 30       	cpi	r18, 0x03	; 3
    26fe:	31 05       	cpc	r19, r1
    2700:	81 f0       	breq	.+32     	; 0x2722 <H_LED_Void_LedOff+0x62>
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	9b 81       	ldd	r25, Y+3	; 0x03
    2706:	84 30       	cpi	r24, 0x04	; 4
    2708:	91 05       	cpc	r25, r1
    270a:	81 f0       	breq	.+32     	; 0x272c <H_LED_Void_LedOff+0x6c>
    270c:	13 c0       	rjmp	.+38     	; 0x2734 <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    270e:	80 e1       	ldi	r24, 0x10	; 16
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2716:	0e c0       	rjmp	.+28     	; 0x2734 <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    2718:	8f e0       	ldi	r24, 0x0F	; 15
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2720:	09 c0       	rjmp	.+18     	; 0x2734 <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    2722:	8e e0       	ldi	r24, 0x0E	; 14
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    272c:	8b e1       	ldi	r24, 0x1B	; 27
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	c9 54       	subi	r28, 0x49	; 73
    274e:	d0 40       	sbci	r29, 0x00	; 0
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	fe 01       	movw	r30, r28
    275c:	e9 5b       	subi	r30, 0xB9	; 185
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 83       	st	Z, r24
	switch(Copy_U8_Led)
    2762:	fe 01       	movw	r30, r28
    2764:	e9 5b       	subi	r30, 0xB9	; 185
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	2a 96       	adiw	r28, 0x0a	; 10
    2770:	3f af       	std	Y+63, r19	; 0x3f
    2772:	2e af       	std	Y+62, r18	; 0x3e
    2774:	2a 97       	sbiw	r28, 0x0a	; 10
    2776:	2a 96       	adiw	r28, 0x0a	; 10
    2778:	8e ad       	ldd	r24, Y+62	; 0x3e
    277a:	9f ad       	ldd	r25, Y+63	; 0x3f
    277c:	2a 97       	sbiw	r28, 0x0a	; 10
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	91 05       	cpc	r25, r1
    2782:	09 f4       	brne	.+2      	; 0x2786 <H_LED_Void_LedBlink+0x46>
    2784:	20 c1       	rjmp	.+576    	; 0x29c6 <H_LED_Void_LedBlink+0x286>
    2786:	2a 96       	adiw	r28, 0x0a	; 10
    2788:	ee ad       	ldd	r30, Y+62	; 0x3e
    278a:	ff ad       	ldd	r31, Y+63	; 0x3f
    278c:	2a 97       	sbiw	r28, 0x0a	; 10
    278e:	e3 30       	cpi	r30, 0x03	; 3
    2790:	f1 05       	cpc	r31, r1
    2792:	44 f4       	brge	.+16     	; 0x27a4 <H_LED_Void_LedBlink+0x64>
    2794:	2a 96       	adiw	r28, 0x0a	; 10
    2796:	2e ad       	ldd	r18, Y+62	; 0x3e
    2798:	3f ad       	ldd	r19, Y+63	; 0x3f
    279a:	2a 97       	sbiw	r28, 0x0a	; 10
    279c:	21 30       	cpi	r18, 0x01	; 1
    279e:	31 05       	cpc	r19, r1
    27a0:	91 f0       	breq	.+36     	; 0x27c6 <H_LED_Void_LedBlink+0x86>
    27a2:	81 c2       	rjmp	.+1282   	; 0x2ca6 <H_LED_Void_LedBlink+0x566>
    27a4:	2a 96       	adiw	r28, 0x0a	; 10
    27a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    27a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    27aa:	2a 97       	sbiw	r28, 0x0a	; 10
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	91 05       	cpc	r25, r1
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <H_LED_Void_LedBlink+0x74>
    27b2:	84 c1       	rjmp	.+776    	; 0x2abc <H_LED_Void_LedBlink+0x37c>
    27b4:	2a 96       	adiw	r28, 0x0a	; 10
    27b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    27b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    27ba:	2a 97       	sbiw	r28, 0x0a	; 10
    27bc:	e4 30       	cpi	r30, 0x04	; 4
    27be:	f1 05       	cpc	r31, r1
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <H_LED_Void_LedBlink+0x84>
    27c2:	f7 c1       	rjmp	.+1006   	; 0x2bb2 <H_LED_Void_LedBlink+0x472>
    27c4:	70 c2       	rjmp	.+1248   	; 0x2ca6 <H_LED_Void_LedBlink+0x566>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    27c6:	80 e1       	ldi	r24, 0x10	; 16
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    27ce:	fe 01       	movw	r30, r28
    27d0:	ed 5b       	subi	r30, 0xBD	; 189
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	a6 e9       	ldi	r26, 0x96	; 150
    27da:	b3 e4       	ldi	r27, 0x43	; 67
    27dc:	80 83       	st	Z, r24
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	a2 83       	std	Z+2, r26	; 0x02
    27e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e4:	8e 01       	movw	r16, r28
    27e6:	01 5c       	subi	r16, 0xC1	; 193
    27e8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ea:	fe 01       	movw	r30, r28
    27ec:	ed 5b       	subi	r30, 0xBD	; 189
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a e7       	ldi	r20, 0x7A	; 122
    27fe:	55 e4       	ldi	r21, 0x45	; 69
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	f8 01       	movw	r30, r16
    280a:	80 83       	st	Z, r24
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	a2 83       	std	Z+2, r26	; 0x02
    2810:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2812:	fe 01       	movw	r30, r28
    2814:	ff 96       	adiw	r30, 0x3f	; 63
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    282a:	88 23       	and	r24, r24
    282c:	2c f4       	brge	.+10     	; 0x2838 <H_LED_Void_LedBlink+0xf8>
		__ticks = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9e af       	std	Y+62, r25	; 0x3e
    2834:	8d af       	std	Y+61, r24	; 0x3d
    2836:	46 c0       	rjmp	.+140    	; 0x28c4 <H_LED_Void_LedBlink+0x184>
	else if (__tmp > 65535)
    2838:	fe 01       	movw	r30, r28
    283a:	ff 96       	adiw	r30, 0x3f	; 63
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	64 f5       	brge	.+88     	; 0x28ac <H_LED_Void_LedBlink+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	fe 01       	movw	r30, r28
    2856:	ed 5b       	subi	r30, 0xBD	; 189
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e2       	ldi	r20, 0x20	; 32
    2868:	51 e4       	ldi	r21, 0x41	; 65
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9e af       	std	Y+62, r25	; 0x3e
    2880:	8d af       	std	Y+61, r24	; 0x3d
    2882:	0f c0       	rjmp	.+30     	; 0x28a2 <H_LED_Void_LedBlink+0x162>
    2884:	80 e9       	ldi	r24, 0x90	; 144
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	9c af       	std	Y+60, r25	; 0x3c
    288a:	8b af       	std	Y+59, r24	; 0x3b
    288c:	8b ad       	ldd	r24, Y+59	; 0x3b
    288e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <H_LED_Void_LedBlink+0x150>
    2894:	9c af       	std	Y+60, r25	; 0x3c
    2896:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	8d ad       	ldd	r24, Y+61	; 0x3d
    289a:	9e ad       	ldd	r25, Y+62	; 0x3e
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	9e af       	std	Y+62, r25	; 0x3e
    28a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	69 f7       	brne	.-38     	; 0x2884 <H_LED_Void_LedBlink+0x144>
    28aa:	16 c0       	rjmp	.+44     	; 0x28d8 <H_LED_Void_LedBlink+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ac:	fe 01       	movw	r30, r28
    28ae:	ff 96       	adiw	r30, 0x3f	; 63
    28b0:	60 81       	ld	r22, Z
    28b2:	71 81       	ldd	r23, Z+1	; 0x01
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9e af       	std	Y+62, r25	; 0x3e
    28c2:	8d af       	std	Y+61, r24	; 0x3d
    28c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c8:	9a af       	std	Y+58, r25	; 0x3a
    28ca:	89 af       	std	Y+57, r24	; 0x39
    28cc:	89 ad       	ldd	r24, Y+57	; 0x39
    28ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <H_LED_Void_LedBlink+0x190>
    28d4:	9a af       	std	Y+58, r25	; 0x3a
    28d6:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    28d8:	80 e1       	ldi	r24, 0x10	; 16
    28da:	61 e0       	ldi	r22, 0x01	; 1
    28dc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a6 e9       	ldi	r26, 0x96	; 150
    28e6:	b3 e4       	ldi	r27, 0x43	; 67
    28e8:	8d ab       	std	Y+53, r24	; 0x35
    28ea:	9e ab       	std	Y+54, r25	; 0x36
    28ec:	af ab       	std	Y+55, r26	; 0x37
    28ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	6d a9       	ldd	r22, Y+53	; 0x35
    28f2:	7e a9       	ldd	r23, Y+54	; 0x36
    28f4:	8f a9       	ldd	r24, Y+55	; 0x37
    28f6:	98 ad       	ldd	r25, Y+56	; 0x38
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a e7       	ldi	r20, 0x7A	; 122
    28fe:	55 e4       	ldi	r21, 0x45	; 69
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	89 ab       	std	Y+49, r24	; 0x31
    290a:	9a ab       	std	Y+50, r25	; 0x32
    290c:	ab ab       	std	Y+51, r26	; 0x33
    290e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2910:	69 a9       	ldd	r22, Y+49	; 0x31
    2912:	7a a9       	ldd	r23, Y+50	; 0x32
    2914:	8b a9       	ldd	r24, Y+51	; 0x33
    2916:	9c a9       	ldd	r25, Y+52	; 0x34
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	2c f4       	brge	.+10     	; 0x2932 <H_LED_Void_LedBlink+0x1f2>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	98 ab       	std	Y+48, r25	; 0x30
    292e:	8f a7       	std	Y+47, r24	; 0x2f
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <H_LED_Void_LedBlink+0x270>
	else if (__tmp > 65535)
    2932:	69 a9       	ldd	r22, Y+49	; 0x31
    2934:	7a a9       	ldd	r23, Y+50	; 0x32
    2936:	8b a9       	ldd	r24, Y+51	; 0x33
    2938:	9c a9       	ldd	r25, Y+52	; 0x34
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	4c f5       	brge	.+82     	; 0x299c <H_LED_Void_LedBlink+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	6d a9       	ldd	r22, Y+53	; 0x35
    294c:	7e a9       	ldd	r23, Y+54	; 0x36
    294e:	8f a9       	ldd	r24, Y+55	; 0x37
    2950:	98 ad       	ldd	r25, Y+56	; 0x38
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	98 ab       	std	Y+48, r25	; 0x30
    2970:	8f a7       	std	Y+47, r24	; 0x2f
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <H_LED_Void_LedBlink+0x252>
    2974:	80 e9       	ldi	r24, 0x90	; 144
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	9e a7       	std	Y+46, r25	; 0x2e
    297a:	8d a7       	std	Y+45, r24	; 0x2d
    297c:	8d a5       	ldd	r24, Y+45	; 0x2d
    297e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <H_LED_Void_LedBlink+0x240>
    2984:	9e a7       	std	Y+46, r25	; 0x2e
    2986:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8f a5       	ldd	r24, Y+47	; 0x2f
    298a:	98 a9       	ldd	r25, Y+48	; 0x30
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	98 ab       	std	Y+48, r25	; 0x30
    2990:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8f a5       	ldd	r24, Y+47	; 0x2f
    2994:	98 a9       	ldd	r25, Y+48	; 0x30
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <H_LED_Void_LedBlink+0x234>
    299a:	85 c1       	rjmp	.+778    	; 0x2ca6 <H_LED_Void_LedBlink+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	69 a9       	ldd	r22, Y+49	; 0x31
    299e:	7a a9       	ldd	r23, Y+50	; 0x32
    29a0:	8b a9       	ldd	r24, Y+51	; 0x33
    29a2:	9c a9       	ldd	r25, Y+52	; 0x34
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	98 ab       	std	Y+48, r25	; 0x30
    29ae:	8f a7       	std	Y+47, r24	; 0x2f
    29b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b2:	98 a9       	ldd	r25, Y+48	; 0x30
    29b4:	9c a7       	std	Y+44, r25	; 0x2c
    29b6:	8b a7       	std	Y+43, r24	; 0x2b
    29b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <H_LED_Void_LedBlink+0x27c>
    29c0:	9c a7       	std	Y+44, r25	; 0x2c
    29c2:	8b a7       	std	Y+43, r24	; 0x2b
    29c4:	70 c1       	rjmp	.+736    	; 0x2ca6 <H_LED_Void_LedBlink+0x566>
        _delay_ms(LED_BLINKING_TIME);
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    29c6:	8f e0       	ldi	r24, 0x0F	; 15
    29c8:	61 e0       	ldi	r22, 0x01	; 1
    29ca:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a6 e9       	ldi	r26, 0x96	; 150
    29d4:	b3 e4       	ldi	r27, 0x43	; 67
    29d6:	8f a3       	std	Y+39, r24	; 0x27
    29d8:	98 a7       	std	Y+40, r25	; 0x28
    29da:	a9 a7       	std	Y+41, r26	; 0x29
    29dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29de:	6f a1       	ldd	r22, Y+39	; 0x27
    29e0:	78 a5       	ldd	r23, Y+40	; 0x28
    29e2:	89 a5       	ldd	r24, Y+41	; 0x29
    29e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	4a e7       	ldi	r20, 0x7A	; 122
    29ec:	55 e4       	ldi	r21, 0x45	; 69
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	8b a3       	std	Y+35, r24	; 0x23
    29f8:	9c a3       	std	Y+36, r25	; 0x24
    29fa:	ad a3       	std	Y+37, r26	; 0x25
    29fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2a00:	7c a1       	ldd	r23, Y+36	; 0x24
    2a02:	8d a1       	ldd	r24, Y+37	; 0x25
    2a04:	9e a1       	ldd	r25, Y+38	; 0x26
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	2c f4       	brge	.+10     	; 0x2a20 <H_LED_Void_LedBlink+0x2e0>
		__ticks = 1;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9a a3       	std	Y+34, r25	; 0x22
    2a1c:	89 a3       	std	Y+33, r24	; 0x21
    2a1e:	3f c0       	rjmp	.+126    	; 0x2a9e <H_LED_Void_LedBlink+0x35e>
	else if (__tmp > 65535)
    2a20:	6b a1       	ldd	r22, Y+35	; 0x23
    2a22:	7c a1       	ldd	r23, Y+36	; 0x24
    2a24:	8d a1       	ldd	r24, Y+37	; 0x25
    2a26:	9e a1       	ldd	r25, Y+38	; 0x26
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	4f e7       	ldi	r20, 0x7F	; 127
    2a2e:	57 e4       	ldi	r21, 0x47	; 71
    2a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a34:	18 16       	cp	r1, r24
    2a36:	4c f5       	brge	.+82     	; 0x2a8a <H_LED_Void_LedBlink+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a38:	6f a1       	ldd	r22, Y+39	; 0x27
    2a3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e2       	ldi	r20, 0x20	; 32
    2a46:	51 e4       	ldi	r21, 0x41	; 65
    2a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9a a3       	std	Y+34, r25	; 0x22
    2a5e:	89 a3       	std	Y+33, r24	; 0x21
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <H_LED_Void_LedBlink+0x340>
    2a62:	80 e9       	ldi	r24, 0x90	; 144
    2a64:	91 e0       	ldi	r25, 0x01	; 1
    2a66:	98 a3       	std	Y+32, r25	; 0x20
    2a68:	8f 8f       	std	Y+31, r24	; 0x1f
    2a6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a6c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <H_LED_Void_LedBlink+0x32e>
    2a72:	98 a3       	std	Y+32, r25	; 0x20
    2a74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	89 a1       	ldd	r24, Y+33	; 0x21
    2a78:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	9a a3       	std	Y+34, r25	; 0x22
    2a7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a80:	89 a1       	ldd	r24, Y+33	; 0x21
    2a82:	9a a1       	ldd	r25, Y+34	; 0x22
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	69 f7       	brne	.-38     	; 0x2a62 <H_LED_Void_LedBlink+0x322>
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <H_LED_Void_LedBlink+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a90:	9e a1       	ldd	r25, Y+38	; 0x26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9a a3       	std	Y+34, r25	; 0x22
    2a9c:	89 a3       	std	Y+33, r24	; 0x21
    2a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa2:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa4:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <H_LED_Void_LedBlink+0x36a>
    2aae:	9e 8f       	std	Y+30, r25	; 0x1e
    2ab0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    2ab2:	8f e0       	ldi	r24, 0x0F	; 15
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2aba:	f5 c0       	rjmp	.+490    	; 0x2ca6 <H_LED_Void_LedBlink+0x566>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    2abc:	8e e0       	ldi	r24, 0x0E	; 14
    2abe:	61 e0       	ldi	r22, 0x01	; 1
    2ac0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a6 e9       	ldi	r26, 0x96	; 150
    2aca:	b3 e4       	ldi	r27, 0x43	; 67
    2acc:	89 8f       	std	Y+25, r24	; 0x19
    2ace:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8d 8b       	std	Y+21, r24	; 0x15
    2aee:	9e 8b       	std	Y+22, r25	; 0x16
    2af0:	af 8b       	std	Y+23, r26	; 0x17
    2af2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af4:	6d 89       	ldd	r22, Y+21	; 0x15
    2af6:	7e 89       	ldd	r23, Y+22	; 0x16
    2af8:	8f 89       	ldd	r24, Y+23	; 0x17
    2afa:	98 8d       	ldd	r25, Y+24	; 0x18
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <H_LED_Void_LedBlink+0x3d6>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
    2b12:	8b 8b       	std	Y+19, r24	; 0x13
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <H_LED_Void_LedBlink+0x454>
	else if (__tmp > 65535)
    2b16:	6d 89       	ldd	r22, Y+21	; 0x15
    2b18:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <H_LED_Void_LedBlink+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9c 8b       	std	Y+20, r25	; 0x14
    2b54:	8b 8b       	std	Y+19, r24	; 0x13
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <H_LED_Void_LedBlink+0x436>
    2b58:	80 e9       	ldi	r24, 0x90	; 144
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	9a 8b       	std	Y+18, r25	; 0x12
    2b5e:	89 8b       	std	Y+17, r24	; 0x11
    2b60:	89 89       	ldd	r24, Y+17	; 0x11
    2b62:	9a 89       	ldd	r25, Y+18	; 0x12
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <H_LED_Void_LedBlink+0x424>
    2b68:	9a 8b       	std	Y+18, r25	; 0x12
    2b6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8b 89       	ldd	r24, Y+19	; 0x13
    2b78:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <H_LED_Void_LedBlink+0x418>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <H_LED_Void_LedBlink+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9c 8b       	std	Y+20, r25	; 0x14
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
    2b94:	8b 89       	ldd	r24, Y+19	; 0x13
    2b96:	9c 89       	ldd	r25, Y+20	; 0x14
    2b98:	98 8b       	std	Y+16, r25	; 0x10
    2b9a:	8f 87       	std	Y+15, r24	; 0x0f
    2b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <H_LED_Void_LedBlink+0x460>
    2ba4:	98 8b       	std	Y+16, r25	; 0x10
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    2ba8:	8e e0       	ldi	r24, 0x0E	; 14
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2bb0:	7a c0       	rjmp	.+244    	; 0x2ca6 <H_LED_Void_LedBlink+0x566>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    2bb2:	8b e1       	ldi	r24, 0x1B	; 27
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a6 e9       	ldi	r26, 0x96	; 150
    2bc0:	b3 e4       	ldi	r27, 0x43	; 67
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	9c 87       	std	Y+12, r25	; 0x0c
    2bc6:	ad 87       	std	Y+13, r26	; 0x0d
    2bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a e7       	ldi	r20, 0x7A	; 122
    2bd8:	55 e4       	ldi	r21, 0x45	; 69
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8f 83       	std	Y+7, r24	; 0x07
    2be4:	98 87       	std	Y+8, r25	; 0x08
    2be6:	a9 87       	std	Y+9, r26	; 0x09
    2be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <H_LED_Void_LedBlink+0x4cc>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <H_LED_Void_LedBlink+0x54a>
	else if (__tmp > 65535)
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <H_LED_Void_LedBlink+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <H_LED_Void_LedBlink+0x52c>
    2c4e:	80 e9       	ldi	r24, 0x90	; 144
    2c50:	91 e0       	ldi	r25, 0x01	; 1
    2c52:	9c 83       	std	Y+4, r25	; 0x04
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <H_LED_Void_LedBlink+0x51a>
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <H_LED_Void_LedBlink+0x50e>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <H_LED_Void_LedBlink+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <H_LED_Void_LedBlink+0x556>
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    2c9e:	8b e1       	ldi	r24, 0x1B	; 27
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    2ca6:	c7 5b       	subi	r28, 0xB7	; 183
    2ca8:	df 4f       	sbci	r29, 0xFF	; 255
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	08 95       	ret

00002cbe <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <H_LED_Void_LedTog+0x6>
    2cc4:	0f 92       	push	r0
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	28 2f       	mov	r18, r24
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	3b 83       	std	Y+3, r19	; 0x03
    2cd4:	2a 83       	std	Y+2, r18	; 0x02
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	91 05       	cpc	r25, r1
    2cde:	d1 f0       	breq	.+52     	; 0x2d14 <H_LED_Void_LedTog+0x56>
    2ce0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ce2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ce4:	23 30       	cpi	r18, 0x03	; 3
    2ce6:	31 05       	cpc	r19, r1
    2ce8:	34 f4       	brge	.+12     	; 0x2cf6 <H_LED_Void_LedTog+0x38>
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	61 f0       	breq	.+24     	; 0x2d0c <H_LED_Void_LedTog+0x4e>
    2cf4:	1a c0       	rjmp	.+52     	; 0x2d2a <H_LED_Void_LedTog+0x6c>
    2cf6:	2a 81       	ldd	r18, Y+2	; 0x02
    2cf8:	3b 81       	ldd	r19, Y+3	; 0x03
    2cfa:	23 30       	cpi	r18, 0x03	; 3
    2cfc:	31 05       	cpc	r19, r1
    2cfe:	71 f0       	breq	.+28     	; 0x2d1c <H_LED_Void_LedTog+0x5e>
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	9b 81       	ldd	r25, Y+3	; 0x03
    2d04:	84 30       	cpi	r24, 0x04	; 4
    2d06:	91 05       	cpc	r25, r1
    2d08:	69 f0       	breq	.+26     	; 0x2d24 <H_LED_Void_LedTog+0x66>
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    2d0c:	80 e1       	ldi	r24, 0x10	; 16
    2d0e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <M_DIO_Void_TogPin>
    2d12:	0b c0       	rjmp	.+22     	; 0x2d2a <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    2d14:	8f e0       	ldi	r24, 0x0F	; 15
    2d16:	0e 94 57 0e 	call	0x1cae	; 0x1cae <M_DIO_Void_TogPin>
    2d1a:	07 c0       	rjmp	.+14     	; 0x2d2a <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2d1c:	8e e0       	ldi	r24, 0x0E	; 14
    2d1e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <M_DIO_Void_TogPin>
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    2d24:	8b e1       	ldi	r24, 0x1B	; 27
    2d26:	0e 94 57 0e 	call	0x1cae	; 0x1cae <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    2d3e:	84 e1       	ldi	r24, 0x14	; 20
    2d40:	61 e0       	ldi	r22, 0x01	; 1
    2d42:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    2d46:	85 e1       	ldi	r24, 0x15	; 21
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    2d4e:	86 e1       	ldi	r24, 0x16	; 22
    2d50:	61 e0       	ldi	r22, 0x01	; 1
    2d52:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    2d56:	88 e1       	ldi	r24, 0x18	; 24
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    2d5e:	8d e0       	ldi	r24, 0x0D	; 13
    2d60:	61 e0       	ldi	r22, 0x01	; 1
    2d62:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    2d66:	8c e0       	ldi	r24, 0x0C	; 12
    2d68:	61 e0       	ldi	r22, 0x01	; 1
    2d6a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    2d6e:	83 e3       	ldi	r24, 0x33	; 51
    2d70:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    2d74:	82 e3       	ldi	r24, 0x32	; 50
    2d76:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    2d7a:	88 e2       	ldi	r24, 0x28	; 40
    2d7c:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    2d80:	8c e0       	ldi	r24, 0x0C	; 12
    2d82:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    2d86:	82 e0       	ldi	r24, 0x02	; 2
    2d88:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>


#endif
}
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	e9 97       	sbiw	r28, 0x39	; 57
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    2dae:	8d e0       	ldi	r24, 0x0D	; 13
    2db0:	61 e0       	ldi	r22, 0x01	; 1
    2db2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    2db6:	89 ad       	ldd	r24, Y+57	; 0x39
    2db8:	82 95       	swap	r24
    2dba:	8f 70       	andi	r24, 0x0F	; 15
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	91 70       	andi	r25, 0x01	; 1
    2dc0:	84 e1       	ldi	r24, 0x14	; 20
    2dc2:	69 2f       	mov	r22, r25
    2dc4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    2dc8:	89 ad       	ldd	r24, Y+57	; 0x39
    2dca:	82 95       	swap	r24
    2dcc:	86 95       	lsr	r24
    2dce:	87 70       	andi	r24, 0x07	; 7
    2dd0:	98 2f       	mov	r25, r24
    2dd2:	91 70       	andi	r25, 0x01	; 1
    2dd4:	85 e1       	ldi	r24, 0x15	; 21
    2dd6:	69 2f       	mov	r22, r25
    2dd8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    2ddc:	89 ad       	ldd	r24, Y+57	; 0x39
    2dde:	82 95       	swap	r24
    2de0:	86 95       	lsr	r24
    2de2:	86 95       	lsr	r24
    2de4:	83 70       	andi	r24, 0x03	; 3
    2de6:	98 2f       	mov	r25, r24
    2de8:	91 70       	andi	r25, 0x01	; 1
    2dea:	86 e1       	ldi	r24, 0x16	; 22
    2dec:	69 2f       	mov	r22, r25
    2dee:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    2df2:	89 ad       	ldd	r24, Y+57	; 0x39
    2df4:	98 2f       	mov	r25, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	99 27       	eor	r25, r25
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	88 e1       	ldi	r24, 0x18	; 24
    2dfe:	69 2f       	mov	r22, r25
    2e00:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2e04:	8c e0       	ldi	r24, 0x0C	; 12
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 e8       	ldi	r26, 0x80	; 128
    2e12:	bf e3       	ldi	r27, 0x3F	; 63
    2e14:	8d ab       	std	Y+53, r24	; 0x35
    2e16:	9e ab       	std	Y+54, r25	; 0x36
    2e18:	af ab       	std	Y+55, r26	; 0x37
    2e1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e1e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e20:	8f a9       	ldd	r24, Y+55	; 0x37
    2e22:	98 ad       	ldd	r25, Y+56	; 0x38
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a e7       	ldi	r20, 0x7A	; 122
    2e2a:	55 e4       	ldi	r21, 0x45	; 69
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	89 ab       	std	Y+49, r24	; 0x31
    2e36:	9a ab       	std	Y+50, r25	; 0x32
    2e38:	ab ab       	std	Y+51, r26	; 0x33
    2e3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e40:	8b a9       	ldd	r24, Y+51	; 0x33
    2e42:	9c a9       	ldd	r25, Y+52	; 0x34
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	98 ab       	std	Y+48, r25	; 0x30
    2e5a:	8f a7       	std	Y+47, r24	; 0x2f
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    2e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e60:	7a a9       	ldd	r23, Y+50	; 0x32
    2e62:	8b a9       	ldd	r24, Y+51	; 0x33
    2e64:	9c a9       	ldd	r25, Y+52	; 0x34
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	6d a9       	ldd	r22, Y+53	; 0x35
    2e78:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	98 ab       	std	Y+48, r25	; 0x30
    2e9c:	8f a7       	std	Y+47, r24	; 0x2f
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <H_Lcd_Void_LCDWriteCharacter+0x126>
    2ea0:	80 e9       	ldi	r24, 0x90	; 144
    2ea2:	91 e0       	ldi	r25, 0x01	; 1
    2ea4:	9e a7       	std	Y+46, r25	; 0x2e
    2ea6:	8d a7       	std	Y+45, r24	; 0x2d
    2ea8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eaa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <H_Lcd_Void_LCDWriteCharacter+0x114>
    2eb0:	9e a7       	std	Y+46, r25	; 0x2e
    2eb2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	98 ab       	std	Y+48, r25	; 0x30
    2ebc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <H_Lcd_Void_LCDWriteCharacter+0x108>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eca:	7a a9       	ldd	r23, Y+50	; 0x32
    2ecc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ece:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	98 ab       	std	Y+48, r25	; 0x30
    2eda:	8f a7       	std	Y+47, r24	; 0x2f
    2edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ede:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee0:	9c a7       	std	Y+44, r25	; 0x2c
    2ee2:	8b a7       	std	Y+43, r24	; 0x2b
    2ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <H_Lcd_Void_LCDWriteCharacter+0x150>
    2eec:	9c a7       	std	Y+44, r25	; 0x2c
    2eee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2ef0:	8c e0       	ldi	r24, 0x0C	; 12
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a0 e8       	ldi	r26, 0x80	; 128
    2efe:	bf e3       	ldi	r27, 0x3F	; 63
    2f00:	8f a3       	std	Y+39, r24	; 0x27
    2f02:	98 a7       	std	Y+40, r25	; 0x28
    2f04:	a9 a7       	std	Y+41, r26	; 0x29
    2f06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f08:	6f a1       	ldd	r22, Y+39	; 0x27
    2f0a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f0c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	4a e7       	ldi	r20, 0x7A	; 122
    2f16:	55 e4       	ldi	r21, 0x45	; 69
    2f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	8b a3       	std	Y+35, r24	; 0x23
    2f22:	9c a3       	std	Y+36, r25	; 0x24
    2f24:	ad a3       	std	Y+37, r26	; 0x25
    2f26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f28:	6b a1       	ldd	r22, Y+35	; 0x23
    2f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e8       	ldi	r20, 0x80	; 128
    2f36:	5f e3       	ldi	r21, 0x3F	; 63
    2f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f3c:	88 23       	and	r24, r24
    2f3e:	2c f4       	brge	.+10     	; 0x2f4a <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	9a a3       	std	Y+34, r25	; 0x22
    2f46:	89 a3       	std	Y+33, r24	; 0x21
    2f48:	3f c0       	rjmp	.+126    	; 0x2fc8 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    2f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f50:	9e a1       	ldd	r25, Y+38	; 0x26
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	3f ef       	ldi	r19, 0xFF	; 255
    2f56:	4f e7       	ldi	r20, 0x7F	; 127
    2f58:	57 e4       	ldi	r21, 0x47	; 71
    2f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f5e:	18 16       	cp	r1, r24
    2f60:	4c f5       	brge	.+82     	; 0x2fb4 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f62:	6f a1       	ldd	r22, Y+39	; 0x27
    2f64:	78 a5       	ldd	r23, Y+40	; 0x28
    2f66:	89 a5       	ldd	r24, Y+41	; 0x29
    2f68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e2       	ldi	r20, 0x20	; 32
    2f70:	51 e4       	ldi	r21, 0x41	; 65
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	bc 01       	movw	r22, r24
    2f7c:	cd 01       	movw	r24, r26
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9a a3       	std	Y+34, r25	; 0x22
    2f88:	89 a3       	std	Y+33, r24	; 0x21
    2f8a:	0f c0       	rjmp	.+30     	; 0x2faa <H_Lcd_Void_LCDWriteCharacter+0x212>
    2f8c:	80 e9       	ldi	r24, 0x90	; 144
    2f8e:	91 e0       	ldi	r25, 0x01	; 1
    2f90:	98 a3       	std	Y+32, r25	; 0x20
    2f92:	8f 8f       	std	Y+31, r24	; 0x1f
    2f94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f96:	98 a1       	ldd	r25, Y+32	; 0x20
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <H_Lcd_Void_LCDWriteCharacter+0x200>
    2f9c:	98 a3       	std	Y+32, r25	; 0x20
    2f9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	9a a3       	std	Y+34, r25	; 0x22
    2fa8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2faa:	89 a1       	ldd	r24, Y+33	; 0x21
    2fac:	9a a1       	ldd	r25, Y+34	; 0x22
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	69 f7       	brne	.-38     	; 0x2f8c <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    2fb2:	14 c0       	rjmp	.+40     	; 0x2fdc <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fba:	9e a1       	ldd	r25, Y+38	; 0x26
    2fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	9a a3       	std	Y+34, r25	; 0x22
    2fc6:	89 a3       	std	Y+33, r24	; 0x21
    2fc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fca:	9a a1       	ldd	r25, Y+34	; 0x22
    2fcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2fce:	8d 8f       	std	Y+29, r24	; 0x1d
    2fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    2fd8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fda:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    2fdc:	89 ad       	ldd	r24, Y+57	; 0x39
    2fde:	98 2f       	mov	r25, r24
    2fe0:	91 70       	andi	r25, 0x01	; 1
    2fe2:	84 e1       	ldi	r24, 0x14	; 20
    2fe4:	69 2f       	mov	r22, r25
    2fe6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    2fea:	89 ad       	ldd	r24, Y+57	; 0x39
    2fec:	86 95       	lsr	r24
    2fee:	98 2f       	mov	r25, r24
    2ff0:	91 70       	andi	r25, 0x01	; 1
    2ff2:	85 e1       	ldi	r24, 0x15	; 21
    2ff4:	69 2f       	mov	r22, r25
    2ff6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    2ffa:	89 ad       	ldd	r24, Y+57	; 0x39
    2ffc:	86 95       	lsr	r24
    2ffe:	86 95       	lsr	r24
    3000:	98 2f       	mov	r25, r24
    3002:	91 70       	andi	r25, 0x01	; 1
    3004:	86 e1       	ldi	r24, 0x16	; 22
    3006:	69 2f       	mov	r22, r25
    3008:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    300c:	89 ad       	ldd	r24, Y+57	; 0x39
    300e:	86 95       	lsr	r24
    3010:	86 95       	lsr	r24
    3012:	86 95       	lsr	r24
    3014:	98 2f       	mov	r25, r24
    3016:	91 70       	andi	r25, 0x01	; 1
    3018:	88 e1       	ldi	r24, 0x18	; 24
    301a:	69 2f       	mov	r22, r25
    301c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    3020:	8c e0       	ldi	r24, 0x0C	; 12
    3022:	61 e0       	ldi	r22, 0x01	; 1
    3024:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	a0 e8       	ldi	r26, 0x80	; 128
    302e:	bf e3       	ldi	r27, 0x3F	; 63
    3030:	89 8f       	std	Y+25, r24	; 0x19
    3032:	9a 8f       	std	Y+26, r25	; 0x1a
    3034:	ab 8f       	std	Y+27, r26	; 0x1b
    3036:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3038:	69 8d       	ldd	r22, Y+25	; 0x19
    303a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    303c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    303e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	4a e7       	ldi	r20, 0x7A	; 122
    3046:	55 e4       	ldi	r21, 0x45	; 69
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	8d 8b       	std	Y+21, r24	; 0x15
    3052:	9e 8b       	std	Y+22, r25	; 0x16
    3054:	af 8b       	std	Y+23, r26	; 0x17
    3056:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3058:	6d 89       	ldd	r22, Y+21	; 0x15
    305a:	7e 89       	ldd	r23, Y+22	; 0x16
    305c:	8f 89       	ldd	r24, Y+23	; 0x17
    305e:	98 8d       	ldd	r25, Y+24	; 0x18
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e8       	ldi	r20, 0x80	; 128
    3066:	5f e3       	ldi	r21, 0x3F	; 63
    3068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    306c:	88 23       	and	r24, r24
    306e:	2c f4       	brge	.+10     	; 0x307a <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
    3078:	3f c0       	rjmp	.+126    	; 0x30f8 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    307a:	6d 89       	ldd	r22, Y+21	; 0x15
    307c:	7e 89       	ldd	r23, Y+22	; 0x16
    307e:	8f 89       	ldd	r24, Y+23	; 0x17
    3080:	98 8d       	ldd	r25, Y+24	; 0x18
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	3f ef       	ldi	r19, 0xFF	; 255
    3086:	4f e7       	ldi	r20, 0x7F	; 127
    3088:	57 e4       	ldi	r21, 0x47	; 71
    308a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    308e:	18 16       	cp	r1, r24
    3090:	4c f5       	brge	.+82     	; 0x30e4 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3092:	69 8d       	ldd	r22, Y+25	; 0x19
    3094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e2       	ldi	r20, 0x20	; 32
    30a0:	51 e4       	ldi	r21, 0x41	; 65
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	bc 01       	movw	r22, r24
    30ac:	cd 01       	movw	r24, r26
    30ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	9c 8b       	std	Y+20, r25	; 0x14
    30b8:	8b 8b       	std	Y+19, r24	; 0x13
    30ba:	0f c0       	rjmp	.+30     	; 0x30da <H_Lcd_Void_LCDWriteCharacter+0x342>
    30bc:	80 e9       	ldi	r24, 0x90	; 144
    30be:	91 e0       	ldi	r25, 0x01	; 1
    30c0:	9a 8b       	std	Y+18, r25	; 0x12
    30c2:	89 8b       	std	Y+17, r24	; 0x11
    30c4:	89 89       	ldd	r24, Y+17	; 0x11
    30c6:	9a 89       	ldd	r25, Y+18	; 0x12
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <H_Lcd_Void_LCDWriteCharacter+0x330>
    30cc:	9a 8b       	std	Y+18, r25	; 0x12
    30ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d0:	8b 89       	ldd	r24, Y+19	; 0x13
    30d2:	9c 89       	ldd	r25, Y+20	; 0x14
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	9c 8b       	std	Y+20, r25	; 0x14
    30d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30da:	8b 89       	ldd	r24, Y+19	; 0x13
    30dc:	9c 89       	ldd	r25, Y+20	; 0x14
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	69 f7       	brne	.-38     	; 0x30bc <H_Lcd_Void_LCDWriteCharacter+0x324>
    30e2:	14 c0       	rjmp	.+40     	; 0x310c <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e4:	6d 89       	ldd	r22, Y+21	; 0x15
    30e6:	7e 89       	ldd	r23, Y+22	; 0x16
    30e8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ea:	98 8d       	ldd	r25, Y+24	; 0x18
    30ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	9c 8b       	std	Y+20, r25	; 0x14
    30f6:	8b 8b       	std	Y+19, r24	; 0x13
    30f8:	8b 89       	ldd	r24, Y+19	; 0x13
    30fa:	9c 89       	ldd	r25, Y+20	; 0x14
    30fc:	98 8b       	std	Y+16, r25	; 0x10
    30fe:	8f 87       	std	Y+15, r24	; 0x0f
    3100:	8f 85       	ldd	r24, Y+15	; 0x0f
    3102:	98 89       	ldd	r25, Y+16	; 0x10
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    3108:	98 8b       	std	Y+16, r25	; 0x10
    310a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    310c:	8c e0       	ldi	r24, 0x0C	; 12
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	a0 ea       	ldi	r26, 0xA0	; 160
    311a:	b0 e4       	ldi	r27, 0x40	; 64
    311c:	8b 87       	std	Y+11, r24	; 0x0b
    311e:	9c 87       	std	Y+12, r25	; 0x0c
    3120:	ad 87       	std	Y+13, r26	; 0x0d
    3122:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3124:	6b 85       	ldd	r22, Y+11	; 0x0b
    3126:	7c 85       	ldd	r23, Y+12	; 0x0c
    3128:	8d 85       	ldd	r24, Y+13	; 0x0d
    312a:	9e 85       	ldd	r25, Y+14	; 0x0e
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	4a e7       	ldi	r20, 0x7A	; 122
    3132:	55 e4       	ldi	r21, 0x45	; 69
    3134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	8f 83       	std	Y+7, r24	; 0x07
    313e:	98 87       	std	Y+8, r25	; 0x08
    3140:	a9 87       	std	Y+9, r26	; 0x09
    3142:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3144:	6f 81       	ldd	r22, Y+7	; 0x07
    3146:	78 85       	ldd	r23, Y+8	; 0x08
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e8       	ldi	r20, 0x80	; 128
    3152:	5f e3       	ldi	r21, 0x3F	; 63
    3154:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3158:	88 23       	and	r24, r24
    315a:	2c f4       	brge	.+10     	; 0x3166 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	9e 83       	std	Y+6, r25	; 0x06
    3162:	8d 83       	std	Y+5, r24	; 0x05
    3164:	3f c0       	rjmp	.+126    	; 0x31e4 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    3166:	6f 81       	ldd	r22, Y+7	; 0x07
    3168:	78 85       	ldd	r23, Y+8	; 0x08
    316a:	89 85       	ldd	r24, Y+9	; 0x09
    316c:	9a 85       	ldd	r25, Y+10	; 0x0a
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	3f ef       	ldi	r19, 0xFF	; 255
    3172:	4f e7       	ldi	r20, 0x7F	; 127
    3174:	57 e4       	ldi	r21, 0x47	; 71
    3176:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    317a:	18 16       	cp	r1, r24
    317c:	4c f5       	brge	.+82     	; 0x31d0 <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3180:	7c 85       	ldd	r23, Y+12	; 0x0c
    3182:	8d 85       	ldd	r24, Y+13	; 0x0d
    3184:	9e 85       	ldd	r25, Y+14	; 0x0e
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e2       	ldi	r20, 0x20	; 32
    318c:	51 e4       	ldi	r21, 0x41	; 65
    318e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	bc 01       	movw	r22, r24
    3198:	cd 01       	movw	r24, r26
    319a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	9e 83       	std	Y+6, r25	; 0x06
    31a4:	8d 83       	std	Y+5, r24	; 0x05
    31a6:	0f c0       	rjmp	.+30     	; 0x31c6 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    31a8:	80 e9       	ldi	r24, 0x90	; 144
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	9c 83       	std	Y+4, r25	; 0x04
    31ae:	8b 83       	std	Y+3, r24	; 0x03
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    31b8:	9c 83       	std	Y+4, r25	; 0x04
    31ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	9e 81       	ldd	r25, Y+6	; 0x06
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	9e 83       	std	Y+6, r25	; 0x06
    31c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c6:	8d 81       	ldd	r24, Y+5	; 0x05
    31c8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	69 f7       	brne	.-38     	; 0x31a8 <H_Lcd_Void_LCDWriteCharacter+0x410>
    31ce:	14 c0       	rjmp	.+40     	; 0x31f8 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d0:	6f 81       	ldd	r22, Y+7	; 0x07
    31d2:	78 85       	ldd	r23, Y+8	; 0x08
    31d4:	89 85       	ldd	r24, Y+9	; 0x09
    31d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	9e 83       	std	Y+6, r25	; 0x06
    31e2:	8d 83       	std	Y+5, r24	; 0x05
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <H_Lcd_Void_LCDWriteCharacter+0x458>
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    31f8:	e9 96       	adiw	r28, 0x39	; 57
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	e9 97       	sbiw	r28, 0x39	; 57
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    3220:	8d e0       	ldi	r24, 0x0D	; 13
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    3228:	89 ad       	ldd	r24, Y+57	; 0x39
    322a:	82 95       	swap	r24
    322c:	8f 70       	andi	r24, 0x0F	; 15
    322e:	98 2f       	mov	r25, r24
    3230:	91 70       	andi	r25, 0x01	; 1
    3232:	84 e1       	ldi	r24, 0x14	; 20
    3234:	69 2f       	mov	r22, r25
    3236:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    323a:	89 ad       	ldd	r24, Y+57	; 0x39
    323c:	82 95       	swap	r24
    323e:	86 95       	lsr	r24
    3240:	87 70       	andi	r24, 0x07	; 7
    3242:	98 2f       	mov	r25, r24
    3244:	91 70       	andi	r25, 0x01	; 1
    3246:	85 e1       	ldi	r24, 0x15	; 21
    3248:	69 2f       	mov	r22, r25
    324a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    324e:	89 ad       	ldd	r24, Y+57	; 0x39
    3250:	82 95       	swap	r24
    3252:	86 95       	lsr	r24
    3254:	86 95       	lsr	r24
    3256:	83 70       	andi	r24, 0x03	; 3
    3258:	98 2f       	mov	r25, r24
    325a:	91 70       	andi	r25, 0x01	; 1
    325c:	86 e1       	ldi	r24, 0x16	; 22
    325e:	69 2f       	mov	r22, r25
    3260:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    3264:	89 ad       	ldd	r24, Y+57	; 0x39
    3266:	98 2f       	mov	r25, r24
    3268:	99 1f       	adc	r25, r25
    326a:	99 27       	eor	r25, r25
    326c:	99 1f       	adc	r25, r25
    326e:	88 e1       	ldi	r24, 0x18	; 24
    3270:	69 2f       	mov	r22, r25
    3272:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    3276:	8c e0       	ldi	r24, 0x0C	; 12
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	a0 e8       	ldi	r26, 0x80	; 128
    3284:	bf e3       	ldi	r27, 0x3F	; 63
    3286:	8d ab       	std	Y+53, r24	; 0x35
    3288:	9e ab       	std	Y+54, r25	; 0x36
    328a:	af ab       	std	Y+55, r26	; 0x37
    328c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328e:	6d a9       	ldd	r22, Y+53	; 0x35
    3290:	7e a9       	ldd	r23, Y+54	; 0x36
    3292:	8f a9       	ldd	r24, Y+55	; 0x37
    3294:	98 ad       	ldd	r25, Y+56	; 0x38
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4a e7       	ldi	r20, 0x7A	; 122
    329c:	55 e4       	ldi	r21, 0x45	; 69
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	89 ab       	std	Y+49, r24	; 0x31
    32a8:	9a ab       	std	Y+50, r25	; 0x32
    32aa:	ab ab       	std	Y+51, r26	; 0x33
    32ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32ae:	69 a9       	ldd	r22, Y+49	; 0x31
    32b0:	7a a9       	ldd	r23, Y+50	; 0x32
    32b2:	8b a9       	ldd	r24, Y+51	; 0x33
    32b4:	9c a9       	ldd	r25, Y+52	; 0x34
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e8       	ldi	r20, 0x80	; 128
    32bc:	5f e3       	ldi	r21, 0x3F	; 63
    32be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c2:	88 23       	and	r24, r24
    32c4:	2c f4       	brge	.+10     	; 0x32d0 <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	98 ab       	std	Y+48, r25	; 0x30
    32cc:	8f a7       	std	Y+47, r24	; 0x2f
    32ce:	3f c0       	rjmp	.+126    	; 0x334e <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    32d0:	69 a9       	ldd	r22, Y+49	; 0x31
    32d2:	7a a9       	ldd	r23, Y+50	; 0x32
    32d4:	8b a9       	ldd	r24, Y+51	; 0x33
    32d6:	9c a9       	ldd	r25, Y+52	; 0x34
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	57 e4       	ldi	r21, 0x47	; 71
    32e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	4c f5       	brge	.+82     	; 0x333a <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e8:	6d a9       	ldd	r22, Y+53	; 0x35
    32ea:	7e a9       	ldd	r23, Y+54	; 0x36
    32ec:	8f a9       	ldd	r24, Y+55	; 0x37
    32ee:	98 ad       	ldd	r25, Y+56	; 0x38
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e2       	ldi	r20, 0x20	; 32
    32f6:	51 e4       	ldi	r21, 0x41	; 65
    32f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	98 ab       	std	Y+48, r25	; 0x30
    330e:	8f a7       	std	Y+47, r24	; 0x2f
    3310:	0f c0       	rjmp	.+30     	; 0x3330 <H_Lcd_Void_LCDWriteCommand+0x126>
    3312:	80 e9       	ldi	r24, 0x90	; 144
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	9e a7       	std	Y+46, r25	; 0x2e
    3318:	8d a7       	std	Y+45, r24	; 0x2d
    331a:	8d a5       	ldd	r24, Y+45	; 0x2d
    331c:	9e a5       	ldd	r25, Y+46	; 0x2e
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <H_Lcd_Void_LCDWriteCommand+0x114>
    3322:	9e a7       	std	Y+46, r25	; 0x2e
    3324:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3326:	8f a5       	ldd	r24, Y+47	; 0x2f
    3328:	98 a9       	ldd	r25, Y+48	; 0x30
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	98 ab       	std	Y+48, r25	; 0x30
    332e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3330:	8f a5       	ldd	r24, Y+47	; 0x2f
    3332:	98 a9       	ldd	r25, Y+48	; 0x30
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	69 f7       	brne	.-38     	; 0x3312 <H_Lcd_Void_LCDWriteCommand+0x108>
    3338:	14 c0       	rjmp	.+40     	; 0x3362 <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333a:	69 a9       	ldd	r22, Y+49	; 0x31
    333c:	7a a9       	ldd	r23, Y+50	; 0x32
    333e:	8b a9       	ldd	r24, Y+51	; 0x33
    3340:	9c a9       	ldd	r25, Y+52	; 0x34
    3342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	98 ab       	std	Y+48, r25	; 0x30
    334c:	8f a7       	std	Y+47, r24	; 0x2f
    334e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3350:	98 a9       	ldd	r25, Y+48	; 0x30
    3352:	9c a7       	std	Y+44, r25	; 0x2c
    3354:	8b a7       	std	Y+43, r24	; 0x2b
    3356:	8b a5       	ldd	r24, Y+43	; 0x2b
    3358:	9c a5       	ldd	r25, Y+44	; 0x2c
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	f1 f7       	brne	.-4      	; 0x335a <H_Lcd_Void_LCDWriteCommand+0x150>
    335e:	9c a7       	std	Y+44, r25	; 0x2c
    3360:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    3362:	8c e0       	ldi	r24, 0x0C	; 12
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	a0 e8       	ldi	r26, 0x80	; 128
    3370:	bf e3       	ldi	r27, 0x3F	; 63
    3372:	8f a3       	std	Y+39, r24	; 0x27
    3374:	98 a7       	std	Y+40, r25	; 0x28
    3376:	a9 a7       	std	Y+41, r26	; 0x29
    3378:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337a:	6f a1       	ldd	r22, Y+39	; 0x27
    337c:	78 a5       	ldd	r23, Y+40	; 0x28
    337e:	89 a5       	ldd	r24, Y+41	; 0x29
    3380:	9a a5       	ldd	r25, Y+42	; 0x2a
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a e7       	ldi	r20, 0x7A	; 122
    3388:	55 e4       	ldi	r21, 0x45	; 69
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	8b a3       	std	Y+35, r24	; 0x23
    3394:	9c a3       	std	Y+36, r25	; 0x24
    3396:	ad a3       	std	Y+37, r26	; 0x25
    3398:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    339a:	6b a1       	ldd	r22, Y+35	; 0x23
    339c:	7c a1       	ldd	r23, Y+36	; 0x24
    339e:	8d a1       	ldd	r24, Y+37	; 0x25
    33a0:	9e a1       	ldd	r25, Y+38	; 0x26
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ae:	88 23       	and	r24, r24
    33b0:	2c f4       	brge	.+10     	; 0x33bc <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9a a3       	std	Y+34, r25	; 0x22
    33b8:	89 a3       	std	Y+33, r24	; 0x21
    33ba:	3f c0       	rjmp	.+126    	; 0x343a <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    33bc:	6b a1       	ldd	r22, Y+35	; 0x23
    33be:	7c a1       	ldd	r23, Y+36	; 0x24
    33c0:	8d a1       	ldd	r24, Y+37	; 0x25
    33c2:	9e a1       	ldd	r25, Y+38	; 0x26
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	4c f5       	brge	.+82     	; 0x3426 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d4:	6f a1       	ldd	r22, Y+39	; 0x27
    33d6:	78 a5       	ldd	r23, Y+40	; 0x28
    33d8:	89 a5       	ldd	r24, Y+41	; 0x29
    33da:	9a a5       	ldd	r25, Y+42	; 0x2a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9a a3       	std	Y+34, r25	; 0x22
    33fa:	89 a3       	std	Y+33, r24	; 0x21
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <H_Lcd_Void_LCDWriteCommand+0x212>
    33fe:	80 e9       	ldi	r24, 0x90	; 144
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	98 a3       	std	Y+32, r25	; 0x20
    3404:	8f 8f       	std	Y+31, r24	; 0x1f
    3406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3408:	98 a1       	ldd	r25, Y+32	; 0x20
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <H_Lcd_Void_LCDWriteCommand+0x200>
    340e:	98 a3       	std	Y+32, r25	; 0x20
    3410:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	89 a1       	ldd	r24, Y+33	; 0x21
    3414:	9a a1       	ldd	r25, Y+34	; 0x22
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9a a3       	std	Y+34, r25	; 0x22
    341a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341c:	89 a1       	ldd	r24, Y+33	; 0x21
    341e:	9a a1       	ldd	r25, Y+34	; 0x22
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	69 f7       	brne	.-38     	; 0x33fe <H_Lcd_Void_LCDWriteCommand+0x1f4>
    3424:	14 c0       	rjmp	.+40     	; 0x344e <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	6b a1       	ldd	r22, Y+35	; 0x23
    3428:	7c a1       	ldd	r23, Y+36	; 0x24
    342a:	8d a1       	ldd	r24, Y+37	; 0x25
    342c:	9e a1       	ldd	r25, Y+38	; 0x26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9a a3       	std	Y+34, r25	; 0x22
    3438:	89 a3       	std	Y+33, r24	; 0x21
    343a:	89 a1       	ldd	r24, Y+33	; 0x21
    343c:	9a a1       	ldd	r25, Y+34	; 0x22
    343e:	9e 8f       	std	Y+30, r25	; 0x1e
    3440:	8d 8f       	std	Y+29, r24	; 0x1d
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <H_Lcd_Void_LCDWriteCommand+0x23c>
    344a:	9e 8f       	std	Y+30, r25	; 0x1e
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    344e:	89 ad       	ldd	r24, Y+57	; 0x39
    3450:	98 2f       	mov	r25, r24
    3452:	91 70       	andi	r25, 0x01	; 1
    3454:	84 e1       	ldi	r24, 0x14	; 20
    3456:	69 2f       	mov	r22, r25
    3458:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    345c:	89 ad       	ldd	r24, Y+57	; 0x39
    345e:	86 95       	lsr	r24
    3460:	98 2f       	mov	r25, r24
    3462:	91 70       	andi	r25, 0x01	; 1
    3464:	85 e1       	ldi	r24, 0x15	; 21
    3466:	69 2f       	mov	r22, r25
    3468:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    346c:	89 ad       	ldd	r24, Y+57	; 0x39
    346e:	86 95       	lsr	r24
    3470:	86 95       	lsr	r24
    3472:	98 2f       	mov	r25, r24
    3474:	91 70       	andi	r25, 0x01	; 1
    3476:	86 e1       	ldi	r24, 0x16	; 22
    3478:	69 2f       	mov	r22, r25
    347a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    347e:	89 ad       	ldd	r24, Y+57	; 0x39
    3480:	86 95       	lsr	r24
    3482:	86 95       	lsr	r24
    3484:	86 95       	lsr	r24
    3486:	98 2f       	mov	r25, r24
    3488:	91 70       	andi	r25, 0x01	; 1
    348a:	88 e1       	ldi	r24, 0x18	; 24
    348c:	69 2f       	mov	r22, r25
    348e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    3492:	8c e0       	ldi	r24, 0x0C	; 12
    3494:	61 e0       	ldi	r22, 0x01	; 1
    3496:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	a0 e8       	ldi	r26, 0x80	; 128
    34a0:	bf e3       	ldi	r27, 0x3F	; 63
    34a2:	89 8f       	std	Y+25, r24	; 0x19
    34a4:	9a 8f       	std	Y+26, r25	; 0x1a
    34a6:	ab 8f       	std	Y+27, r26	; 0x1b
    34a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34aa:	69 8d       	ldd	r22, Y+25	; 0x19
    34ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	4a e7       	ldi	r20, 0x7A	; 122
    34b8:	55 e4       	ldi	r21, 0x45	; 69
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	8d 8b       	std	Y+21, r24	; 0x15
    34c4:	9e 8b       	std	Y+22, r25	; 0x16
    34c6:	af 8b       	std	Y+23, r26	; 0x17
    34c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ca:	6d 89       	ldd	r22, Y+21	; 0x15
    34cc:	7e 89       	ldd	r23, Y+22	; 0x16
    34ce:	8f 89       	ldd	r24, Y+23	; 0x17
    34d0:	98 8d       	ldd	r25, Y+24	; 0x18
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e8       	ldi	r20, 0x80	; 128
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34de:	88 23       	and	r24, r24
    34e0:	2c f4       	brge	.+10     	; 0x34ec <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9c 8b       	std	Y+20, r25	; 0x14
    34e8:	8b 8b       	std	Y+19, r24	; 0x13
    34ea:	3f c0       	rjmp	.+126    	; 0x356a <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    34ec:	6d 89       	ldd	r22, Y+21	; 0x15
    34ee:	7e 89       	ldd	r23, Y+22	; 0x16
    34f0:	8f 89       	ldd	r24, Y+23	; 0x17
    34f2:	98 8d       	ldd	r25, Y+24	; 0x18
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	4f e7       	ldi	r20, 0x7F	; 127
    34fa:	57 e4       	ldi	r21, 0x47	; 71
    34fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3500:	18 16       	cp	r1, r24
    3502:	4c f5       	brge	.+82     	; 0x3556 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	69 8d       	ldd	r22, Y+25	; 0x19
    3506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e2       	ldi	r20, 0x20	; 32
    3512:	51 e4       	ldi	r21, 0x41	; 65
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9c 8b       	std	Y+20, r25	; 0x14
    352a:	8b 8b       	std	Y+19, r24	; 0x13
    352c:	0f c0       	rjmp	.+30     	; 0x354c <H_Lcd_Void_LCDWriteCommand+0x342>
    352e:	80 e9       	ldi	r24, 0x90	; 144
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	9a 8b       	std	Y+18, r25	; 0x12
    3534:	89 8b       	std	Y+17, r24	; 0x11
    3536:	89 89       	ldd	r24, Y+17	; 0x11
    3538:	9a 89       	ldd	r25, Y+18	; 0x12
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <H_Lcd_Void_LCDWriteCommand+0x330>
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3542:	8b 89       	ldd	r24, Y+19	; 0x13
    3544:	9c 89       	ldd	r25, Y+20	; 0x14
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	69 f7       	brne	.-38     	; 0x352e <H_Lcd_Void_LCDWriteCommand+0x324>
    3554:	14 c0       	rjmp	.+40     	; 0x357e <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3556:	6d 89       	ldd	r22, Y+21	; 0x15
    3558:	7e 89       	ldd	r23, Y+22	; 0x16
    355a:	8f 89       	ldd	r24, Y+23	; 0x17
    355c:	98 8d       	ldd	r25, Y+24	; 0x18
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	9c 8b       	std	Y+20, r25	; 0x14
    3568:	8b 8b       	std	Y+19, r24	; 0x13
    356a:	8b 89       	ldd	r24, Y+19	; 0x13
    356c:	9c 89       	ldd	r25, Y+20	; 0x14
    356e:	98 8b       	std	Y+16, r25	; 0x10
    3570:	8f 87       	std	Y+15, r24	; 0x0f
    3572:	8f 85       	ldd	r24, Y+15	; 0x0f
    3574:	98 89       	ldd	r25, Y+16	; 0x10
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <H_Lcd_Void_LCDWriteCommand+0x36c>
    357a:	98 8b       	std	Y+16, r25	; 0x10
    357c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    357e:	8c e0       	ldi	r24, 0x0C	; 12
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	a0 ea       	ldi	r26, 0xA0	; 160
    358c:	b0 e4       	ldi	r27, 0x40	; 64
    358e:	8b 87       	std	Y+11, r24	; 0x0b
    3590:	9c 87       	std	Y+12, r25	; 0x0c
    3592:	ad 87       	std	Y+13, r26	; 0x0d
    3594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3596:	6b 85       	ldd	r22, Y+11	; 0x0b
    3598:	7c 85       	ldd	r23, Y+12	; 0x0c
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4a e7       	ldi	r20, 0x7A	; 122
    35a4:	55 e4       	ldi	r21, 0x45	; 69
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	8f 83       	std	Y+7, r24	; 0x07
    35b0:	98 87       	std	Y+8, r25	; 0x08
    35b2:	a9 87       	std	Y+9, r26	; 0x09
    35b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b6:	6f 81       	ldd	r22, Y+7	; 0x07
    35b8:	78 85       	ldd	r23, Y+8	; 0x08
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e8       	ldi	r20, 0x80	; 128
    35c4:	5f e3       	ldi	r21, 0x3F	; 63
    35c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35ca:	88 23       	and	r24, r24
    35cc:	2c f4       	brge	.+10     	; 0x35d8 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	3f c0       	rjmp	.+126    	; 0x3656 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    35d8:	6f 81       	ldd	r22, Y+7	; 0x07
    35da:	78 85       	ldd	r23, Y+8	; 0x08
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	3f ef       	ldi	r19, 0xFF	; 255
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	57 e4       	ldi	r21, 0x47	; 71
    35e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ec:	18 16       	cp	r1, r24
    35ee:	4c f5       	brge	.+82     	; 0x3642 <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e2       	ldi	r20, 0x20	; 32
    35fe:	51 e4       	ldi	r21, 0x41	; 65
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	0f c0       	rjmp	.+30     	; 0x3638 <H_Lcd_Void_LCDWriteCommand+0x42e>
    361a:	80 e9       	ldi	r24, 0x90	; 144
    361c:	91 e0       	ldi	r25, 0x01	; 1
    361e:	9c 83       	std	Y+4, r25	; 0x04
    3620:	8b 83       	std	Y+3, r24	; 0x03
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	9c 81       	ldd	r25, Y+4	; 0x04
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <H_Lcd_Void_LCDWriteCommand+0x41c>
    362a:	9c 83       	std	Y+4, r25	; 0x04
    362c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	9e 81       	ldd	r25, Y+6	; 0x06
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	69 f7       	brne	.-38     	; 0x361a <H_Lcd_Void_LCDWriteCommand+0x410>
    3640:	14 c0       	rjmp	.+40     	; 0x366a <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	9a 83       	std	Y+2, r25	; 0x02
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <H_Lcd_Void_LCDWriteCommand+0x458>
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    366a:	e9 96       	adiw	r28, 0x39	; 57
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	00 d0       	rcall	.+0      	; 0x3682 <H_Lcd_Void_LCDWriteString+0x6>
    3682:	0f 92       	push	r0
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
    3688:	9b 83       	std	Y+3, r25	; 0x03
    368a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    368c:	19 82       	std	Y+1, r1	; 0x01
    368e:	0e c0       	rjmp	.+28     	; 0x36ac <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	fc 01       	movw	r30, r24
    369c:	e2 0f       	add	r30, r18
    369e:	f3 1f       	adc	r31, r19
    36a0:	80 81       	ld	r24, Z
    36a2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	8f 5f       	subi	r24, 0xFF	; 255
    36aa:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	fc 01       	movw	r30, r24
    36b8:	e2 0f       	add	r30, r18
    36ba:	f3 1f       	adc	r31, r19
    36bc:	80 81       	ld	r24, Z
    36be:	88 23       	and	r24, r24
    36c0:	39 f7       	brne	.-50     	; 0x3690 <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>
}
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	2f 97       	sbiw	r28, 0x0f	; 15
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	6c 87       	std	Y+12, r22	; 0x0c
    36fc:	7d 87       	std	Y+13, r23	; 0x0d
    36fe:	8e 87       	std	Y+14, r24	; 0x0e
    3700:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    3702:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    3704:	8a e0       	ldi	r24, 0x0A	; 10
    3706:	fe 01       	movw	r30, r28
    3708:	32 96       	adiw	r30, 0x02	; 2
    370a:	df 01       	movw	r26, r30
    370c:	98 2f       	mov	r25, r24
    370e:	1d 92       	st	X+, r1
    3710:	9a 95       	dec	r25
    3712:	e9 f7       	brne	.-6      	; 0x370e <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    3714:	8c 85       	ldd	r24, Y+12	; 0x0c
    3716:	9d 85       	ldd	r25, Y+13	; 0x0d
    3718:	ae 85       	ldd	r26, Y+14	; 0x0e
    371a:	bf 85       	ldd	r27, Y+15	; 0x0f
    371c:	bb 23       	and	r27, r27
    371e:	94 f4       	brge	.+36     	; 0x3744 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    3720:	8c 85       	ldd	r24, Y+12	; 0x0c
    3722:	9d 85       	ldd	r25, Y+13	; 0x0d
    3724:	ae 85       	ldd	r26, Y+14	; 0x0e
    3726:	bf 85       	ldd	r27, Y+15	; 0x0f
    3728:	b0 95       	com	r27
    372a:	a0 95       	com	r26
    372c:	90 95       	com	r25
    372e:	81 95       	neg	r24
    3730:	9f 4f       	sbci	r25, 0xFF	; 255
    3732:	af 4f       	sbci	r26, 0xFF	; 255
    3734:	bf 4f       	sbci	r27, 0xFF	; 255
    3736:	8c 87       	std	Y+12, r24	; 0x0c
    3738:	9d 87       	std	Y+13, r25	; 0x0d
    373a:	ae 87       	std	Y+14, r26	; 0x0e
    373c:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    373e:	8d e2       	ldi	r24, 0x2D	; 45
    3740:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	08 2f       	mov	r16, r24
    3748:	11 27       	eor	r17, r17
    374a:	07 fd       	sbrc	r16, 7
    374c:	10 95       	com	r17
    374e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3750:	9d 85       	ldd	r25, Y+13	; 0x0d
    3752:	ae 85       	ldd	r26, Y+14	; 0x0e
    3754:	bf 85       	ldd	r27, Y+15	; 0x0f
    3756:	2a e0       	ldi	r18, 0x0A	; 10
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e0       	ldi	r20, 0x00	; 0
    375c:	50 e0       	ldi	r21, 0x00	; 0
    375e:	bc 01       	movw	r22, r24
    3760:	cd 01       	movw	r24, r26
    3762:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <__divmodsi4>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	28 2f       	mov	r18, r24
    376c:	ce 01       	movw	r24, r28
    376e:	02 96       	adiw	r24, 0x02	; 2
    3770:	fc 01       	movw	r30, r24
    3772:	e0 0f       	add	r30, r16
    3774:	f1 1f       	adc	r31, r17
    3776:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    3778:	8c 85       	ldd	r24, Y+12	; 0x0c
    377a:	9d 85       	ldd	r25, Y+13	; 0x0d
    377c:	ae 85       	ldd	r26, Y+14	; 0x0e
    377e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3780:	2a e0       	ldi	r18, 0x0A	; 10
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e0       	ldi	r20, 0x00	; 0
    3786:	50 e0       	ldi	r21, 0x00	; 0
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <__divmodsi4>
    3790:	da 01       	movw	r26, r20
    3792:	c9 01       	movw	r24, r18
    3794:	8c 87       	std	Y+12, r24	; 0x0c
    3796:	9d 87       	std	Y+13, r25	; 0x0d
    3798:	ae 87       	std	Y+14, r26	; 0x0e
    379a:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    379c:	89 81       	ldd	r24, Y+1	; 0x01
    379e:	8f 5f       	subi	r24, 0xFF	; 255
    37a0:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    37a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    37a6:	ae 85       	ldd	r26, Y+14	; 0x0e
    37a8:	bf 85       	ldd	r27, Y+15	; 0x0f
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	a1 05       	cpc	r26, r1
    37ae:	b1 05       	cpc	r27, r1
    37b0:	49 f6       	brne	.-110    	; 0x3744 <H_Lcd_Void_LCDWriteNumber+0x62>
    37b2:	11 c0       	rjmp	.+34     	; 0x37d6 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	81 50       	subi	r24, 0x01	; 1
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	28 2f       	mov	r18, r24
    37be:	33 27       	eor	r19, r19
    37c0:	27 fd       	sbrc	r18, 7
    37c2:	30 95       	com	r19
    37c4:	ce 01       	movw	r24, r28
    37c6:	02 96       	adiw	r24, 0x02	; 2
    37c8:	fc 01       	movw	r30, r24
    37ca:	e2 0f       	add	r30, r18
    37cc:	f3 1f       	adc	r31, r19
    37ce:	80 81       	ld	r24, Z
    37d0:	80 5d       	subi	r24, 0xD0	; 208
    37d2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	18 16       	cp	r1, r24
    37da:	64 f3       	brlt	.-40     	; 0x37b4 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    37dc:	2f 96       	adiw	r28, 0x0f	; 15
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	08 95       	ret

000037f2 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	00 d0       	rcall	.+0      	; 0x37f8 <H_Lcd_Void_LCDGoTo+0x6>
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <H_Lcd_Void_LCDGoTo+0x8>
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <H_Lcd_Void_LCDGoTo+0xa>
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	8d 83       	std	Y+5, r24	; 0x05
    3802:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    3804:	80 e8       	ldi	r24, 0x80	; 128
    3806:	89 83       	std	Y+1, r24	; 0x01
    3808:	80 ec       	ldi	r24, 0xC0	; 192
    380a:	8a 83       	std	Y+2, r24	; 0x02
    380c:	84 e9       	ldi	r24, 0x94	; 148
    380e:	8b 83       	std	Y+3, r24	; 0x03
    3810:	84 ed       	ldi	r24, 0xD4	; 212
    3812:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
    3816:	28 2f       	mov	r18, r24
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	ce 01       	movw	r24, r28
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	fc 01       	movw	r30, r24
    3820:	e2 0f       	add	r30, r18
    3822:	f3 1f       	adc	r31, r19
    3824:	90 81       	ld	r25, Z
    3826:	8e 81       	ldd	r24, Y+6	; 0x06
    3828:	89 0f       	add	r24, r25
    382a:	0e 94 05 19 	call	0x320a	; 0x320a <H_Lcd_Void_LCDWriteCommand>
}
    382e:	26 96       	adiw	r28, 0x06	; 6
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <H_KeyPad_Void_KeyPadInit>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    3848:	83 e2       	ldi	r24, 0x23	; 35
    384a:	61 e0       	ldi	r22, 0x01	; 1
    384c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    3850:	82 e2       	ldi	r24, 0x22	; 34
    3852:	61 e0       	ldi	r22, 0x01	; 1
    3854:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    3858:	81 e2       	ldi	r24, 0x21	; 33
    385a:	61 e0       	ldi	r22, 0x01	; 1
    385c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
//	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    3860:	83 e2       	ldi	r24, 0x23	; 35
    3862:	61 e0       	ldi	r22, 0x01	; 1
    3864:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    3868:	82 e2       	ldi	r24, 0x22	; 34
    386a:	61 e0       	ldi	r22, 0x01	; 1
    386c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    3870:	81 e2       	ldi	r24, 0x21	; 33
    3872:	61 e0       	ldi	r22, 0x01	; 1
    3874:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
//	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    3878:	8f e2       	ldi	r24, 0x2F	; 47
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    3880:	8e e2       	ldi	r24, 0x2E	; 46
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    3888:	8d e2       	ldi	r24, 0x2D	; 45
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
//	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
}
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	08 95       	ret

00003896 <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
    3896:	df 93       	push	r29
    3898:	cf 93       	push	r28
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	af 97       	sbiw	r28, 0x2f	; 47
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[3] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN };
    38aa:	ce 01       	movw	r24, r28
    38ac:	42 96       	adiw	r24, 0x12	; 18
    38ae:	9a a3       	std	Y+34, r25	; 0x22
    38b0:	89 a3       	std	Y+33, r24	; 0x21
    38b2:	e2 e5       	ldi	r30, 0x52	; 82
    38b4:	f1 e0       	ldi	r31, 0x01	; 1
    38b6:	fc a3       	std	Y+36, r31	; 0x24
    38b8:	eb a3       	std	Y+35, r30	; 0x23
    38ba:	f3 e0       	ldi	r31, 0x03	; 3
    38bc:	fd a3       	std	Y+37, r31	; 0x25
    38be:	eb a1       	ldd	r30, Y+35	; 0x23
    38c0:	fc a1       	ldd	r31, Y+36	; 0x24
    38c2:	00 80       	ld	r0, Z
    38c4:	8b a1       	ldd	r24, Y+35	; 0x23
    38c6:	9c a1       	ldd	r25, Y+36	; 0x24
    38c8:	01 96       	adiw	r24, 0x01	; 1
    38ca:	9c a3       	std	Y+36, r25	; 0x24
    38cc:	8b a3       	std	Y+35, r24	; 0x23
    38ce:	e9 a1       	ldd	r30, Y+33	; 0x21
    38d0:	fa a1       	ldd	r31, Y+34	; 0x22
    38d2:	00 82       	st	Z, r0
    38d4:	89 a1       	ldd	r24, Y+33	; 0x21
    38d6:	9a a1       	ldd	r25, Y+34	; 0x22
    38d8:	01 96       	adiw	r24, 0x01	; 1
    38da:	9a a3       	std	Y+34, r25	; 0x22
    38dc:	89 a3       	std	Y+33, r24	; 0x21
    38de:	9d a1       	ldd	r25, Y+37	; 0x25
    38e0:	91 50       	subi	r25, 0x01	; 1
    38e2:	9d a3       	std	Y+37, r25	; 0x25
    38e4:	ed a1       	ldd	r30, Y+37	; 0x25
    38e6:	ee 23       	and	r30, r30
    38e8:	51 f7       	brne	.-44     	; 0x38be <H_KeyPad_U8_KeyPadRead+0x28>
	u8 Local_U8_KeypadColPins[3] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN };
    38ea:	ce 01       	movw	r24, r28
    38ec:	45 96       	adiw	r24, 0x15	; 21
    38ee:	9f a3       	std	Y+39, r25	; 0x27
    38f0:	8e a3       	std	Y+38, r24	; 0x26
    38f2:	ef e4       	ldi	r30, 0x4F	; 79
    38f4:	f1 e0       	ldi	r31, 0x01	; 1
    38f6:	f9 a7       	std	Y+41, r31	; 0x29
    38f8:	e8 a7       	std	Y+40, r30	; 0x28
    38fa:	f3 e0       	ldi	r31, 0x03	; 3
    38fc:	fa a7       	std	Y+42, r31	; 0x2a
    38fe:	e8 a5       	ldd	r30, Y+40	; 0x28
    3900:	f9 a5       	ldd	r31, Y+41	; 0x29
    3902:	00 80       	ld	r0, Z
    3904:	88 a5       	ldd	r24, Y+40	; 0x28
    3906:	99 a5       	ldd	r25, Y+41	; 0x29
    3908:	01 96       	adiw	r24, 0x01	; 1
    390a:	99 a7       	std	Y+41, r25	; 0x29
    390c:	88 a7       	std	Y+40, r24	; 0x28
    390e:	ee a1       	ldd	r30, Y+38	; 0x26
    3910:	ff a1       	ldd	r31, Y+39	; 0x27
    3912:	00 82       	st	Z, r0
    3914:	8e a1       	ldd	r24, Y+38	; 0x26
    3916:	9f a1       	ldd	r25, Y+39	; 0x27
    3918:	01 96       	adiw	r24, 0x01	; 1
    391a:	9f a3       	std	Y+39, r25	; 0x27
    391c:	8e a3       	std	Y+38, r24	; 0x26
    391e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3920:	91 50       	subi	r25, 0x01	; 1
    3922:	9a a7       	std	Y+42, r25	; 0x2a
    3924:	ea a5       	ldd	r30, Y+42	; 0x2a
    3926:	ee 23       	and	r30, r30
    3928:	51 f7       	brne	.-44     	; 0x38fe <H_KeyPad_U8_KeyPadRead+0x68>
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [3][3] = {{ '1' , '2' , '3' },
			                          { '4' , '5' , '6' },
							          { '7' , '8' , '9' },
						         	  };
    392a:	ce 01       	movw	r24, r28
    392c:	48 96       	adiw	r24, 0x18	; 24
    392e:	9c a7       	std	Y+44, r25	; 0x2c
    3930:	8b a7       	std	Y+43, r24	; 0x2b
    3932:	e6 e4       	ldi	r30, 0x46	; 70
    3934:	f1 e0       	ldi	r31, 0x01	; 1
    3936:	fe a7       	std	Y+46, r31	; 0x2e
    3938:	ed a7       	std	Y+45, r30	; 0x2d
    393a:	f9 e0       	ldi	r31, 0x09	; 9
    393c:	ff a7       	std	Y+47, r31	; 0x2f
    393e:	ed a5       	ldd	r30, Y+45	; 0x2d
    3940:	fe a5       	ldd	r31, Y+46	; 0x2e
    3942:	00 80       	ld	r0, Z
    3944:	8d a5       	ldd	r24, Y+45	; 0x2d
    3946:	9e a5       	ldd	r25, Y+46	; 0x2e
    3948:	01 96       	adiw	r24, 0x01	; 1
    394a:	9e a7       	std	Y+46, r25	; 0x2e
    394c:	8d a7       	std	Y+45, r24	; 0x2d
    394e:	eb a5       	ldd	r30, Y+43	; 0x2b
    3950:	fc a5       	ldd	r31, Y+44	; 0x2c
    3952:	00 82       	st	Z, r0
    3954:	8b a5       	ldd	r24, Y+43	; 0x2b
    3956:	9c a5       	ldd	r25, Y+44	; 0x2c
    3958:	01 96       	adiw	r24, 0x01	; 1
    395a:	9c a7       	std	Y+44, r25	; 0x2c
    395c:	8b a7       	std	Y+43, r24	; 0x2b
    395e:	9f a5       	ldd	r25, Y+47	; 0x2f
    3960:	91 50       	subi	r25, 0x01	; 1
    3962:	9f a7       	std	Y+47, r25	; 0x2f
    3964:	ef a5       	ldd	r30, Y+47	; 0x2f
    3966:	ee 23       	and	r30, r30
    3968:	51 f7       	brne	.-44     	; 0x393e <H_KeyPad_U8_KeyPadRead+0xa8>
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_U8_RowCounter = 0;
    396e:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8_ColCounter = 0;
    3970:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 2 ; Local_U8_RowCounter++)
    3972:	18 8a       	std	Y+16, r1	; 0x10
    3974:	c8 c0       	rjmp	.+400    	; 0x3b06 <H_KeyPad_U8_KeyPadRead+0x270>
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    3976:	88 89       	ldd	r24, Y+16	; 0x10
    3978:	28 2f       	mov	r18, r24
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	ce 01       	movw	r24, r28
    397e:	42 96       	adiw	r24, 0x12	; 18
    3980:	fc 01       	movw	r30, r24
    3982:	e2 0f       	add	r30, r18
    3984:	f3 1f       	adc	r31, r19
    3986:	80 81       	ld	r24, Z
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 2 ; Local_U8_ColCounter++)
    398e:	1f 86       	std	Y+15, r1	; 0x0f
    3990:	a7 c0       	rjmp	.+334    	; 0x3ae0 <H_KeyPad_U8_KeyPadRead+0x24a>
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    3992:	8f 85       	ldd	r24, Y+15	; 0x0f
    3994:	28 2f       	mov	r18, r24
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	ce 01       	movw	r24, r28
    399a:	45 96       	adiw	r24, 0x15	; 21
    399c:	fc 01       	movw	r30, r24
    399e:	e2 0f       	add	r30, r18
    39a0:	f3 1f       	adc	r31, r19
    39a2:	80 81       	ld	r24, Z
    39a4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    39a8:	88 23       	and	r24, r24
    39aa:	09 f0       	breq	.+2      	; 0x39ae <H_KeyPad_U8_KeyPadRead+0x118>
    39ac:	96 c0       	rjmp	.+300    	; 0x3ada <H_KeyPad_U8_KeyPadRead+0x244>
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	a0 e2       	ldi	r26, 0x20	; 32
    39b4:	b2 e4       	ldi	r27, 0x42	; 66
    39b6:	8b 87       	std	Y+11, r24	; 0x0b
    39b8:	9c 87       	std	Y+12, r25	; 0x0c
    39ba:	ad 87       	std	Y+13, r26	; 0x0d
    39bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39be:	6b 85       	ldd	r22, Y+11	; 0x0b
    39c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	4a e7       	ldi	r20, 0x7A	; 122
    39cc:	55 e4       	ldi	r21, 0x45	; 69
    39ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	8f 83       	std	Y+7, r24	; 0x07
    39d8:	98 87       	std	Y+8, r25	; 0x08
    39da:	a9 87       	std	Y+9, r26	; 0x09
    39dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39de:	6f 81       	ldd	r22, Y+7	; 0x07
    39e0:	78 85       	ldd	r23, Y+8	; 0x08
    39e2:	89 85       	ldd	r24, Y+9	; 0x09
    39e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e8       	ldi	r20, 0x80	; 128
    39ec:	5f e3       	ldi	r21, 0x3F	; 63
    39ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39f2:	88 23       	and	r24, r24
    39f4:	2c f4       	brge	.+10     	; 0x3a00 <H_KeyPad_U8_KeyPadRead+0x16a>
		__ticks = 1;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	9e 83       	std	Y+6, r25	; 0x06
    39fc:	8d 83       	std	Y+5, r24	; 0x05
    39fe:	3f c0       	rjmp	.+126    	; 0x3a7e <H_KeyPad_U8_KeyPadRead+0x1e8>
	else if (__tmp > 65535)
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	3f ef       	ldi	r19, 0xFF	; 255
    3a0c:	4f e7       	ldi	r20, 0x7F	; 127
    3a0e:	57 e4       	ldi	r21, 0x47	; 71
    3a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a14:	18 16       	cp	r1, r24
    3a16:	4c f5       	brge	.+82     	; 0x3a6a <H_KeyPad_U8_KeyPadRead+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e2       	ldi	r20, 0x20	; 32
    3a26:	51 e4       	ldi	r21, 0x41	; 65
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	bc 01       	movw	r22, r24
    3a32:	cd 01       	movw	r24, r26
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	9e 83       	std	Y+6, r25	; 0x06
    3a3e:	8d 83       	std	Y+5, r24	; 0x05
    3a40:	0f c0       	rjmp	.+30     	; 0x3a60 <H_KeyPad_U8_KeyPadRead+0x1ca>
    3a42:	80 e9       	ldi	r24, 0x90	; 144
    3a44:	91 e0       	ldi	r25, 0x01	; 1
    3a46:	9c 83       	std	Y+4, r25	; 0x04
    3a48:	8b 83       	std	Y+3, r24	; 0x03
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	f1 f7       	brne	.-4      	; 0x3a4e <H_KeyPad_U8_KeyPadRead+0x1b8>
    3a52:	9c 83       	std	Y+4, r25	; 0x04
    3a54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a56:	8d 81       	ldd	r24, Y+5	; 0x05
    3a58:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	9e 83       	std	Y+6, r25	; 0x06
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a60:	8d 81       	ldd	r24, Y+5	; 0x05
    3a62:	9e 81       	ldd	r25, Y+6	; 0x06
    3a64:	00 97       	sbiw	r24, 0x00	; 0
    3a66:	69 f7       	brne	.-38     	; 0x3a42 <H_KeyPad_U8_KeyPadRead+0x1ac>
    3a68:	14 c0       	rjmp	.+40     	; 0x3a92 <H_KeyPad_U8_KeyPadRead+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6c:	78 85       	ldd	r23, Y+8	; 0x08
    3a6e:	89 85       	ldd	r24, Y+9	; 0x09
    3a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	9e 83       	std	Y+6, r25	; 0x06
    3a7c:	8d 83       	std	Y+5, r24	; 0x05
    3a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a80:	9e 81       	ldd	r25, Y+6	; 0x06
    3a82:	9a 83       	std	Y+2, r25	; 0x02
    3a84:	89 83       	std	Y+1, r24	; 0x01
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <H_KeyPad_U8_KeyPadRead+0x1f4>
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    3a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a94:	28 2f       	mov	r18, r24
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	ce 01       	movw	r24, r28
    3a9a:	45 96       	adiw	r24, 0x15	; 21
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	e2 0f       	add	r30, r18
    3aa0:	f3 1f       	adc	r31, r19
    3aa2:	80 81       	ld	r24, Z
    3aa4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <M_DIO_Void_GetPinValue>
    3aa8:	88 23       	and	r24, r24
    3aaa:	b9 f4       	brne	.+46     	; 0x3ada <H_KeyPad_U8_KeyPadRead+0x244>
				{
					//while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
    3aac:	88 89       	ldd	r24, Y+16	; 0x10
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab4:	48 2f       	mov	r20, r24
    3ab6:	50 e0       	ldi	r21, 0x00	; 0
    3ab8:	c9 01       	movw	r24, r18
    3aba:	88 0f       	add	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	82 0f       	add	r24, r18
    3ac0:	93 1f       	adc	r25, r19
    3ac2:	9e 01       	movw	r18, r28
    3ac4:	2f 5f       	subi	r18, 0xFF	; 255
    3ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac8:	82 0f       	add	r24, r18
    3aca:	93 1f       	adc	r25, r19
    3acc:	84 0f       	add	r24, r20
    3ace:	95 1f       	adc	r25, r21
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	77 96       	adiw	r30, 0x17	; 23
    3ad4:	80 81       	ld	r24, Z
    3ad6:	89 8b       	std	Y+17, r24	; 0x11
    3ad8:	07 c0       	rjmp	.+14     	; 0x3ae8 <H_KeyPad_U8_KeyPadRead+0x252>
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 2 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 2 ; Local_U8_ColCounter++)
    3ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    3adc:	8f 5f       	subi	r24, 0xFF	; 255
    3ade:	8f 87       	std	Y+15, r24	; 0x0f
    3ae0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae2:	83 30       	cpi	r24, 0x03	; 3
    3ae4:	08 f4       	brcc	.+2      	; 0x3ae8 <H_KeyPad_U8_KeyPadRead+0x252>
    3ae6:	55 cf       	rjmp	.-342    	; 0x3992 <H_KeyPad_U8_KeyPadRead+0xfc>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
    3ae8:	88 89       	ldd	r24, Y+16	; 0x10
    3aea:	28 2f       	mov	r18, r24
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	ce 01       	movw	r24, r28
    3af0:	42 96       	adiw	r24, 0x12	; 18
    3af2:	fc 01       	movw	r30, r24
    3af4:	e2 0f       	add	r30, r18
    3af6:	f3 1f       	adc	r31, r19
    3af8:	80 81       	ld	r24, Z
    3afa:	61 e0       	ldi	r22, 0x01	; 1
    3afc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 2 ; Local_U8_RowCounter++)
    3b00:	88 89       	ldd	r24, Y+16	; 0x10
    3b02:	8f 5f       	subi	r24, 0xFF	; 255
    3b04:	88 8b       	std	Y+16, r24	; 0x10
    3b06:	88 89       	ldd	r24, Y+16	; 0x10
    3b08:	83 30       	cpi	r24, 0x03	; 3
    3b0a:	08 f4       	brcc	.+2      	; 0x3b0e <H_KeyPad_U8_KeyPadRead+0x278>
    3b0c:	34 cf       	rjmp	.-408    	; 0x3976 <H_KeyPad_U8_KeyPadRead+0xe0>

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
    3b0e:	89 89       	ldd	r24, Y+17	; 0x11
}
    3b10:	af 96       	adiw	r28, 0x2f	; 47
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <Car_Init>:
const s8 *Date_Array[] = { "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday",
		"Thursday", "Friday" };

u8 Page_No = 0;

void Car_Init() {
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
	//M_Timer_Void_TimerInit();
	H_KeyPad_Void_KeyPadInit();
    3b2a:	0e 94 20 1c 	call	0x3840	; 0x3840 <H_KeyPad_Void_KeyPadInit>
	M_ADC_Void_ADCInit();
    3b2e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <M_ADC_Void_ADCInit>
	M_DIO_Void_SetPinDirection(PA0_PIN, INPUT);
    3b32:	8a e0       	ldi	r24, 0x0A	; 10
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>

	/*initalize leds output*/
	H_LED_Void_LedInit(LED_YEL);
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED_GRN);
    3b40:	83 e0       	ldi	r24, 0x03	; 3
    3b42:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED_RED);
    3b46:	84 e0       	ldi	r24, 0x04	; 4
    3b48:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED_BLU);
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <H_LED_Void_LedInit>

	M_DIO_Void_SetPinDirection(BUZZER_PIN, OUTPUT);
    3b52:	84 e2       	ldi	r24, 0x24	; 36
    3b54:	61 e0       	ldi	r22, 0x01	; 1
    3b56:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>

	/*initalize Push button input pullup*/
//    H_PushButton_Void_PushButtonInit(PUSH_BUTTON_0);
//    H_PushButton_Void_PushButtonInit(PUSH_BUTTON_1);
//    H_PushButton_Void_PushButtonInit(PUSH_BUTTON_2);
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_3);
    3b5a:	83 e0       	ldi	r24, 0x03	; 3
    3b5c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <H_PushButton_Void_PushButtonInit>
//
//    M_DIO_Void_SetPinValue(PUSH_BUTTON_0_PIN,HIGH);
//    M_DIO_Void_SetPinValue(PUSH_BUTTON_1_PIN,HIGH);
//    M_DIO_Void_SetPinValue(PUSH_BUTTON_2_PIN,HIGH);
	M_DIO_Void_SetPinValue(PUSH_BUTTON_3_PIN, HIGH);
    3b60:	8b e2       	ldi	r24, 0x2B	; 43
    3b62:	61 e0       	ldi	r22, 0x01	; 1
    3b64:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>

	H_Lcd_Void_LCDInit();
    3b68:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <H_Lcd_Void_LCDInit>
	H_Lcd_Void_LCDGoTo(0, 0);
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
	/*  if(CCS_Status == CCS_OFF && Page_No == 2)
	 {
	 H_Lcd_Void_LCDGoTo(3,7);
	 H_Lcd_Void_LCDWriteString("Off");
	 }*/
	H_Lcd_Void_LCDGoTo(3, 0);
    3b74:	83 e0       	ldi	r24, 0x03	; 3
    3b76:	60 e0       	ldi	r22, 0x00	; 0
    3b78:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("RND : ");
    3b7c:	89 e9       	ldi	r24, 0x99	; 153
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
//    if(RND_Status == RND_DEFAULT)
//    {
//        H_Lcd_Void_LCDGoTo(3,7);
//        H_Lcd_Void_LCDWriteCharacter('N');
//    }
	if (Speed_Lim == 0) {
    3b84:	80 91 69 01 	lds	r24, 0x0169
    3b88:	88 23       	and	r24, r24
    3b8a:	81 f4       	brne	.+32     	; 0x3bac <Car_Init+0x8a>
		H_Lcd_Void_LCDGoTo(3, 12);
    3b8c:	83 e0       	ldi	r24, 0x03	; 3
    3b8e:	6c e0       	ldi	r22, 0x0C	; 12
    3b90:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("SP:");
    3b94:	80 ea       	ldi	r24, 0xA0	; 160
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(3, 16);
    3b9c:	83 e0       	ldi	r24, 0x03	; 3
    3b9e:	60 e1       	ldi	r22, 0x10	; 16
    3ba0:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("Off");
    3ba4:	84 ea       	ldi	r24, 0xA4	; 164
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
	}
	H_Lcd_Void_LCDGoTo(2, 16);
    3bac:	82 e0       	ldi	r24, 0x02	; 2
    3bae:	60 e1       	ldi	r22, 0x10	; 16
    3bb0:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteNumber(0);
    3bb4:	60 e0       	ldi	r22, 0x00	; 0
    3bb6:	70 e0       	ldi	r23, 0x00	; 0
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>

	M_DIO_Void_SetPinDirection(RELAY_PIN, OUTPUT);
    3bc0:	85 e2       	ldi	r24, 0x25	; 37
    3bc2:	61 e0       	ldi	r22, 0x01	; 1
    3bc4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <M_DIO_Void_SetPinDirection>
//    	 H_Lcd_Void_LCDWriteString("off");
//
//
//    }

}
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	08 95       	ret

00003bce <Breake_on_off>:
 Gas_Status = GAS_OFF;
 }

 }
 */
u8 Breake_on_off() {
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <Breake_on_off+0x6>
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62

	u8 flag = 0;
    3bd8:	1a 82       	std	Y+2, r1	; 0x02
	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    3bda:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    3bde:	89 83       	std	Y+1, r24	; 0x01
	if (charachter == '2') {
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	82 33       	cpi	r24, 0x32	; 50
    3be4:	41 f4       	brne	.+16     	; 0x3bf6 <Breake_on_off+0x28>
		H_LED_Void_LedOn(LED_RED);
    3be6:	84 e0       	ldi	r24, 0x04	; 4
    3be8:	0e 94 20 13 	call	0x2640	; 0x2640 <H_LED_Void_LedOn>
		DM_flag = 0;
    3bec:	10 92 77 01 	sts	0x0177, r1

		flag = 1;
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	8a 83       	std	Y+2, r24	; 0x02
    3bf4:	06 c0       	rjmp	.+12     	; 0x3c02 <Breake_on_off+0x34>
	} else if (charachter == KEYPAD_RELEASED)
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	81 30       	cpi	r24, 0x01	; 1
    3bfa:	19 f4       	brne	.+6      	; 0x3c02 <Breake_on_off+0x34>

		H_LED_Void_LedOff(LED_RED);
    3bfc:	84 e0       	ldi	r24, 0x04	; 4
    3bfe:	0e 94 60 13 	call	0x26c0	; 0x26c0 <H_LED_Void_LedOff>
	return flag;
    3c02:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	cf 91       	pop	r28
    3c0a:	df 91       	pop	r29
    3c0c:	08 95       	ret

00003c0e <CCS_state>:

u8 x_flag = 0;

void CCS_state() {
    3c0e:	df 93       	push	r29
    3c10:	cf 93       	push	r28
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	ab 97       	sbiw	r28, 0x2b	; 43
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    3c22:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    3c26:	8b a7       	std	Y+43, r24	; 0x2b

	//if (RND_Status == RND_D)

	if (charachter == '3' && RND_Status == RND_D && x_flag == 1) {
    3c28:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c2a:	83 33       	cpi	r24, 0x33	; 51
    3c2c:	09 f0       	breq	.+2      	; 0x3c30 <CCS_state+0x22>
    3c2e:	a0 c0       	rjmp	.+320    	; 0x3d70 <CCS_state+0x162>
    3c30:	80 91 36 01 	lds	r24, 0x0136
    3c34:	88 23       	and	r24, r24
    3c36:	09 f0       	breq	.+2      	; 0x3c3a <CCS_state+0x2c>
    3c38:	9b c0       	rjmp	.+310    	; 0x3d70 <CCS_state+0x162>
    3c3a:	80 91 6f 01 	lds	r24, 0x016F
    3c3e:	81 30       	cpi	r24, 0x01	; 1
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <CCS_state+0x36>
    3c42:	96 c0       	rjmp	.+300    	; 0x3d70 <CCS_state+0x162>
		// H_Lcd_Void_LCDGoTo(3,7);
		//	H_Lcd_Void_LCDWriteString("   ");
		DM_flag = 0;
    3c44:	10 92 77 01 	sts	0x0177, r1
		H_LED_Void_LedOn(LED_GRN);
    3c48:	83 e0       	ldi	r24, 0x03	; 3
    3c4a:	0e 94 20 13 	call	0x2640	; 0x2640 <H_LED_Void_LedOn>
		CCS_Status = CCS_ON;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	80 93 62 01 	sts	0x0162, r24
		H_Lcd_Void_LCDGoTo(2, 7);
    3c54:	82 e0       	ldi	r24, 0x02	; 2
    3c56:	67 e0       	ldi	r22, 0x07	; 7
    3c58:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("   ");
    3c5c:	88 ea       	ldi	r24, 0xA8	; 168
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(2, 7);
    3c64:	82 e0       	ldi	r24, 0x02	; 2
    3c66:	67 e0       	ldi	r22, 0x07	; 7
    3c68:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("on");
    3c6c:	8c ea       	ldi	r24, 0xAC	; 172
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		x_flag = 2;
    3c74:	82 e0       	ldi	r24, 0x02	; 2
    3c76:	80 93 6f 01 	sts	0x016F, r24
		M_DIO_Void_SetPinValue(BUZZER_PIN, HIGH);
    3c7a:	84 e2       	ldi	r24, 0x24	; 36
    3c7c:	61 e0       	ldi	r22, 0x01	; 1
    3c7e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	a0 ea       	ldi	r26, 0xA0	; 160
    3c88:	b2 e4       	ldi	r27, 0x42	; 66
    3c8a:	8f a3       	std	Y+39, r24	; 0x27
    3c8c:	98 a7       	std	Y+40, r25	; 0x28
    3c8e:	a9 a7       	std	Y+41, r26	; 0x29
    3c90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c92:	6f a1       	ldd	r22, Y+39	; 0x27
    3c94:	78 a5       	ldd	r23, Y+40	; 0x28
    3c96:	89 a5       	ldd	r24, Y+41	; 0x29
    3c98:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	4a e7       	ldi	r20, 0x7A	; 122
    3ca0:	55 e4       	ldi	r21, 0x45	; 69
    3ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	8b a3       	std	Y+35, r24	; 0x23
    3cac:	9c a3       	std	Y+36, r25	; 0x24
    3cae:	ad a3       	std	Y+37, r26	; 0x25
    3cb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    3cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    3cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    3cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e8       	ldi	r20, 0x80	; 128
    3cc0:	5f e3       	ldi	r21, 0x3F	; 63
    3cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cc6:	88 23       	and	r24, r24
    3cc8:	2c f4       	brge	.+10     	; 0x3cd4 <CCS_state+0xc6>
		__ticks = 1;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	9a a3       	std	Y+34, r25	; 0x22
    3cd0:	89 a3       	std	Y+33, r24	; 0x21
    3cd2:	3f c0       	rjmp	.+126    	; 0x3d52 <CCS_state+0x144>
	else if (__tmp > 65535)
    3cd4:	6b a1       	ldd	r22, Y+35	; 0x23
    3cd6:	7c a1       	ldd	r23, Y+36	; 0x24
    3cd8:	8d a1       	ldd	r24, Y+37	; 0x25
    3cda:	9e a1       	ldd	r25, Y+38	; 0x26
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	3f ef       	ldi	r19, 0xFF	; 255
    3ce0:	4f e7       	ldi	r20, 0x7F	; 127
    3ce2:	57 e4       	ldi	r21, 0x47	; 71
    3ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ce8:	18 16       	cp	r1, r24
    3cea:	4c f5       	brge	.+82     	; 0x3d3e <CCS_state+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cec:	6f a1       	ldd	r22, Y+39	; 0x27
    3cee:	78 a5       	ldd	r23, Y+40	; 0x28
    3cf0:	89 a5       	ldd	r24, Y+41	; 0x29
    3cf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e2       	ldi	r20, 0x20	; 32
    3cfa:	51 e4       	ldi	r21, 0x41	; 65
    3cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	bc 01       	movw	r22, r24
    3d06:	cd 01       	movw	r24, r26
    3d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	9a a3       	std	Y+34, r25	; 0x22
    3d12:	89 a3       	std	Y+33, r24	; 0x21
    3d14:	0f c0       	rjmp	.+30     	; 0x3d34 <CCS_state+0x126>
    3d16:	80 e9       	ldi	r24, 0x90	; 144
    3d18:	91 e0       	ldi	r25, 0x01	; 1
    3d1a:	98 a3       	std	Y+32, r25	; 0x20
    3d1c:	8f 8f       	std	Y+31, r24	; 0x1f
    3d1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d20:	98 a1       	ldd	r25, Y+32	; 0x20
    3d22:	01 97       	sbiw	r24, 0x01	; 1
    3d24:	f1 f7       	brne	.-4      	; 0x3d22 <CCS_state+0x114>
    3d26:	98 a3       	std	Y+32, r25	; 0x20
    3d28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	9a a3       	std	Y+34, r25	; 0x22
    3d32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d34:	89 a1       	ldd	r24, Y+33	; 0x21
    3d36:	9a a1       	ldd	r25, Y+34	; 0x22
    3d38:	00 97       	sbiw	r24, 0x00	; 0
    3d3a:	69 f7       	brne	.-38     	; 0x3d16 <CCS_state+0x108>
    3d3c:	14 c0       	rjmp	.+40     	; 0x3d66 <CCS_state+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d40:	7c a1       	ldd	r23, Y+36	; 0x24
    3d42:	8d a1       	ldd	r24, Y+37	; 0x25
    3d44:	9e a1       	ldd	r25, Y+38	; 0x26
    3d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	9a a3       	std	Y+34, r25	; 0x22
    3d50:	89 a3       	std	Y+33, r24	; 0x21
    3d52:	89 a1       	ldd	r24, Y+33	; 0x21
    3d54:	9a a1       	ldd	r25, Y+34	; 0x22
    3d56:	9e 8f       	std	Y+30, r25	; 0x1e
    3d58:	8d 8f       	std	Y+29, r24	; 0x1d
    3d5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	f1 f7       	brne	.-4      	; 0x3d5e <CCS_state+0x150>
    3d62:	9e 8f       	std	Y+30, r25	; 0x1e
    3d64:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(80);
		M_DIO_Void_SetPinValue(BUZZER_PIN, LOW);
    3d66:	84 e2       	ldi	r24, 0x24	; 36
    3d68:	60 e0       	ldi	r22, 0x00	; 0
    3d6a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    3d6e:	33 c1       	rjmp	.+614    	; 0x3fd6 <CCS_state+0x3c8>
	} else if ((charachter == '3' && CCS_Status == CCS_ON && x_flag == 2)
    3d70:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d72:	83 33       	cpi	r24, 0x33	; 51
    3d74:	41 f4       	brne	.+16     	; 0x3d86 <CCS_state+0x178>
    3d76:	80 91 62 01 	lds	r24, 0x0162
    3d7a:	81 30       	cpi	r24, 0x01	; 1
    3d7c:	21 f4       	brne	.+8      	; 0x3d86 <CCS_state+0x178>
    3d7e:	80 91 6f 01 	lds	r24, 0x016F
    3d82:	82 30       	cpi	r24, 0x02	; 2
    3d84:	69 f0       	breq	.+26     	; 0x3da0 <CCS_state+0x192>
    3d86:	80 91 64 01 	lds	r24, 0x0164
    3d8a:	81 30       	cpi	r24, 0x01	; 1
    3d8c:	49 f0       	breq	.+18     	; 0x3da0 <CCS_state+0x192>
    3d8e:	80 91 36 01 	lds	r24, 0x0136
    3d92:	85 30       	cpi	r24, 0x05	; 5
    3d94:	29 f0       	breq	.+10     	; 0x3da0 <CCS_state+0x192>
    3d96:	80 91 36 01 	lds	r24, 0x0136
    3d9a:	82 30       	cpi	r24, 0x02	; 2
    3d9c:	09 f0       	breq	.+2      	; 0x3da0 <CCS_state+0x192>
    3d9e:	0c c1       	rjmp	.+536    	; 0x3fb8 <CCS_state+0x3aa>
			|| Gas_Status
					== 1|| RND_Status == RND_DEFAULT || RND_Status == RND_N) {
		if (charachter == '3') {
    3da0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3da2:	83 33       	cpi	r24, 0x33	; 51
    3da4:	09 f0       	breq	.+2      	; 0x3da8 <CCS_state+0x19a>
    3da6:	81 c0       	rjmp	.+258    	; 0x3eaa <CCS_state+0x29c>
			if (RND_Status == RND_DEFAULT || RND_Status == RND_N)
    3da8:	80 91 36 01 	lds	r24, 0x0136
    3dac:	85 30       	cpi	r24, 0x05	; 5
    3dae:	21 f0       	breq	.+8      	; 0x3db8 <CCS_state+0x1aa>
    3db0:	80 91 36 01 	lds	r24, 0x0136
    3db4:	82 30       	cpi	r24, 0x02	; 2
    3db6:	19 f4       	brne	.+6      	; 0x3dbe <CCS_state+0x1b0>
				H_LED_Void_LedOn(LED_YEL);
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	0e 94 20 13 	call	0x2640	; 0x2640 <H_LED_Void_LedOn>

			M_DIO_Void_SetPinValue(BUZZER_PIN, HIGH);
    3dbe:	84 e2       	ldi	r24, 0x24	; 36
    3dc0:	61 e0       	ldi	r22, 0x01	; 1
    3dc2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	a8 e4       	ldi	r26, 0x48	; 72
    3dcc:	b2 e4       	ldi	r27, 0x42	; 66
    3dce:	89 8f       	std	Y+25, r24	; 0x19
    3dd0:	9a 8f       	std	Y+26, r25	; 0x1a
    3dd2:	ab 8f       	std	Y+27, r26	; 0x1b
    3dd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	4a e7       	ldi	r20, 0x7A	; 122
    3de4:	55 e4       	ldi	r21, 0x45	; 69
    3de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	8d 8b       	std	Y+21, r24	; 0x15
    3df0:	9e 8b       	std	Y+22, r25	; 0x16
    3df2:	af 8b       	std	Y+23, r26	; 0x17
    3df4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3df6:	6d 89       	ldd	r22, Y+21	; 0x15
    3df8:	7e 89       	ldd	r23, Y+22	; 0x16
    3dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    3dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e8       	ldi	r20, 0x80	; 128
    3e04:	5f e3       	ldi	r21, 0x3F	; 63
    3e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e0a:	88 23       	and	r24, r24
    3e0c:	2c f4       	brge	.+10     	; 0x3e18 <CCS_state+0x20a>
		__ticks = 1;
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	9c 8b       	std	Y+20, r25	; 0x14
    3e14:	8b 8b       	std	Y+19, r24	; 0x13
    3e16:	3f c0       	rjmp	.+126    	; 0x3e96 <CCS_state+0x288>
	else if (__tmp > 65535)
    3e18:	6d 89       	ldd	r22, Y+21	; 0x15
    3e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	3f ef       	ldi	r19, 0xFF	; 255
    3e24:	4f e7       	ldi	r20, 0x7F	; 127
    3e26:	57 e4       	ldi	r21, 0x47	; 71
    3e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e2c:	18 16       	cp	r1, r24
    3e2e:	4c f5       	brge	.+82     	; 0x3e82 <CCS_state+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e30:	69 8d       	ldd	r22, Y+25	; 0x19
    3e32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e2       	ldi	r20, 0x20	; 32
    3e3e:	51 e4       	ldi	r21, 0x41	; 65
    3e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	9c 8b       	std	Y+20, r25	; 0x14
    3e56:	8b 8b       	std	Y+19, r24	; 0x13
    3e58:	0f c0       	rjmp	.+30     	; 0x3e78 <CCS_state+0x26a>
    3e5a:	80 e9       	ldi	r24, 0x90	; 144
    3e5c:	91 e0       	ldi	r25, 0x01	; 1
    3e5e:	9a 8b       	std	Y+18, r25	; 0x12
    3e60:	89 8b       	std	Y+17, r24	; 0x11
    3e62:	89 89       	ldd	r24, Y+17	; 0x11
    3e64:	9a 89       	ldd	r25, Y+18	; 0x12
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <CCS_state+0x258>
    3e6a:	9a 8b       	std	Y+18, r25	; 0x12
    3e6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e70:	9c 89       	ldd	r25, Y+20	; 0x14
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	9c 8b       	std	Y+20, r25	; 0x14
    3e76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e78:	8b 89       	ldd	r24, Y+19	; 0x13
    3e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e7c:	00 97       	sbiw	r24, 0x00	; 0
    3e7e:	69 f7       	brne	.-38     	; 0x3e5a <CCS_state+0x24c>
    3e80:	14 c0       	rjmp	.+40     	; 0x3eaa <CCS_state+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e82:	6d 89       	ldd	r22, Y+21	; 0x15
    3e84:	7e 89       	ldd	r23, Y+22	; 0x16
    3e86:	8f 89       	ldd	r24, Y+23	; 0x17
    3e88:	98 8d       	ldd	r25, Y+24	; 0x18
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	9c 8b       	std	Y+20, r25	; 0x14
    3e94:	8b 8b       	std	Y+19, r24	; 0x13
    3e96:	8b 89       	ldd	r24, Y+19	; 0x13
    3e98:	9c 89       	ldd	r25, Y+20	; 0x14
    3e9a:	98 8b       	std	Y+16, r25	; 0x10
    3e9c:	8f 87       	std	Y+15, r24	; 0x0f
    3e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea0:	98 89       	ldd	r25, Y+16	; 0x10
    3ea2:	01 97       	sbiw	r24, 0x01	; 1
    3ea4:	f1 f7       	brne	.-4      	; 0x3ea2 <CCS_state+0x294>
    3ea6:	98 8b       	std	Y+16, r25	; 0x10
    3ea8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);

		}
		// H_LED_Void_LedOff(LED_YEL);
		H_LED_Void_LedOff(LED_GRN);
    3eaa:	83 e0       	ldi	r24, 0x03	; 3
    3eac:	0e 94 60 13 	call	0x26c0	; 0x26c0 <H_LED_Void_LedOff>
		x_flag = 1;
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	80 93 6f 01 	sts	0x016F, r24
		CCS_Status = 0;
    3eb6:	10 92 62 01 	sts	0x0162, r1
		// H_Lcd_Void_LCDGoTo(2,7);
		// H_Lcd_Void_LCDWriteString("   ");
		H_Lcd_Void_LCDGoTo(2, 7);
    3eba:	82 e0       	ldi	r24, 0x02	; 2
    3ebc:	67 e0       	ldi	r22, 0x07	; 7
    3ebe:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("off");
    3ec2:	8f ea       	ldi	r24, 0xAF	; 175
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	a8 e4       	ldi	r26, 0x48	; 72
    3ed0:	b2 e4       	ldi	r27, 0x42	; 66
    3ed2:	8b 87       	std	Y+11, r24	; 0x0b
    3ed4:	9c 87       	std	Y+12, r25	; 0x0c
    3ed6:	ad 87       	std	Y+13, r26	; 0x0d
    3ed8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	4a e7       	ldi	r20, 0x7A	; 122
    3ee8:	55 e4       	ldi	r21, 0x45	; 69
    3eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	8f 83       	std	Y+7, r24	; 0x07
    3ef4:	98 87       	std	Y+8, r25	; 0x08
    3ef6:	a9 87       	std	Y+9, r26	; 0x09
    3ef8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3efa:	6f 81       	ldd	r22, Y+7	; 0x07
    3efc:	78 85       	ldd	r23, Y+8	; 0x08
    3efe:	89 85       	ldd	r24, Y+9	; 0x09
    3f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e8       	ldi	r20, 0x80	; 128
    3f08:	5f e3       	ldi	r21, 0x3F	; 63
    3f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f0e:	88 23       	and	r24, r24
    3f10:	2c f4       	brge	.+10     	; 0x3f1c <CCS_state+0x30e>
		__ticks = 1;
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	9e 83       	std	Y+6, r25	; 0x06
    3f18:	8d 83       	std	Y+5, r24	; 0x05
    3f1a:	3f c0       	rjmp	.+126    	; 0x3f9a <CCS_state+0x38c>
	else if (__tmp > 65535)
    3f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f1e:	78 85       	ldd	r23, Y+8	; 0x08
    3f20:	89 85       	ldd	r24, Y+9	; 0x09
    3f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	3f ef       	ldi	r19, 0xFF	; 255
    3f28:	4f e7       	ldi	r20, 0x7F	; 127
    3f2a:	57 e4       	ldi	r21, 0x47	; 71
    3f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f30:	18 16       	cp	r1, r24
    3f32:	4c f5       	brge	.+82     	; 0x3f86 <CCS_state+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e2       	ldi	r20, 0x20	; 32
    3f42:	51 e4       	ldi	r21, 0x41	; 65
    3f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	cd 01       	movw	r24, r26
    3f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	9e 83       	std	Y+6, r25	; 0x06
    3f5a:	8d 83       	std	Y+5, r24	; 0x05
    3f5c:	0f c0       	rjmp	.+30     	; 0x3f7c <CCS_state+0x36e>
    3f5e:	80 e9       	ldi	r24, 0x90	; 144
    3f60:	91 e0       	ldi	r25, 0x01	; 1
    3f62:	9c 83       	std	Y+4, r25	; 0x04
    3f64:	8b 83       	std	Y+3, r24	; 0x03
    3f66:	8b 81       	ldd	r24, Y+3	; 0x03
    3f68:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <CCS_state+0x35c>
    3f6e:	9c 83       	std	Y+4, r25	; 0x04
    3f70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	9e 81       	ldd	r25, Y+6	; 0x06
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	9e 83       	std	Y+6, r25	; 0x06
    3f7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f80:	00 97       	sbiw	r24, 0x00	; 0
    3f82:	69 f7       	brne	.-38     	; 0x3f5e <CCS_state+0x350>
    3f84:	14 c0       	rjmp	.+40     	; 0x3fae <CCS_state+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f86:	6f 81       	ldd	r22, Y+7	; 0x07
    3f88:	78 85       	ldd	r23, Y+8	; 0x08
    3f8a:	89 85       	ldd	r24, Y+9	; 0x09
    3f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	9e 83       	std	Y+6, r25	; 0x06
    3f98:	8d 83       	std	Y+5, r24	; 0x05
    3f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9e:	9a 83       	std	Y+2, r25	; 0x02
    3fa0:	89 83       	std	Y+1, r24	; 0x01
    3fa2:	89 81       	ldd	r24, Y+1	; 0x01
    3fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <CCS_state+0x398>
    3faa:	9a 83       	std	Y+2, r25	; 0x02
    3fac:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
		M_DIO_Void_SetPinValue(BUZZER_PIN, LOW);
    3fae:	84 e2       	ldi	r24, 0x24	; 36
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    3fb6:	0f c0       	rjmp	.+30     	; 0x3fd6 <CCS_state+0x3c8>

	} else if (x_flag == 0) {
    3fb8:	80 91 6f 01 	lds	r24, 0x016F
    3fbc:	88 23       	and	r24, r24
    3fbe:	59 f4       	brne	.+22     	; 0x3fd6 <CCS_state+0x3c8>
		H_Lcd_Void_LCDGoTo(2, 7);
    3fc0:	82 e0       	ldi	r24, 0x02	; 2
    3fc2:	67 e0       	ldi	r22, 0x07	; 7
    3fc4:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("off");
    3fc8:	8f ea       	ldi	r24, 0xAF	; 175
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		x_flag = 1;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	80 93 6f 01 	sts	0x016F, r24

	}

}
    3fd6:	ab 96       	adiw	r28, 0x2b	; 43
    3fd8:	0f b6       	in	r0, 0x3f	; 63
    3fda:	f8 94       	cli
    3fdc:	de bf       	out	0x3e, r29	; 62
    3fde:	0f be       	out	0x3f, r0	; 63
    3fe0:	cd bf       	out	0x3d, r28	; 61
    3fe2:	cf 91       	pop	r28
    3fe4:	df 91       	pop	r29
    3fe6:	08 95       	ret

00003fe8 <Gear_state>:

void Gear_state() {
    3fe8:	df 93       	push	r29
    3fea:	cf 93       	push	r28
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
    3ff0:	aa 97       	sbiw	r28, 0x2a	; 42
    3ff2:	0f b6       	in	r0, 0x3f	; 63
    3ff4:	f8 94       	cli
    3ff6:	de bf       	out	0x3e, r29	; 62
    3ff8:	0f be       	out	0x3f, r0	; 63
    3ffa:	cd bf       	out	0x3d, r28	; 61

	if (RND_Status == RND_DEFAULT) {
    3ffc:	80 91 36 01 	lds	r24, 0x0136
    4000:	85 30       	cpi	r24, 0x05	; 5
    4002:	09 f0       	breq	.+2      	; 0x4006 <Gear_state+0x1e>
    4004:	8c c0       	rjmp	.+280    	; 0x411e <Gear_state+0x136>

		RND_Status = RND_D;
    4006:	10 92 36 01 	sts	0x0136, r1
		H_Lcd_Void_LCDGoTo(3, 7);
    400a:	83 e0       	ldi	r24, 0x03	; 3
    400c:	67 e0       	ldi	r22, 0x07	; 7
    400e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("   ");
    4012:	88 ea       	ldi	r24, 0xA8	; 168
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(3, 7);
    401a:	83 e0       	ldi	r24, 0x03	; 3
    401c:	67 e0       	ldi	r22, 0x07	; 7
    401e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteCharacter('D');
    4022:	84 e4       	ldi	r24, 0x44	; 68
    4024:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
		M_DIO_Void_SetPinValue(BUZZER_PIN, HIGH);
    4028:	84 e2       	ldi	r24, 0x24	; 36
    402a:	61 e0       	ldi	r22, 0x01	; 1
    402c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	a8 e4       	ldi	r26, 0x48	; 72
    4036:	b2 e4       	ldi	r27, 0x42	; 66
    4038:	8f a3       	std	Y+39, r24	; 0x27
    403a:	98 a7       	std	Y+40, r25	; 0x28
    403c:	a9 a7       	std	Y+41, r26	; 0x29
    403e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4040:	6f a1       	ldd	r22, Y+39	; 0x27
    4042:	78 a5       	ldd	r23, Y+40	; 0x28
    4044:	89 a5       	ldd	r24, Y+41	; 0x29
    4046:	9a a5       	ldd	r25, Y+42	; 0x2a
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	4a e7       	ldi	r20, 0x7A	; 122
    404e:	55 e4       	ldi	r21, 0x45	; 69
    4050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	8b a3       	std	Y+35, r24	; 0x23
    405a:	9c a3       	std	Y+36, r25	; 0x24
    405c:	ad a3       	std	Y+37, r26	; 0x25
    405e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4060:	6b a1       	ldd	r22, Y+35	; 0x23
    4062:	7c a1       	ldd	r23, Y+36	; 0x24
    4064:	8d a1       	ldd	r24, Y+37	; 0x25
    4066:	9e a1       	ldd	r25, Y+38	; 0x26
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e8       	ldi	r20, 0x80	; 128
    406e:	5f e3       	ldi	r21, 0x3F	; 63
    4070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4074:	88 23       	and	r24, r24
    4076:	2c f4       	brge	.+10     	; 0x4082 <Gear_state+0x9a>
		__ticks = 1;
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	9a a3       	std	Y+34, r25	; 0x22
    407e:	89 a3       	std	Y+33, r24	; 0x21
    4080:	3f c0       	rjmp	.+126    	; 0x4100 <Gear_state+0x118>
	else if (__tmp > 65535)
    4082:	6b a1       	ldd	r22, Y+35	; 0x23
    4084:	7c a1       	ldd	r23, Y+36	; 0x24
    4086:	8d a1       	ldd	r24, Y+37	; 0x25
    4088:	9e a1       	ldd	r25, Y+38	; 0x26
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	3f ef       	ldi	r19, 0xFF	; 255
    408e:	4f e7       	ldi	r20, 0x7F	; 127
    4090:	57 e4       	ldi	r21, 0x47	; 71
    4092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4096:	18 16       	cp	r1, r24
    4098:	4c f5       	brge	.+82     	; 0x40ec <Gear_state+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    409a:	6f a1       	ldd	r22, Y+39	; 0x27
    409c:	78 a5       	ldd	r23, Y+40	; 0x28
    409e:	89 a5       	ldd	r24, Y+41	; 0x29
    40a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e2       	ldi	r20, 0x20	; 32
    40a8:	51 e4       	ldi	r21, 0x41	; 65
    40aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	bc 01       	movw	r22, r24
    40b4:	cd 01       	movw	r24, r26
    40b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ba:	dc 01       	movw	r26, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	9a a3       	std	Y+34, r25	; 0x22
    40c0:	89 a3       	std	Y+33, r24	; 0x21
    40c2:	0f c0       	rjmp	.+30     	; 0x40e2 <Gear_state+0xfa>
    40c4:	80 e9       	ldi	r24, 0x90	; 144
    40c6:	91 e0       	ldi	r25, 0x01	; 1
    40c8:	98 a3       	std	Y+32, r25	; 0x20
    40ca:	8f 8f       	std	Y+31, r24	; 0x1f
    40cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40ce:	98 a1       	ldd	r25, Y+32	; 0x20
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	f1 f7       	brne	.-4      	; 0x40d0 <Gear_state+0xe8>
    40d4:	98 a3       	std	Y+32, r25	; 0x20
    40d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d8:	89 a1       	ldd	r24, Y+33	; 0x21
    40da:	9a a1       	ldd	r25, Y+34	; 0x22
    40dc:	01 97       	sbiw	r24, 0x01	; 1
    40de:	9a a3       	std	Y+34, r25	; 0x22
    40e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e2:	89 a1       	ldd	r24, Y+33	; 0x21
    40e4:	9a a1       	ldd	r25, Y+34	; 0x22
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	69 f7       	brne	.-38     	; 0x40c4 <Gear_state+0xdc>
    40ea:	14 c0       	rjmp	.+40     	; 0x4114 <Gear_state+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ec:	6b a1       	ldd	r22, Y+35	; 0x23
    40ee:	7c a1       	ldd	r23, Y+36	; 0x24
    40f0:	8d a1       	ldd	r24, Y+37	; 0x25
    40f2:	9e a1       	ldd	r25, Y+38	; 0x26
    40f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f8:	dc 01       	movw	r26, r24
    40fa:	cb 01       	movw	r24, r22
    40fc:	9a a3       	std	Y+34, r25	; 0x22
    40fe:	89 a3       	std	Y+33, r24	; 0x21
    4100:	89 a1       	ldd	r24, Y+33	; 0x21
    4102:	9a a1       	ldd	r25, Y+34	; 0x22
    4104:	9e 8f       	std	Y+30, r25	; 0x1e
    4106:	8d 8f       	std	Y+29, r24	; 0x1d
    4108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    410a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    410c:	01 97       	sbiw	r24, 0x01	; 1
    410e:	f1 f7       	brne	.-4      	; 0x410c <Gear_state+0x124>
    4110:	9e 8f       	std	Y+30, r25	; 0x1e
    4112:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		M_DIO_Void_SetPinValue(BUZZER_PIN, LOW);
    4114:	84 e2       	ldi	r24, 0x24	; 36
    4116:	60 e0       	ldi	r22, 0x00	; 0
    4118:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    411c:	27 c1       	rjmp	.+590    	; 0x436c <Gear_state+0x384>
	} else if (RND_Status == RND_D) {
    411e:	80 91 36 01 	lds	r24, 0x0136
    4122:	88 23       	and	r24, r24
    4124:	09 f0       	breq	.+2      	; 0x4128 <Gear_state+0x140>
    4126:	8f c0       	rjmp	.+286    	; 0x4246 <Gear_state+0x25e>
		DM_flag = 0;
    4128:	10 92 77 01 	sts	0x0177, r1
		RND_Status = RND_R;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	80 93 36 01 	sts	0x0136, r24
		H_Lcd_Void_LCDGoTo(3, 7);
    4132:	83 e0       	ldi	r24, 0x03	; 3
    4134:	67 e0       	ldi	r22, 0x07	; 7
    4136:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("   ");
    413a:	88 ea       	ldi	r24, 0xA8	; 168
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(3, 7);
    4142:	83 e0       	ldi	r24, 0x03	; 3
    4144:	67 e0       	ldi	r22, 0x07	; 7
    4146:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteCharacter('R');
    414a:	82 e5       	ldi	r24, 0x52	; 82
    414c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
		M_DIO_Void_SetPinValue(BUZZER_PIN, HIGH);
    4150:	84 e2       	ldi	r24, 0x24	; 36
    4152:	61 e0       	ldi	r22, 0x01	; 1
    4154:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	a8 e4       	ldi	r26, 0x48	; 72
    415e:	b2 e4       	ldi	r27, 0x42	; 66
    4160:	89 8f       	std	Y+25, r24	; 0x19
    4162:	9a 8f       	std	Y+26, r25	; 0x1a
    4164:	ab 8f       	std	Y+27, r26	; 0x1b
    4166:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4168:	69 8d       	ldd	r22, Y+25	; 0x19
    416a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    416c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    416e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	4a e7       	ldi	r20, 0x7A	; 122
    4176:	55 e4       	ldi	r21, 0x45	; 69
    4178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	8d 8b       	std	Y+21, r24	; 0x15
    4182:	9e 8b       	std	Y+22, r25	; 0x16
    4184:	af 8b       	std	Y+23, r26	; 0x17
    4186:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4188:	6d 89       	ldd	r22, Y+21	; 0x15
    418a:	7e 89       	ldd	r23, Y+22	; 0x16
    418c:	8f 89       	ldd	r24, Y+23	; 0x17
    418e:	98 8d       	ldd	r25, Y+24	; 0x18
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	40 e8       	ldi	r20, 0x80	; 128
    4196:	5f e3       	ldi	r21, 0x3F	; 63
    4198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    419c:	88 23       	and	r24, r24
    419e:	2c f4       	brge	.+10     	; 0x41aa <Gear_state+0x1c2>
		__ticks = 1;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9c 8b       	std	Y+20, r25	; 0x14
    41a6:	8b 8b       	std	Y+19, r24	; 0x13
    41a8:	3f c0       	rjmp	.+126    	; 0x4228 <Gear_state+0x240>
	else if (__tmp > 65535)
    41aa:	6d 89       	ldd	r22, Y+21	; 0x15
    41ac:	7e 89       	ldd	r23, Y+22	; 0x16
    41ae:	8f 89       	ldd	r24, Y+23	; 0x17
    41b0:	98 8d       	ldd	r25, Y+24	; 0x18
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	3f ef       	ldi	r19, 0xFF	; 255
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	57 e4       	ldi	r21, 0x47	; 71
    41ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	4c f5       	brge	.+82     	; 0x4214 <Gear_state+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c2:	69 8d       	ldd	r22, Y+25	; 0x19
    41c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e2       	ldi	r20, 0x20	; 32
    41d0:	51 e4       	ldi	r21, 0x41	; 65
    41d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	bc 01       	movw	r22, r24
    41dc:	cd 01       	movw	r24, r26
    41de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	9c 8b       	std	Y+20, r25	; 0x14
    41e8:	8b 8b       	std	Y+19, r24	; 0x13
    41ea:	0f c0       	rjmp	.+30     	; 0x420a <Gear_state+0x222>
    41ec:	80 e9       	ldi	r24, 0x90	; 144
    41ee:	91 e0       	ldi	r25, 0x01	; 1
    41f0:	9a 8b       	std	Y+18, r25	; 0x12
    41f2:	89 8b       	std	Y+17, r24	; 0x11
    41f4:	89 89       	ldd	r24, Y+17	; 0x11
    41f6:	9a 89       	ldd	r25, Y+18	; 0x12
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <Gear_state+0x210>
    41fc:	9a 8b       	std	Y+18, r25	; 0x12
    41fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4200:	8b 89       	ldd	r24, Y+19	; 0x13
    4202:	9c 89       	ldd	r25, Y+20	; 0x14
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	9c 8b       	std	Y+20, r25	; 0x14
    4208:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    420a:	8b 89       	ldd	r24, Y+19	; 0x13
    420c:	9c 89       	ldd	r25, Y+20	; 0x14
    420e:	00 97       	sbiw	r24, 0x00	; 0
    4210:	69 f7       	brne	.-38     	; 0x41ec <Gear_state+0x204>
    4212:	14 c0       	rjmp	.+40     	; 0x423c <Gear_state+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4214:	6d 89       	ldd	r22, Y+21	; 0x15
    4216:	7e 89       	ldd	r23, Y+22	; 0x16
    4218:	8f 89       	ldd	r24, Y+23	; 0x17
    421a:	98 8d       	ldd	r25, Y+24	; 0x18
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	9c 8b       	std	Y+20, r25	; 0x14
    4226:	8b 8b       	std	Y+19, r24	; 0x13
    4228:	8b 89       	ldd	r24, Y+19	; 0x13
    422a:	9c 89       	ldd	r25, Y+20	; 0x14
    422c:	98 8b       	std	Y+16, r25	; 0x10
    422e:	8f 87       	std	Y+15, r24	; 0x0f
    4230:	8f 85       	ldd	r24, Y+15	; 0x0f
    4232:	98 89       	ldd	r25, Y+16	; 0x10
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <Gear_state+0x24c>
    4238:	98 8b       	std	Y+16, r25	; 0x10
    423a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		M_DIO_Void_SetPinValue(BUZZER_PIN, LOW);
    423c:	84 e2       	ldi	r24, 0x24	; 36
    423e:	60 e0       	ldi	r22, 0x00	; 0
    4240:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    4244:	93 c0       	rjmp	.+294    	; 0x436c <Gear_state+0x384>
	} else if (RND_Status == RND_R) {
    4246:	80 91 36 01 	lds	r24, 0x0136
    424a:	81 30       	cpi	r24, 0x01	; 1
    424c:	09 f0       	breq	.+2      	; 0x4250 <Gear_state+0x268>
    424e:	8e c0       	rjmp	.+284    	; 0x436c <Gear_state+0x384>
		DM_flag = 0;
    4250:	10 92 77 01 	sts	0x0177, r1
		RND_Status = RND_DEFAULT;
    4254:	85 e0       	ldi	r24, 0x05	; 5
    4256:	80 93 36 01 	sts	0x0136, r24
		H_Lcd_Void_LCDGoTo(3, 7);
    425a:	83 e0       	ldi	r24, 0x03	; 3
    425c:	67 e0       	ldi	r22, 0x07	; 7
    425e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("   ");
    4262:	88 ea       	ldi	r24, 0xA8	; 168
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(3, 7);
    426a:	83 e0       	ldi	r24, 0x03	; 3
    426c:	67 e0       	ldi	r22, 0x07	; 7
    426e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteCharacter('N');
    4272:	8e e4       	ldi	r24, 0x4E	; 78
    4274:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
		M_DIO_Void_SetPinValue(BUZZER_PIN, HIGH);
    4278:	84 e2       	ldi	r24, 0x24	; 36
    427a:	61 e0       	ldi	r22, 0x01	; 1
    427c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	a8 e4       	ldi	r26, 0x48	; 72
    4286:	b2 e4       	ldi	r27, 0x42	; 66
    4288:	8b 87       	std	Y+11, r24	; 0x0b
    428a:	9c 87       	std	Y+12, r25	; 0x0c
    428c:	ad 87       	std	Y+13, r26	; 0x0d
    428e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4290:	6b 85       	ldd	r22, Y+11	; 0x0b
    4292:	7c 85       	ldd	r23, Y+12	; 0x0c
    4294:	8d 85       	ldd	r24, Y+13	; 0x0d
    4296:	9e 85       	ldd	r25, Y+14	; 0x0e
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	4a e7       	ldi	r20, 0x7A	; 122
    429e:	55 e4       	ldi	r21, 0x45	; 69
    42a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	8f 83       	std	Y+7, r24	; 0x07
    42aa:	98 87       	std	Y+8, r25	; 0x08
    42ac:	a9 87       	std	Y+9, r26	; 0x09
    42ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42b0:	6f 81       	ldd	r22, Y+7	; 0x07
    42b2:	78 85       	ldd	r23, Y+8	; 0x08
    42b4:	89 85       	ldd	r24, Y+9	; 0x09
    42b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e8       	ldi	r20, 0x80	; 128
    42be:	5f e3       	ldi	r21, 0x3F	; 63
    42c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42c4:	88 23       	and	r24, r24
    42c6:	2c f4       	brge	.+10     	; 0x42d2 <Gear_state+0x2ea>
		__ticks = 1;
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	9e 83       	std	Y+6, r25	; 0x06
    42ce:	8d 83       	std	Y+5, r24	; 0x05
    42d0:	3f c0       	rjmp	.+126    	; 0x4350 <Gear_state+0x368>
	else if (__tmp > 65535)
    42d2:	6f 81       	ldd	r22, Y+7	; 0x07
    42d4:	78 85       	ldd	r23, Y+8	; 0x08
    42d6:	89 85       	ldd	r24, Y+9	; 0x09
    42d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	3f ef       	ldi	r19, 0xFF	; 255
    42de:	4f e7       	ldi	r20, 0x7F	; 127
    42e0:	57 e4       	ldi	r21, 0x47	; 71
    42e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42e6:	18 16       	cp	r1, r24
    42e8:	4c f5       	brge	.+82     	; 0x433c <Gear_state+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    42ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    42f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	40 e2       	ldi	r20, 0x20	; 32
    42f8:	51 e4       	ldi	r21, 0x41	; 65
    42fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fe:	dc 01       	movw	r26, r24
    4300:	cb 01       	movw	r24, r22
    4302:	bc 01       	movw	r22, r24
    4304:	cd 01       	movw	r24, r26
    4306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	9e 83       	std	Y+6, r25	; 0x06
    4310:	8d 83       	std	Y+5, r24	; 0x05
    4312:	0f c0       	rjmp	.+30     	; 0x4332 <Gear_state+0x34a>
    4314:	80 e9       	ldi	r24, 0x90	; 144
    4316:	91 e0       	ldi	r25, 0x01	; 1
    4318:	9c 83       	std	Y+4, r25	; 0x04
    431a:	8b 83       	std	Y+3, r24	; 0x03
    431c:	8b 81       	ldd	r24, Y+3	; 0x03
    431e:	9c 81       	ldd	r25, Y+4	; 0x04
    4320:	01 97       	sbiw	r24, 0x01	; 1
    4322:	f1 f7       	brne	.-4      	; 0x4320 <Gear_state+0x338>
    4324:	9c 83       	std	Y+4, r25	; 0x04
    4326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4328:	8d 81       	ldd	r24, Y+5	; 0x05
    432a:	9e 81       	ldd	r25, Y+6	; 0x06
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	9e 83       	std	Y+6, r25	; 0x06
    4330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4332:	8d 81       	ldd	r24, Y+5	; 0x05
    4334:	9e 81       	ldd	r25, Y+6	; 0x06
    4336:	00 97       	sbiw	r24, 0x00	; 0
    4338:	69 f7       	brne	.-38     	; 0x4314 <Gear_state+0x32c>
    433a:	14 c0       	rjmp	.+40     	; 0x4364 <Gear_state+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    433c:	6f 81       	ldd	r22, Y+7	; 0x07
    433e:	78 85       	ldd	r23, Y+8	; 0x08
    4340:	89 85       	ldd	r24, Y+9	; 0x09
    4342:	9a 85       	ldd	r25, Y+10	; 0x0a
    4344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	9e 83       	std	Y+6, r25	; 0x06
    434e:	8d 83       	std	Y+5, r24	; 0x05
    4350:	8d 81       	ldd	r24, Y+5	; 0x05
    4352:	9e 81       	ldd	r25, Y+6	; 0x06
    4354:	9a 83       	std	Y+2, r25	; 0x02
    4356:	89 83       	std	Y+1, r24	; 0x01
    4358:	89 81       	ldd	r24, Y+1	; 0x01
    435a:	9a 81       	ldd	r25, Y+2	; 0x02
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	f1 f7       	brne	.-4      	; 0x435c <Gear_state+0x374>
    4360:	9a 83       	std	Y+2, r25	; 0x02
    4362:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		M_DIO_Void_SetPinValue(BUZZER_PIN, LOW);
    4364:	84 e2       	ldi	r24, 0x24	; 36
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	0e 94 ba 0c 	call	0x1974	; 0x1974 <M_DIO_Void_SetPinValue>
	}
}
    436c:	aa 96       	adiw	r28, 0x2a	; 42
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	cf 91       	pop	r28
    437a:	df 91       	pop	r29
    437c:	08 95       	ret

0000437e <ADC_Mapping>:

u16 ADC_Mapping(void) {
    437e:	df 93       	push	r29
    4380:	cf 93       	push	r28
    4382:	00 d0       	rcall	.+0      	; 0x4384 <ADC_Mapping+0x6>
    4384:	0f 92       	push	r0
    4386:	cd b7       	in	r28, 0x3d	; 61
    4388:	de b7       	in	r29, 0x3e	; 62

	u16 adc_reading = M_ADC_U16_ADCRead(ADC_CHANNEL_0);
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	0e 94 3f 10 	call	0x207e	; 0x207e <M_ADC_U16_ADCRead>
    4390:	9b 83       	std	Y+3, r25	; 0x03
    4392:	8a 83       	std	Y+2, r24	; 0x02

	if (adc_reading > 300)
    4394:	8a 81       	ldd	r24, Y+2	; 0x02
    4396:	9b 81       	ldd	r25, Y+3	; 0x03
    4398:	21 e0       	ldi	r18, 0x01	; 1
    439a:	8d 32       	cpi	r24, 0x2D	; 45
    439c:	92 07       	cpc	r25, r18
    439e:	28 f0       	brcs	.+10     	; 0x43aa <ADC_Mapping+0x2c>
		adc_reading = 300;
    43a0:	8c e2       	ldi	r24, 0x2C	; 44
    43a2:	91 e0       	ldi	r25, 0x01	; 1
    43a4:	9b 83       	std	Y+3, r25	; 0x03
    43a6:	8a 83       	std	Y+2, r24	; 0x02
    43a8:	08 c0       	rjmp	.+16     	; 0x43ba <ADC_Mapping+0x3c>
	else if (adc_reading == 800)
    43aa:	8a 81       	ldd	r24, Y+2	; 0x02
    43ac:	9b 81       	ldd	r25, Y+3	; 0x03
    43ae:	43 e0       	ldi	r20, 0x03	; 3
    43b0:	80 32       	cpi	r24, 0x20	; 32
    43b2:	94 07       	cpc	r25, r20
    43b4:	11 f4       	brne	.+4      	; 0x43ba <ADC_Mapping+0x3c>
		adc_reading = 0;
    43b6:	1b 82       	std	Y+3, r1	; 0x03
    43b8:	1a 82       	std	Y+2, r1	; 0x02
	u8 adc_return = ((u32) (200 * adc_reading)) / 300; /* in Km */
    43ba:	2a 81       	ldd	r18, Y+2	; 0x02
    43bc:	3b 81       	ldd	r19, Y+3	; 0x03
    43be:	88 ec       	ldi	r24, 0xC8	; 200
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	ac 01       	movw	r20, r24
    43c4:	24 9f       	mul	r18, r20
    43c6:	c0 01       	movw	r24, r0
    43c8:	25 9f       	mul	r18, r21
    43ca:	90 0d       	add	r25, r0
    43cc:	34 9f       	mul	r19, r20
    43ce:	90 0d       	add	r25, r0
    43d0:	11 24       	eor	r1, r1
    43d2:	2c e2       	ldi	r18, 0x2C	; 44
    43d4:	31 e0       	ldi	r19, 0x01	; 1
    43d6:	b9 01       	movw	r22, r18
    43d8:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__udivmodhi4>
    43dc:	cb 01       	movw	r24, r22
    43de:	89 83       	std	Y+1, r24	; 0x01

	return adc_return;
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	88 2f       	mov	r24, r24
    43e4:	90 e0       	ldi	r25, 0x00	; 0

}
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <Gas_System>:
u8 clear_dis = 0;
void Gas_System(void) {
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
	distance = ADC_Mapping(); // return from the adc_mapping function
    43fa:	0e 94 bf 21 	call	0x437e	; 0x437e <ADC_Mapping>
    43fe:	80 93 6d 01 	sts	0x016D, r24
//    H_Lcd_Void_LCDGoTo(2,0);
//    H_Lcd_Void_LCDWriteString("Distance = ");

	if (RND_Status == RND_D) {
    4402:	80 91 36 01 	lds	r24, 0x0136
    4406:	88 23       	and	r24, r24
    4408:	09 f0       	breq	.+2      	; 0x440c <Gas_System+0x1a>
    440a:	6e c0       	rjmp	.+220    	; 0x44e8 <Gas_System+0xf6>
		DM_flag = 0;
    440c:	10 92 77 01 	sts	0x0177, r1
		if (distance > 180) {
    4410:	80 91 6d 01 	lds	r24, 0x016D
    4414:	85 3b       	cpi	r24, 0xB5	; 181
    4416:	20 f0       	brcs	.+8      	; 0x4420 <Gas_System+0x2e>
			distance = 200;
    4418:	88 ec       	ldi	r24, 0xC8	; 200
    441a:	80 93 6d 01 	sts	0x016D, r24
    441e:	4a c0       	rjmp	.+148    	; 0x44b4 <Gas_System+0xc2>

		} else if (distance >= 160) {
    4420:	80 91 6d 01 	lds	r24, 0x016D
    4424:	80 3a       	cpi	r24, 0xA0	; 160
    4426:	20 f0       	brcs	.+8      	; 0x4430 <Gas_System+0x3e>
			distance = 160;
    4428:	80 ea       	ldi	r24, 0xA0	; 160
    442a:	80 93 6d 01 	sts	0x016D, r24
    442e:	42 c0       	rjmp	.+132    	; 0x44b4 <Gas_System+0xc2>

		} else if (distance >= 140) {
    4430:	80 91 6d 01 	lds	r24, 0x016D
    4434:	8c 38       	cpi	r24, 0x8C	; 140
    4436:	20 f0       	brcs	.+8      	; 0x4440 <Gas_System+0x4e>
			distance = 140;
    4438:	8c e8       	ldi	r24, 0x8C	; 140
    443a:	80 93 6d 01 	sts	0x016D, r24
    443e:	3a c0       	rjmp	.+116    	; 0x44b4 <Gas_System+0xc2>
		} else if (distance >= 120) {
    4440:	80 91 6d 01 	lds	r24, 0x016D
    4444:	88 37       	cpi	r24, 0x78	; 120
    4446:	20 f0       	brcs	.+8      	; 0x4450 <Gas_System+0x5e>
			distance = 120;
    4448:	88 e7       	ldi	r24, 0x78	; 120
    444a:	80 93 6d 01 	sts	0x016D, r24
    444e:	32 c0       	rjmp	.+100    	; 0x44b4 <Gas_System+0xc2>
		} else if (distance >= 100) {
    4450:	80 91 6d 01 	lds	r24, 0x016D
    4454:	84 36       	cpi	r24, 0x64	; 100
    4456:	20 f0       	brcs	.+8      	; 0x4460 <Gas_System+0x6e>
			distance = 100;
    4458:	84 e6       	ldi	r24, 0x64	; 100
    445a:	80 93 6d 01 	sts	0x016D, r24
    445e:	2a c0       	rjmp	.+84     	; 0x44b4 <Gas_System+0xc2>
		} else if (distance >= 80) {
    4460:	80 91 6d 01 	lds	r24, 0x016D
    4464:	80 35       	cpi	r24, 0x50	; 80
    4466:	20 f0       	brcs	.+8      	; 0x4470 <Gas_System+0x7e>
			distance = 80;
    4468:	80 e5       	ldi	r24, 0x50	; 80
    446a:	80 93 6d 01 	sts	0x016D, r24
    446e:	22 c0       	rjmp	.+68     	; 0x44b4 <Gas_System+0xc2>
		} else if (distance >= 60) {
    4470:	80 91 6d 01 	lds	r24, 0x016D
    4474:	8c 33       	cpi	r24, 0x3C	; 60
    4476:	20 f0       	brcs	.+8      	; 0x4480 <Gas_System+0x8e>
			distance = 60;
    4478:	8c e3       	ldi	r24, 0x3C	; 60
    447a:	80 93 6d 01 	sts	0x016D, r24
    447e:	1a c0       	rjmp	.+52     	; 0x44b4 <Gas_System+0xc2>
		} else if (distance >= 40) {
    4480:	80 91 6d 01 	lds	r24, 0x016D
    4484:	88 32       	cpi	r24, 0x28	; 40
    4486:	20 f0       	brcs	.+8      	; 0x4490 <Gas_System+0x9e>
			distance = 40;
    4488:	88 e2       	ldi	r24, 0x28	; 40
    448a:	80 93 6d 01 	sts	0x016D, r24
    448e:	12 c0       	rjmp	.+36     	; 0x44b4 <Gas_System+0xc2>
		} else if (distance >= 20) {
    4490:	80 91 6d 01 	lds	r24, 0x016D
    4494:	84 31       	cpi	r24, 0x14	; 20
    4496:	20 f0       	brcs	.+8      	; 0x44a0 <Gas_System+0xae>
			distance = 20;
    4498:	84 e1       	ldi	r24, 0x14	; 20
    449a:	80 93 6d 01 	sts	0x016D, r24
    449e:	0a c0       	rjmp	.+20     	; 0x44b4 <Gas_System+0xc2>
		} else if (distance == 0 && distance < 20) {
    44a0:	80 91 6d 01 	lds	r24, 0x016D
    44a4:	88 23       	and	r24, r24
    44a6:	31 f4       	brne	.+12     	; 0x44b4 <Gas_System+0xc2>
    44a8:	80 91 6d 01 	lds	r24, 0x016D
    44ac:	84 31       	cpi	r24, 0x14	; 20
    44ae:	10 f4       	brcc	.+4      	; 0x44b4 <Gas_System+0xc2>
			distance = 0;
    44b0:	10 92 6d 01 	sts	0x016D, r1
		}
//
		if ((RND_Status != RND_N)) {
    44b4:	80 91 36 01 	lds	r24, 0x0136
    44b8:	82 30       	cpi	r24, 0x02	; 2
    44ba:	b1 f0       	breq	.+44     	; 0x44e8 <Gas_System+0xf6>
			H_Lcd_Void_LCDGoTo(1, 9);
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	69 e0       	ldi	r22, 0x09	; 9
    44c0:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(distance);
    44c4:	80 91 6d 01 	lds	r24, 0x016D
    44c8:	88 2f       	mov	r24, r24
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	a0 e0       	ldi	r26, 0x00	; 0
    44ce:	b0 e0       	ldi	r27, 0x00	; 0
    44d0:	bc 01       	movw	r22, r24
    44d2:	cd 01       	movw	r24, r26
    44d4:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>
			H_Lcd_Void_LCDGoTo(1, 9);
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	69 e0       	ldi	r22, 0x09	; 9
    44dc:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("   ");
    44e0:	88 ea       	ldi	r24, 0xA8	; 168
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		}
		//distance=clear_dis;

	}

}
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <Breake_Assistant_on_off>:

void Breake_Assistant_on_off() {
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	0f 92       	push	r0
    44f4:	cd b7       	in	r28, 0x3d	; 61
    44f6:	de b7       	in	r29, 0x3e	; 62

	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    44f8:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    44fc:	89 83       	std	Y+1, r24	; 0x01
	if (RND_Status == RND_D) {
    44fe:	80 91 36 01 	lds	r24, 0x0136
    4502:	88 23       	and	r24, r24
    4504:	09 f0       	breq	.+2      	; 0x4508 <Breake_Assistant_on_off+0x1a>
    4506:	48 c0       	rjmp	.+144    	; 0x4598 <Breake_Assistant_on_off+0xaa>
		if (BREAKE_ASS == 0) {
    4508:	80 91 68 01 	lds	r24, 0x0168
    450c:	88 23       	and	r24, r24
    450e:	41 f4       	brne	.+16     	; 0x4520 <Breake_Assistant_on_off+0x32>
			H_Lcd_Void_LCDGoTo(2, 13);
    4510:	82 e0       	ldi	r24, 0x02	; 2
    4512:	6d e0       	ldi	r22, 0x0D	; 13
    4514:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("Off");
    4518:	84 ea       	ldi	r24, 0xA4	; 164
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		}

		if (charachter == '1' && BREAKE_ASS == 0) {
    4520:	89 81       	ldd	r24, Y+1	; 0x01
    4522:	81 33       	cpi	r24, 0x31	; 49
    4524:	d1 f4       	brne	.+52     	; 0x455a <Breake_Assistant_on_off+0x6c>
    4526:	80 91 68 01 	lds	r24, 0x0168
    452a:	88 23       	and	r24, r24
    452c:	b1 f4       	brne	.+44     	; 0x455a <Breake_Assistant_on_off+0x6c>
			DM_flag = 0;
    452e:	10 92 77 01 	sts	0x0177, r1
			BREAKE_ASS = 1;
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	80 93 68 01 	sts	0x0168, r24
			H_Lcd_Void_LCDGoTo(2, 13);
    4538:	82 e0       	ldi	r24, 0x02	; 2
    453a:	6d e0       	ldi	r22, 0x0D	; 13
    453c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("   ");
    4540:	88 ea       	ldi	r24, 0xA8	; 168
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(2, 13);
    4548:	82 e0       	ldi	r24, 0x02	; 2
    454a:	6d e0       	ldi	r22, 0x0D	; 13
    454c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("On");
    4550:	83 eb       	ldi	r24, 0xB3	; 179
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
    4558:	1b c0       	rjmp	.+54     	; 0x4590 <Breake_Assistant_on_off+0xa2>

		} else if (charachter == '1' && BREAKE_ASS == 1) {
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	81 33       	cpi	r24, 0x31	; 49
    455e:	c1 f4       	brne	.+48     	; 0x4590 <Breake_Assistant_on_off+0xa2>
    4560:	80 91 68 01 	lds	r24, 0x0168
    4564:	81 30       	cpi	r24, 0x01	; 1
    4566:	a1 f4       	brne	.+40     	; 0x4590 <Breake_Assistant_on_off+0xa2>
			DM_flag = 0;
    4568:	10 92 77 01 	sts	0x0177, r1
			H_Lcd_Void_LCDGoTo(2, 13);
    456c:	82 e0       	ldi	r24, 0x02	; 2
    456e:	6d e0       	ldi	r22, 0x0D	; 13
    4570:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("   ");
    4574:	88 ea       	ldi	r24, 0xA8	; 168
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(2, 13);
    457c:	82 e0       	ldi	r24, 0x02	; 2
    457e:	6d e0       	ldi	r22, 0x0D	; 13
    4580:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("Off");
    4584:	84 ea       	ldi	r24, 0xA4	; 164
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			BREAKE_ASS = 0;
    458c:	10 92 68 01 	sts	0x0168, r1
		}

		H_LED_Void_LedOff(LED_RED);
    4590:	84 e0       	ldi	r24, 0x04	; 4
    4592:	0e 94 60 13 	call	0x26c0	; 0x26c0 <H_LED_Void_LedOff>
    4596:	08 c0       	rjmp	.+16     	; 0x45a8 <Breake_Assistant_on_off+0xba>

	} else {
		H_Lcd_Void_LCDGoTo(2, 13);
    4598:	82 e0       	ldi	r24, 0x02	; 2
    459a:	6d e0       	ldi	r22, 0x0D	; 13
    459c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("Off");
    45a0:	84 ea       	ldi	r24, 0xA4	; 164
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
	}

}
    45a8:	0f 90       	pop	r0
    45aa:	cf 91       	pop	r28
    45ac:	df 91       	pop	r29
    45ae:	08 95       	ret

000045b0 <Speed_Limiter>:

void Speed_Limiter(void) {
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	0f 92       	push	r0
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    45ba:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    45be:	89 83       	std	Y+1, r24	; 0x01
	if (RND_Status == RND_D) {
    45c0:	80 91 36 01 	lds	r24, 0x0136
    45c4:	88 23       	and	r24, r24
    45c6:	c1 f5       	brne	.+112    	; 0x4638 <Speed_Limiter+0x88>
		if (charachter == '5' && Speed_Lim == 0) {
    45c8:	89 81       	ldd	r24, Y+1	; 0x01
    45ca:	85 33       	cpi	r24, 0x35	; 53
    45cc:	d1 f4       	brne	.+52     	; 0x4602 <Speed_Limiter+0x52>
    45ce:	80 91 69 01 	lds	r24, 0x0169
    45d2:	88 23       	and	r24, r24
    45d4:	b1 f4       	brne	.+44     	; 0x4602 <Speed_Limiter+0x52>
			DM_flag = 0;
    45d6:	10 92 77 01 	sts	0x0177, r1
			Speed_Lim = 1;
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	80 93 69 01 	sts	0x0169, r24
			H_Lcd_Void_LCDGoTo(3, 16);
    45e0:	83 e0       	ldi	r24, 0x03	; 3
    45e2:	60 e1       	ldi	r22, 0x10	; 16
    45e4:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("   ");
    45e8:	88 ea       	ldi	r24, 0xA8	; 168
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(3, 16);
    45f0:	83 e0       	ldi	r24, 0x03	; 3
    45f2:	60 e1       	ldi	r22, 0x10	; 16
    45f4:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("On");
    45f8:	83 eb       	ldi	r24, 0xB3	; 179
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
    4600:	1b c0       	rjmp	.+54     	; 0x4638 <Speed_Limiter+0x88>

		} else if (charachter == '5' && Speed_Lim == 1) {
    4602:	89 81       	ldd	r24, Y+1	; 0x01
    4604:	85 33       	cpi	r24, 0x35	; 53
    4606:	c1 f4       	brne	.+48     	; 0x4638 <Speed_Limiter+0x88>
    4608:	80 91 69 01 	lds	r24, 0x0169
    460c:	81 30       	cpi	r24, 0x01	; 1
    460e:	a1 f4       	brne	.+40     	; 0x4638 <Speed_Limiter+0x88>
			DM_flag = 0;
    4610:	10 92 77 01 	sts	0x0177, r1
			H_Lcd_Void_LCDGoTo(3, 16);
    4614:	83 e0       	ldi	r24, 0x03	; 3
    4616:	60 e1       	ldi	r22, 0x10	; 16
    4618:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("   ");
    461c:	88 ea       	ldi	r24, 0xA8	; 168
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(3, 16);
    4624:	83 e0       	ldi	r24, 0x03	; 3
    4626:	60 e1       	ldi	r22, 0x10	; 16
    4628:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("Off");
    462c:	84 ea       	ldi	r24, 0xA4	; 164
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			Speed_Lim = 0;
    4634:	10 92 69 01 	sts	0x0169, r1
		}
	}
}
    4638:	0f 90       	pop	r0
    463a:	cf 91       	pop	r28
    463c:	df 91       	pop	r29
    463e:	08 95       	ret

00004640 <Speed_LimitControl>:

void Speed_LimitControl(void) {
    4640:	df 93       	push	r29
    4642:	cf 93       	push	r28
    4644:	0f 92       	push	r0
    4646:	cd b7       	in	r28, 0x3d	; 61
    4648:	de b7       	in	r29, 0x3e	; 62
	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    464a:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    464e:	89 83       	std	Y+1, r24	; 0x01

	if (RND_Status == RND_D) {
    4650:	80 91 36 01 	lds	r24, 0x0136
    4654:	88 23       	and	r24, r24
    4656:	89 f5       	brne	.+98     	; 0x46ba <Speed_LimitControl+0x7a>
		if (charachter == '7') {
    4658:	89 81       	ldd	r24, Y+1	; 0x01
    465a:	87 33       	cpi	r24, 0x37	; 55
    465c:	b1 f4       	brne	.+44     	; 0x468a <Speed_LimitControl+0x4a>
			DM_flag = 0;
    465e:	10 92 77 01 	sts	0x0177, r1
			Speed_Limcontrol += 10;
    4662:	80 91 6a 01 	lds	r24, 0x016A
    4666:	86 5f       	subi	r24, 0xF6	; 246
    4668:	80 93 6a 01 	sts	0x016A, r24
			H_Lcd_Void_LCDGoTo(2, 16);
    466c:	82 e0       	ldi	r24, 0x02	; 2
    466e:	60 e1       	ldi	r22, 0x10	; 16
    4670:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(Speed_Limcontrol);
    4674:	80 91 6a 01 	lds	r24, 0x016A
    4678:	88 2f       	mov	r24, r24
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	a0 e0       	ldi	r26, 0x00	; 0
    467e:	b0 e0       	ldi	r27, 0x00	; 0
    4680:	bc 01       	movw	r22, r24
    4682:	cd 01       	movw	r24, r26
    4684:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>
    4688:	18 c0       	rjmp	.+48     	; 0x46ba <Speed_LimitControl+0x7a>

		} else if (charachter == '9') {
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	89 33       	cpi	r24, 0x39	; 57
    468e:	a9 f4       	brne	.+42     	; 0x46ba <Speed_LimitControl+0x7a>
			DM_flag = 0;
    4690:	10 92 77 01 	sts	0x0177, r1
			Speed_Limcontrol -= 10;
    4694:	80 91 6a 01 	lds	r24, 0x016A
    4698:	8a 50       	subi	r24, 0x0A	; 10
    469a:	80 93 6a 01 	sts	0x016A, r24
			H_Lcd_Void_LCDGoTo(2, 16);
    469e:	82 e0       	ldi	r24, 0x02	; 2
    46a0:	60 e1       	ldi	r22, 0x10	; 16
    46a2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(Speed_Limcontrol);
    46a6:	80 91 6a 01 	lds	r24, 0x016A
    46aa:	88 2f       	mov	r24, r24
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	a0 e0       	ldi	r26, 0x00	; 0
    46b0:	b0 e0       	ldi	r27, 0x00	; 0
    46b2:	bc 01       	movw	r22, r24
    46b4:	cd 01       	movw	r24, r26
    46b6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>

		}
	}

}
    46ba:	0f 90       	pop	r0
    46bc:	cf 91       	pop	r28
    46be:	df 91       	pop	r29
    46c0:	08 95       	ret

000046c2 <compare_limit_distance>:

void compare_limit_distance(void) {
    46c2:	df 93       	push	r29
    46c4:	cf 93       	push	r28
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62

	if ((distance > Speed_Limcontrol) && Speed_Lim == 1) {
    46ca:	90 91 6d 01 	lds	r25, 0x016D
    46ce:	80 91 6a 01 	lds	r24, 0x016A
    46d2:	89 17       	cp	r24, r25
    46d4:	88 f4       	brcc	.+34     	; 0x46f8 <compare_limit_distance+0x36>
    46d6:	80 91 69 01 	lds	r24, 0x0169
    46da:	81 30       	cpi	r24, 0x01	; 1
    46dc:	69 f4       	brne	.+26     	; 0x46f8 <compare_limit_distance+0x36>
		H_LED_Void_LedOn(LED_YEL);
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	0e 94 20 13 	call	0x2640	; 0x2640 <H_LED_Void_LedOn>
		if (Timer_flag == 0) {
    46e4:	80 91 76 01 	lds	r24, 0x0176
    46e8:	88 23       	and	r24, r24
    46ea:	59 f4       	brne	.+22     	; 0x4702 <compare_limit_distance+0x40>

			TIMER0_OV_InterruptEnable();
    46ec:	0e 94 82 06 	call	0xd04	; 0xd04 <TIMER0_OV_InterruptEnable>
			Timer_flag = 1;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	80 93 76 01 	sts	0x0176, r24
    46f6:	05 c0       	rjmp	.+10     	; 0x4702 <compare_limit_distance+0x40>
		}
	} else {
		H_LED_Void_LedOff(LED_YEL);
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	0e 94 60 13 	call	0x26c0	; 0x26c0 <H_LED_Void_LedOff>
		//M_DIO_Void_SetPinValue(RELAY_PIN,LOW);
		TIMER0_OV_InterruptDisable();
    46fe:	0e 94 90 06 	call	0xd20	; 0xd20 <TIMER0_OV_InterruptDisable>

	}
}
    4702:	cf 91       	pop	r28
    4704:	df 91       	pop	r29
    4706:	08 95       	ret

00004708 <DM_Check>:

void DM_Check(void) {
    4708:	df 93       	push	r29
    470a:	cf 93       	push	r28
    470c:	cd b7       	in	r28, 0x3d	; 61
    470e:	de b7       	in	r29, 0x3e	; 62
	if (DM_flag == 5) {
    4710:	80 91 77 01 	lds	r24, 0x0177
    4714:	85 30       	cpi	r24, 0x05	; 5
    4716:	69 f4       	brne	.+26     	; 0x4732 <DM_Check+0x2a>
		H_Lcd_Void_LCDClear();
    4718:	0e 94 67 1b 	call	0x36ce	; 0x36ce <H_Lcd_Void_LCDClear>
		H_Lcd_Void_LCDGoTo(2, 2);
    471c:	82 e0       	ldi	r24, 0x02	; 2
    471e:	62 e0       	ldi	r22, 0x02	; 2
    4720:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("WARNING -->!!!!!! ");
    4724:	86 eb       	ldi	r24, 0xB6	; 182
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		clear_flag = 1;
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	80 93 6c 01 	sts	0x016C, r24
	}
}
    4732:	cf 91       	pop	r28
    4734:	df 91       	pop	r29
    4736:	08 95       	ret

00004738 <KM>:
void KM(void) {
    4738:	df 93       	push	r29
    473a:	cf 93       	push	r28
    473c:	cd b7       	in	r28, 0x3d	; 61
    473e:	de b7       	in	r29, 0x3e	; 62

	if ((distance / 10) > KM_Current) {
    4740:	80 91 6d 01 	lds	r24, 0x016D
    4744:	9a e0       	ldi	r25, 0x0A	; 10
    4746:	69 2f       	mov	r22, r25
    4748:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    474c:	98 2f       	mov	r25, r24
    474e:	80 91 63 01 	lds	r24, 0x0163
    4752:	89 17       	cp	r24, r25
    4754:	40 f4       	brcc	.+16     	; 0x4766 <KM+0x2e>
		KM_Current = (distance / 10);
    4756:	80 91 6d 01 	lds	r24, 0x016D
    475a:	9a e0       	ldi	r25, 0x0A	; 10
    475c:	69 2f       	mov	r22, r25
    475e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__udivmodqi4>
    4762:	80 93 63 01 	sts	0x0163, r24
	} else {
	}
}
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	08 95       	ret

0000476c <First_Line>:
u8 page = 1;

void First_Line(void) {
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDGoTo(0, 0);
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Welcome --> ");
    477c:	89 ec       	ldi	r24, 0xC9	; 201
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

	H_Lcd_Void_LCDGoTo(0, 17);
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	61 e1       	ldi	r22, 0x11	; 17
    4788:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteNumber(page);
    478c:	80 91 45 01 	lds	r24, 0x0145
    4790:	88 2f       	mov	r24, r24
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	a0 e0       	ldi	r26, 0x00	; 0
    4796:	b0 e0       	ldi	r27, 0x00	; 0
    4798:	bc 01       	movw	r22, r24
    479a:	cd 01       	movw	r24, r26
    479c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>

	H_Lcd_Void_LCDGoTo(0, 18);
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	62 e1       	ldi	r22, 0x12	; 18
    47a4:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("/4");
    47a8:	86 ed       	ldi	r24, 0xD6	; 214
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

}
    47b0:	cf 91       	pop	r28
    47b2:	df 91       	pop	r29
    47b4:	08 95       	ret

000047b6 <Page_One>:

void Page_One(void) {
    47b6:	df 93       	push	r29
    47b8:	cf 93       	push	r28
    47ba:	0f 92       	push	r0
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    47c0:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    47c4:	89 83       	std	Y+1, r24	; 0x01

	if (clear_flag == 0) {
    47c6:	80 91 6c 01 	lds	r24, 0x016C
    47ca:	88 23       	and	r24, r24
    47cc:	09 f0       	breq	.+2      	; 0x47d0 <Page_One+0x1a>
    47ce:	ac c0       	rjmp	.+344    	; 0x4928 <Page_One+0x172>
		if (Page_No == 0) {
    47d0:	80 91 6e 01 	lds	r24, 0x016E
    47d4:	88 23       	and	r24, r24
    47d6:	09 f0       	breq	.+2      	; 0x47da <Page_One+0x24>
    47d8:	a7 c0       	rjmp	.+334    	; 0x4928 <Page_One+0x172>

			page = 1;
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	80 93 45 01 	sts	0x0145, r24
			First_Line();
    47e0:	0e 94 b6 23 	call	0x476c	; 0x476c <First_Line>
			//H_Lcd_Void_LCDClear();

			H_Lcd_Void_LCDGoTo(1, 0);
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	60 e0       	ldi	r22, 0x00	; 0
    47e8:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("SPEED : ");
    47ec:	89 ed       	ldi	r24, 0xD9	; 217
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

			H_Lcd_Void_LCDGoTo(2, 0);
    47f4:	82 e0       	ldi	r24, 0x02	; 2
    47f6:	60 e0       	ldi	r22, 0x00	; 0
    47f8:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("SPEED LIMITER : ");
    47fc:	82 ee       	ldi	r24, 0xE2	; 226
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

			H_Lcd_Void_LCDGoTo(1, 13);
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	6d e0       	ldi	r22, 0x0D	; 13
    4808:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("KM: ");
    480c:	83 ef       	ldi	r24, 0xF3	; 243
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

			H_Lcd_Void_LCDGoTo(1, 16);
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	60 e1       	ldi	r22, 0x10	; 16
    4818:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(KM_Current);
    481c:	80 91 63 01 	lds	r24, 0x0163
    4820:	88 2f       	mov	r24, r24
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	a0 e0       	ldi	r26, 0x00	; 0
    4826:	b0 e0       	ldi	r27, 0x00	; 0
    4828:	bc 01       	movw	r22, r24
    482a:	cd 01       	movw	r24, r26
    482c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>

			H_Lcd_Void_LCDGoTo(3, 0);
    4830:	83 e0       	ldi	r24, 0x03	; 3
    4832:	60 e0       	ldi	r22, 0x00	; 0
    4834:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("RND : ");
    4838:	89 e9       	ldi	r24, 0x99	; 153
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			if (RND_Status == RND_DEFAULT) {
    4840:	80 91 36 01 	lds	r24, 0x0136
    4844:	85 30       	cpi	r24, 0x05	; 5
    4846:	81 f4       	brne	.+32     	; 0x4868 <Page_One+0xb2>
				H_Lcd_Void_LCDGoTo(3, 7);
    4848:	83 e0       	ldi	r24, 0x03	; 3
    484a:	67 e0       	ldi	r22, 0x07	; 7
    484c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteCharacter('N');
    4850:	8e e4       	ldi	r24, 0x4E	; 78
    4852:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
				H_Lcd_Void_LCDGoTo(1, 9);
    4856:	81 e0       	ldi	r24, 0x01	; 1
    4858:	69 e0       	ldi	r22, 0x09	; 9
    485a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("   ");
    485e:	88 ea       	ldi	r24, 0xA8	; 168
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
    4866:	17 c0       	rjmp	.+46     	; 0x4896 <Page_One+0xe0>

			} else if (RND_Status == RND_D) {
    4868:	80 91 36 01 	lds	r24, 0x0136
    486c:	88 23       	and	r24, r24
    486e:	41 f4       	brne	.+16     	; 0x4880 <Page_One+0xca>
				H_Lcd_Void_LCDGoTo(3, 7);
    4870:	83 e0       	ldi	r24, 0x03	; 3
    4872:	67 e0       	ldi	r22, 0x07	; 7
    4874:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteCharacter('D');
    4878:	84 e4       	ldi	r24, 0x44	; 68
    487a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>
    487e:	0b c0       	rjmp	.+22     	; 0x4896 <Page_One+0xe0>

			} else if (RND_Status == RND_R) {
    4880:	80 91 36 01 	lds	r24, 0x0136
    4884:	81 30       	cpi	r24, 0x01	; 1
    4886:	39 f4       	brne	.+14     	; 0x4896 <Page_One+0xe0>
				H_Lcd_Void_LCDGoTo(3, 7);
    4888:	83 e0       	ldi	r24, 0x03	; 3
    488a:	67 e0       	ldi	r22, 0x07	; 7
    488c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteCharacter('R');
    4890:	82 e5       	ldi	r24, 0x52	; 82
    4892:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <H_Lcd_Void_LCDWriteCharacter>

			}

			H_Lcd_Void_LCDGoTo(3, 12);
    4896:	83 e0       	ldi	r24, 0x03	; 3
    4898:	6c e0       	ldi	r22, 0x0C	; 12
    489a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("SP:");
    489e:	80 ea       	ldi	r24, 0xA0	; 160
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

			if (Speed_Lim == 0) {
    48a6:	80 91 69 01 	lds	r24, 0x0169
    48aa:	88 23       	and	r24, r24
    48ac:	49 f4       	brne	.+18     	; 0x48c0 <Page_One+0x10a>
				H_Lcd_Void_LCDGoTo(3, 16);
    48ae:	83 e0       	ldi	r24, 0x03	; 3
    48b0:	60 e1       	ldi	r22, 0x10	; 16
    48b2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("Off");
    48b6:	84 ea       	ldi	r24, 0xA4	; 164
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
    48be:	14 c0       	rjmp	.+40     	; 0x48e8 <Page_One+0x132>
			} else if (Speed_Lim == 1) {
    48c0:	80 91 69 01 	lds	r24, 0x0169
    48c4:	81 30       	cpi	r24, 0x01	; 1
    48c6:	81 f4       	brne	.+32     	; 0x48e8 <Page_One+0x132>
				H_Lcd_Void_LCDGoTo(3, 16);
    48c8:	83 e0       	ldi	r24, 0x03	; 3
    48ca:	60 e1       	ldi	r22, 0x10	; 16
    48cc:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("  ");
    48d0:	88 ef       	ldi	r24, 0xF8	; 248
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
				H_Lcd_Void_LCDGoTo(3, 16);
    48d8:	83 e0       	ldi	r24, 0x03	; 3
    48da:	60 e1       	ldi	r22, 0x10	; 16
    48dc:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("on");
    48e0:	8c ea       	ldi	r24, 0xAC	; 172
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			}

			if (charachter == '4') {
    48e8:	89 81       	ldd	r24, Y+1	; 0x01
    48ea:	84 33       	cpi	r24, 0x34	; 52
    48ec:	39 f4       	brne	.+14     	; 0x48fc <Page_One+0x146>
				DM_flag = 0;
    48ee:	10 92 77 01 	sts	0x0177, r1
				Page_No = 1;
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	80 93 6e 01 	sts	0x016E, r24
				H_Lcd_Void_LCDClear();
    48f8:	0e 94 67 1b 	call	0x36ce	; 0x36ce <H_Lcd_Void_LCDClear>
				//H_Lcd_Void_LCDClear();

			}

			Gas_System();
    48fc:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Gas_System>
			Speed_Limiter();
    4900:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <Speed_Limiter>

			Speed_LimitControl();
    4904:	0e 94 20 23 	call	0x4640	; 0x4640 <Speed_LimitControl>

			Breake_on_off();
    4908:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <Breake_on_off>
			compare_limit_distance();
    490c:	0e 94 61 23 	call	0x46c2	; 0x46c2 <compare_limit_distance>

			if (flag == 1 && Breake_on_off()) {
    4910:	80 91 75 01 	lds	r24, 0x0175
    4914:	81 30       	cpi	r24, 0x01	; 1
    4916:	41 f4       	brne	.+16     	; 0x4928 <Page_One+0x172>
    4918:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <Breake_on_off>
    491c:	88 23       	and	r24, r24
    491e:	21 f0       	breq	.+8      	; 0x4928 <Page_One+0x172>

				Gear_state();
    4920:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <Gear_state>
				flag = 0;
    4924:	10 92 75 01 	sts	0x0175, r1
			}
		}

	}

}
    4928:	0f 90       	pop	r0
    492a:	cf 91       	pop	r28
    492c:	df 91       	pop	r29
    492e:	08 95       	ret

00004930 <Page_Two>:
void Page_Two(void) {
    4930:	df 93       	push	r29
    4932:	cf 93       	push	r28
    4934:	0f 92       	push	r0
    4936:	cd b7       	in	r28, 0x3d	; 61
    4938:	de b7       	in	r29, 0x3e	; 62

	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    493a:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    493e:	89 83       	std	Y+1, r24	; 0x01

	if (clear_flag == 0) {
    4940:	80 91 6c 01 	lds	r24, 0x016C
    4944:	88 23       	and	r24, r24
    4946:	09 f0       	breq	.+2      	; 0x494a <Page_Two+0x1a>
    4948:	50 c0       	rjmp	.+160    	; 0x49ea <Page_Two+0xba>
		if (Page_No == 1) {
    494a:	80 91 6e 01 	lds	r24, 0x016E
    494e:	81 30       	cpi	r24, 0x01	; 1
    4950:	09 f0       	breq	.+2      	; 0x4954 <Page_Two+0x24>
    4952:	49 c0       	rjmp	.+146    	; 0x49e6 <Page_Two+0xb6>

			page = 2;
    4954:	82 e0       	ldi	r24, 0x02	; 2
    4956:	80 93 45 01 	sts	0x0145, r24
			First_Line();
    495a:	0e 94 b6 23 	call	0x476c	; 0x476c <First_Line>
			// H_Lcd_Void_LCDGoTo(0,0);
			// H_Lcd_Void_LCDWriteString("   ");
			H_Lcd_Void_LCDGoTo(1, 9);
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	69 e0       	ldi	r22, 0x09	; 9
    4962:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("     ");
    4966:	8b ef       	ldi	r24, 0xFB	; 251
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

			H_Lcd_Void_LCDGoTo(2, 0);
    496e:	82 e0       	ldi	r24, 0x02	; 2
    4970:	60 e0       	ldi	r22, 0x00	; 0
    4972:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("CCS : ");
    4976:	81 e0       	ldi	r24, 0x01	; 1
    4978:	91 e0       	ldi	r25, 0x01	; 1
    497a:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>

			if (CCS_Status == CCS_ON) {
    497e:	80 91 62 01 	lds	r24, 0x0162
    4982:	81 30       	cpi	r24, 0x01	; 1
    4984:	81 f4       	brne	.+32     	; 0x49a6 <Page_Two+0x76>
				H_Lcd_Void_LCDGoTo(2, 7);
    4986:	82 e0       	ldi	r24, 0x02	; 2
    4988:	67 e0       	ldi	r22, 0x07	; 7
    498a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("   ");
    498e:	88 ea       	ldi	r24, 0xA8	; 168
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
				H_Lcd_Void_LCDGoTo(2, 7);
    4996:	82 e0       	ldi	r24, 0x02	; 2
    4998:	67 e0       	ldi	r22, 0x07	; 7
    499a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("on");
    499e:	8c ea       	ldi	r24, 0xAC	; 172
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			}
			if (CCS_Status == CCS_OFF) {
    49a6:	80 91 62 01 	lds	r24, 0x0162
    49aa:	88 23       	and	r24, r24
    49ac:	81 f4       	brne	.+32     	; 0x49ce <Page_Two+0x9e>
				H_Lcd_Void_LCDGoTo(2, 7);
    49ae:	82 e0       	ldi	r24, 0x02	; 2
    49b0:	67 e0       	ldi	r22, 0x07	; 7
    49b2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("   ");
    49b6:	88 ea       	ldi	r24, 0xA8	; 168
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
				H_Lcd_Void_LCDGoTo(2, 7);
    49be:	82 e0       	ldi	r24, 0x02	; 2
    49c0:	67 e0       	ldi	r22, 0x07	; 7
    49c2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("off");
    49c6:	8f ea       	ldi	r24, 0xAF	; 175
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			}
			//		 H_Lcd_Void_LCDGoTo(3,0);
			//		 H_Lcd_Void_LCDWriteString("For Page one -> 8");

			CCS_state();
    49ce:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <CCS_state>
			if (charachter == '4') {
    49d2:	89 81       	ldd	r24, Y+1	; 0x01
    49d4:	84 33       	cpi	r24, 0x34	; 52
    49d6:	39 f4       	brne	.+14     	; 0x49e6 <Page_Two+0xb6>
				DM_flag = 0;
    49d8:	10 92 77 01 	sts	0x0177, r1
				Page_No = 2;
    49dc:	82 e0       	ldi	r24, 0x02	; 2
    49de:	80 93 6e 01 	sts	0x016E, r24
				H_Lcd_Void_LCDClear();
    49e2:	0e 94 67 1b 	call	0x36ce	; 0x36ce <H_Lcd_Void_LCDClear>
			}
		}

		Breake_on_off();
    49e6:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <Breake_on_off>
// 	{
// 		Page_No = 0;
// 		page=1;
// 	}

}
    49ea:	0f 90       	pop	r0
    49ec:	cf 91       	pop	r28
    49ee:	df 91       	pop	r29
    49f0:	08 95       	ret

000049f2 <Page_Three>:
void Page_Three(void) {
    49f2:	df 93       	push	r29
    49f4:	cf 93       	push	r28
    49f6:	0f 92       	push	r0
    49f8:	cd b7       	in	r28, 0x3d	; 61
    49fa:	de b7       	in	r29, 0x3e	; 62
	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    49fc:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    4a00:	89 83       	std	Y+1, r24	; 0x01
	// H_Lcd_Void_LCDClear();

	if (clear_flag == 0) {
    4a02:	80 91 6c 01 	lds	r24, 0x016C
    4a06:	88 23       	and	r24, r24
    4a08:	e9 f4       	brne	.+58     	; 0x4a44 <Page_Three+0x52>
		if (Page_No == 2) {
    4a0a:	80 91 6e 01 	lds	r24, 0x016E
    4a0e:	82 30       	cpi	r24, 0x02	; 2
    4a10:	c9 f4       	brne	.+50     	; 0x4a44 <Page_Three+0x52>

			page = 3;
    4a12:	83 e0       	ldi	r24, 0x03	; 3
    4a14:	80 93 45 01 	sts	0x0145, r24
			First_Line();
    4a18:	0e 94 b6 23 	call	0x476c	; 0x476c <First_Line>
			H_Lcd_Void_LCDGoTo(2, 0);
    4a1c:	82 e0       	ldi	r24, 0x02	; 2
    4a1e:	60 e0       	ldi	r22, 0x00	; 0
    4a20:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("BRAKE ASS : ");
    4a24:	88 e0       	ldi	r24, 0x08	; 8
    4a26:	91 e0       	ldi	r25, 0x01	; 1
    4a28:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			Breake_Assistant_on_off();
    4a2c:	0e 94 77 22 	call	0x44ee	; 0x44ee <Breake_Assistant_on_off>
			if (charachter == '4') {
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
    4a32:	84 33       	cpi	r24, 0x34	; 52
    4a34:	39 f4       	brne	.+14     	; 0x4a44 <Page_Three+0x52>
				DM_flag = 0;
    4a36:	10 92 77 01 	sts	0x0177, r1
				Page_No = 3;
    4a3a:	83 e0       	ldi	r24, 0x03	; 3
    4a3c:	80 93 6e 01 	sts	0x016E, r24
				H_Lcd_Void_LCDClear();
    4a40:	0e 94 67 1b 	call	0x36ce	; 0x36ce <H_Lcd_Void_LCDClear>
			//		}

		}

	}
}
    4a44:	0f 90       	pop	r0
    4a46:	cf 91       	pop	r28
    4a48:	df 91       	pop	r29
    4a4a:	08 95       	ret

00004a4c <Page_Four>:

void Page_Four(void) {
    4a4c:	df 93       	push	r29
    4a4e:	cf 93       	push	r28
    4a50:	0f 92       	push	r0
    4a52:	cd b7       	in	r28, 0x3d	; 61
    4a54:	de b7       	in	r29, 0x3e	; 62
	u8 charachter;
	charachter = H_KeyPad_U8_KeyPadRead();
    4a56:	0e 94 4b 1c 	call	0x3896	; 0x3896 <H_KeyPad_U8_KeyPadRead>
    4a5a:	89 83       	std	Y+1, r24	; 0x01
	if (clear_flag == 0) {
    4a5c:	80 91 6c 01 	lds	r24, 0x016C
    4a60:	88 23       	and	r24, r24
    4a62:	09 f0       	breq	.+2      	; 0x4a66 <Page_Four+0x1a>
    4a64:	67 c0       	rjmp	.+206    	; 0x4b34 <Page_Four+0xe8>
		if (Page_No == 3) {
    4a66:	80 91 6e 01 	lds	r24, 0x016E
    4a6a:	83 30       	cpi	r24, 0x03	; 3
    4a6c:	09 f0       	breq	.+2      	; 0x4a70 <Page_Four+0x24>
    4a6e:	62 c0       	rjmp	.+196    	; 0x4b34 <Page_Four+0xe8>
			page = 4;
    4a70:	84 e0       	ldi	r24, 0x04	; 4
    4a72:	80 93 45 01 	sts	0x0145, r24
			First_Line();
    4a76:	0e 94 b6 23 	call	0x476c	; 0x476c <First_Line>
			H_Lcd_Void_LCDGoTo(1, 0);
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	60 e0       	ldi	r22, 0x00	; 0
    4a7e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("DATE : ");
    4a82:	85 e1       	ldi	r24, 0x15	; 21
    4a84:	91 e0       	ldi	r25, 0x01	; 1
    4a86:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(1, 8);
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	68 e0       	ldi	r22, 0x08	; 8
    4a8e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(Date_Array[2]);
    4a92:	80 91 3b 01 	lds	r24, 0x013B
    4a96:	90 91 3c 01 	lds	r25, 0x013C
    4a9a:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(2, 0);
    4a9e:	82 e0       	ldi	r24, 0x02	; 2
    4aa0:	60 e0       	ldi	r22, 0x00	; 0
    4aa2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("TIME : ");
    4aa6:	8d e1       	ldi	r24, 0x1D	; 29
    4aa8:	91 e0       	ldi	r25, 0x01	; 1
    4aaa:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(2, 10);
    4aae:	82 e0       	ldi	r24, 0x02	; 2
    4ab0:	6a e0       	ldi	r22, 0x0A	; 10
    4ab2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(timeshours_counter);
    4ab6:	80 91 74 01 	lds	r24, 0x0174
    4aba:	88 2f       	mov	r24, r24
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	a0 e0       	ldi	r26, 0x00	; 0
    4ac0:	b0 e0       	ldi	r27, 0x00	; 0
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>
			H_Lcd_Void_LCDGoTo(2, 13);
    4aca:	82 e0       	ldi	r24, 0x02	; 2
    4acc:	6d e0       	ldi	r22, 0x0D	; 13
    4ace:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(":");
    4ad2:	85 e2       	ldi	r24, 0x25	; 37
    4ad4:	91 e0       	ldi	r25, 0x01	; 1
    4ad6:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(2, 14);
    4ada:	82 e0       	ldi	r24, 0x02	; 2
    4adc:	6e e0       	ldi	r22, 0x0E	; 14
    4ade:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(timesminites_counter);
    4ae2:	80 91 73 01 	lds	r24, 0x0173
    4ae6:	88 2f       	mov	r24, r24
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	a0 e0       	ldi	r26, 0x00	; 0
    4aec:	b0 e0       	ldi	r27, 0x00	; 0
    4aee:	bc 01       	movw	r22, r24
    4af0:	cd 01       	movw	r24, r26
    4af2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>
			H_Lcd_Void_LCDGoTo(2, 16);
    4af6:	82 e0       	ldi	r24, 0x02	; 2
    4af8:	60 e1       	ldi	r22, 0x10	; 16
    4afa:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(":");
    4afe:	85 e2       	ldi	r24, 0x25	; 37
    4b00:	91 e0       	ldi	r25, 0x01	; 1
    4b02:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(2, 17);
    4b06:	82 e0       	ldi	r24, 0x02	; 2
    4b08:	61 e1       	ldi	r22, 0x11	; 17
    4b0a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteNumber(timeseconds_counter);
    4b0e:	80 91 72 01 	lds	r24, 0x0172
    4b12:	88 2f       	mov	r24, r24
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	a0 e0       	ldi	r26, 0x00	; 0
    4b18:	b0 e0       	ldi	r27, 0x00	; 0
    4b1a:	bc 01       	movw	r22, r24
    4b1c:	cd 01       	movw	r24, r26
    4b1e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <H_Lcd_Void_LCDWriteNumber>
			if (charachter == '4') {
    4b22:	89 81       	ldd	r24, Y+1	; 0x01
    4b24:	84 33       	cpi	r24, 0x34	; 52
    4b26:	31 f4       	brne	.+12     	; 0x4b34 <Page_Four+0xe8>
				DM_flag = 0;
    4b28:	10 92 77 01 	sts	0x0177, r1
				Page_No = 0;
    4b2c:	10 92 6e 01 	sts	0x016E, r1
				H_Lcd_Void_LCDClear();
    4b30:	0e 94 67 1b 	call	0x36ce	; 0x36ce <H_Lcd_Void_LCDClear>

		}

	}

}
    4b34:	0f 90       	pop	r0
    4b36:	cf 91       	pop	r28
    4b38:	df 91       	pop	r29
    4b3a:	08 95       	ret

00004b3c <main>:

void func(void);
void H_Toggle_Relay(void);
void TIME(void);

int main() {
    4b3c:	df 93       	push	r29
    4b3e:	cf 93       	push	r28
    4b40:	cd b7       	in	r28, 0x3d	; 61
    4b42:	de b7       	in	r29, 0x3e	; 62

	Car_Init();
    4b44:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <Car_Init>
	M_EXTINT_Void_EXTINTInit(INT1_CHANNEL);
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <M_EXTINT_Void_EXTINTInit>
	M_EXTINT_Void_SetCallBack(INT1_CHANNEL, func);
    4b4e:	2b ec       	ldi	r18, 0xCB	; 203
    4b50:	35 e2       	ldi	r19, 0x25	; 37
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	b9 01       	movw	r22, r18
    4b56:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_EXTINT_Void_SetCallBack>
	TIMER0_Init(TIMER0_NORMAL_MODE, TIMER0_SCALER_1024);
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	65 e0       	ldi	r22, 0x05	; 5
    4b5e:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_Init>
	Timer1_Init(TIMER1_NORMAL_MODE, TIMER1_SCALER_64);
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	63 e0       	ldi	r22, 0x03	; 3
    4b66:	0e 94 de 06 	call	0xdbc	; 0xdbc <Timer1_Init>
	Timer1_OVF_InterruptEnable();
    4b6a:	0e 94 bc 08 	call	0x1178	; 0x1178 <Timer1_OVF_InterruptEnable>
	TIMER0_OV_SetCallBack(H_Toggle_Relay);
    4b6e:	85 ed       	ldi	r24, 0xD5	; 213
    4b70:	95 e2       	ldi	r25, 0x25	; 37
    4b72:	0e 94 ba 06 	call	0xd74	; 0xd74 <TIMER0_OV_SetCallBack>
	Timer1_OVF_SetCallBack(TIME);
    4b76:	85 ef       	ldi	r24, 0xF5	; 245
    4b78:	95 e2       	ldi	r25, 0x25	; 37
    4b7a:	0e 94 10 09 	call	0x1220	; 0x1220 <Timer1_OVF_SetCallBack>
	sei();
    4b7e:	78 94       	sei

	while (1) {

		DM_Check();
    4b80:	0e 94 84 23 	call	0x4708	; 0x4708 <DM_Check>
		Page_One();
    4b84:	0e 94 db 23 	call	0x47b6	; 0x47b6 <Page_One>
		Page_Two();
    4b88:	0e 94 98 24 	call	0x4930	; 0x4930 <Page_Two>
		Page_Three();
    4b8c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <Page_Three>
		Page_Four();
    4b90:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <Page_Four>
    4b94:	f5 cf       	rjmp	.-22     	; 0x4b80 <main+0x44>

00004b96 <func>:
	}
}
void func() {
    4b96:	df 93       	push	r29
    4b98:	cf 93       	push	r28
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	80 93 75 01 	sts	0x0175, r24
}
    4ba4:	cf 91       	pop	r28
    4ba6:	df 91       	pop	r29
    4ba8:	08 95       	ret

00004baa <H_Toggle_Relay>:
void H_Toggle_Relay(void) {
    4baa:	df 93       	push	r29
    4bac:	cf 93       	push	r28
    4bae:	cd b7       	in	r28, 0x3d	; 61
    4bb0:	de b7       	in	r29, 0x3e	; 62
	static u16 c = 0;
	c++;
    4bb2:	80 91 78 01 	lds	r24, 0x0178
    4bb6:	90 91 79 01 	lds	r25, 0x0179
    4bba:	01 96       	adiw	r24, 0x01	; 1
    4bbc:	90 93 79 01 	sts	0x0179, r25
    4bc0:	80 93 78 01 	sts	0x0178, r24
	if (c == 61) {
    4bc4:	80 91 78 01 	lds	r24, 0x0178
    4bc8:	90 91 79 01 	lds	r25, 0x0179
    4bcc:	8d 33       	cpi	r24, 0x3D	; 61
    4bce:	91 05       	cpc	r25, r1
    4bd0:	49 f4       	brne	.+18     	; 0x4be4 <H_Toggle_Relay+0x3a>
		M_DIO_Void_TogPin(RELAY_PIN);
    4bd2:	85 e2       	ldi	r24, 0x25	; 37
    4bd4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <M_DIO_Void_TogPin>
		c = 0;
    4bd8:	10 92 79 01 	sts	0x0179, r1
    4bdc:	10 92 78 01 	sts	0x0178, r1
		Timer_flag = 0;
    4be0:	10 92 76 01 	sts	0x0176, r1
	}
}
    4be4:	cf 91       	pop	r28
    4be6:	df 91       	pop	r29
    4be8:	08 95       	ret

00004bea <TIME>:
void TIME(void) {
    4bea:	df 93       	push	r29
    4bec:	cf 93       	push	r28
    4bee:	cd b7       	in	r28, 0x3d	; 61
    4bf0:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0;

	counter++;
    4bf2:	80 91 7a 01 	lds	r24, 0x017A
    4bf6:	90 91 7b 01 	lds	r25, 0x017B
    4bfa:	01 96       	adiw	r24, 0x01	; 1
    4bfc:	90 93 7b 01 	sts	0x017B, r25
    4c00:	80 93 7a 01 	sts	0x017A, r24
	if (counter == 4) {
    4c04:	80 91 7a 01 	lds	r24, 0x017A
    4c08:	90 91 7b 01 	lds	r25, 0x017B
    4c0c:	84 30       	cpi	r24, 0x04	; 4
    4c0e:	91 05       	cpc	r25, r1
    4c10:	81 f4       	brne	.+32     	; 0x4c32 <TIME+0x48>
		DM_flag++;
    4c12:	80 91 77 01 	lds	r24, 0x0177
    4c16:	8f 5f       	subi	r24, 0xFF	; 255
    4c18:	80 93 77 01 	sts	0x0177, r24
		KM();
    4c1c:	0e 94 9c 23 	call	0x4738	; 0x4738 <KM>
		timeseconds_counter++;
    4c20:	80 91 72 01 	lds	r24, 0x0172
    4c24:	8f 5f       	subi	r24, 0xFF	; 255
    4c26:	80 93 72 01 	sts	0x0172, r24
		counter = 0;
    4c2a:	10 92 7b 01 	sts	0x017B, r1
    4c2e:	10 92 7a 01 	sts	0x017A, r1
	}
	if (timeseconds_counter == 60) {
    4c32:	80 91 72 01 	lds	r24, 0x0172
    4c36:	8c 33       	cpi	r24, 0x3C	; 60
    4c38:	79 f4       	brne	.+30     	; 0x4c58 <TIME+0x6e>
		timeseconds_counter = 0;
    4c3a:	10 92 72 01 	sts	0x0172, r1
		H_Lcd_Void_LCDGoTo(2, 17);
    4c3e:	82 e0       	ldi	r24, 0x02	; 2
    4c40:	61 e1       	ldi	r22, 0x11	; 17
    4c42:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"   ");
    4c46:	87 e2       	ldi	r24, 0x27	; 39
    4c48:	91 e0       	ldi	r25, 0x01	; 1
    4c4a:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		timesminites_counter++;
    4c4e:	80 91 73 01 	lds	r24, 0x0173
    4c52:	8f 5f       	subi	r24, 0xFF	; 255
    4c54:	80 93 73 01 	sts	0x0173, r24

	}
	if (timesminites_counter == 60) {
    4c58:	80 91 73 01 	lds	r24, 0x0173
    4c5c:	8c 33       	cpi	r24, 0x3C	; 60
    4c5e:	79 f4       	brne	.+30     	; 0x4c7e <TIME+0x94>
		timesminites_counter = 0;
    4c60:	10 92 73 01 	sts	0x0173, r1
		H_Lcd_Void_LCDGoTo(2, 14);
    4c64:	82 e0       	ldi	r24, 0x02	; 2
    4c66:	6e e0       	ldi	r22, 0x0E	; 14
    4c68:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"  ");
    4c6c:	8b e2       	ldi	r24, 0x2B	; 43
    4c6e:	91 e0       	ldi	r25, 0x01	; 1
    4c70:	0e 94 3e 1b 	call	0x367c	; 0x367c <H_Lcd_Void_LCDWriteString>
		timeshours_counter++;
    4c74:	80 91 74 01 	lds	r24, 0x0174
    4c78:	8f 5f       	subi	r24, 0xFF	; 255
    4c7a:	80 93 74 01 	sts	0x0174, r24
	}
	if (timeshours_counter == 24) {
    4c7e:	80 91 74 01 	lds	r24, 0x0174
    4c82:	88 31       	cpi	r24, 0x18	; 24
    4c84:	11 f4       	brne	.+4      	; 0x4c8a <TIME+0xa0>
		timeshours_counter = 0;
    4c86:	10 92 74 01 	sts	0x0174, r1
	}

}
    4c8a:	cf 91       	pop	r28
    4c8c:	df 91       	pop	r29
    4c8e:	08 95       	ret

00004c90 <__udivmodqi4>:
    4c90:	99 1b       	sub	r25, r25
    4c92:	79 e0       	ldi	r23, 0x09	; 9
    4c94:	04 c0       	rjmp	.+8      	; 0x4c9e <__udivmodqi4_ep>

00004c96 <__udivmodqi4_loop>:
    4c96:	99 1f       	adc	r25, r25
    4c98:	96 17       	cp	r25, r22
    4c9a:	08 f0       	brcs	.+2      	; 0x4c9e <__udivmodqi4_ep>
    4c9c:	96 1b       	sub	r25, r22

00004c9e <__udivmodqi4_ep>:
    4c9e:	88 1f       	adc	r24, r24
    4ca0:	7a 95       	dec	r23
    4ca2:	c9 f7       	brne	.-14     	; 0x4c96 <__udivmodqi4_loop>
    4ca4:	80 95       	com	r24
    4ca6:	08 95       	ret

00004ca8 <__udivmodhi4>:
    4ca8:	aa 1b       	sub	r26, r26
    4caa:	bb 1b       	sub	r27, r27
    4cac:	51 e1       	ldi	r21, 0x11	; 17
    4cae:	07 c0       	rjmp	.+14     	; 0x4cbe <__udivmodhi4_ep>

00004cb0 <__udivmodhi4_loop>:
    4cb0:	aa 1f       	adc	r26, r26
    4cb2:	bb 1f       	adc	r27, r27
    4cb4:	a6 17       	cp	r26, r22
    4cb6:	b7 07       	cpc	r27, r23
    4cb8:	10 f0       	brcs	.+4      	; 0x4cbe <__udivmodhi4_ep>
    4cba:	a6 1b       	sub	r26, r22
    4cbc:	b7 0b       	sbc	r27, r23

00004cbe <__udivmodhi4_ep>:
    4cbe:	88 1f       	adc	r24, r24
    4cc0:	99 1f       	adc	r25, r25
    4cc2:	5a 95       	dec	r21
    4cc4:	a9 f7       	brne	.-22     	; 0x4cb0 <__udivmodhi4_loop>
    4cc6:	80 95       	com	r24
    4cc8:	90 95       	com	r25
    4cca:	bc 01       	movw	r22, r24
    4ccc:	cd 01       	movw	r24, r26
    4cce:	08 95       	ret

00004cd0 <__divmodsi4>:
    4cd0:	97 fb       	bst	r25, 7
    4cd2:	09 2e       	mov	r0, r25
    4cd4:	05 26       	eor	r0, r21
    4cd6:	0e d0       	rcall	.+28     	; 0x4cf4 <__divmodsi4_neg1>
    4cd8:	57 fd       	sbrc	r21, 7
    4cda:	04 d0       	rcall	.+8      	; 0x4ce4 <__divmodsi4_neg2>
    4cdc:	14 d0       	rcall	.+40     	; 0x4d06 <__udivmodsi4>
    4cde:	0a d0       	rcall	.+20     	; 0x4cf4 <__divmodsi4_neg1>
    4ce0:	00 1c       	adc	r0, r0
    4ce2:	38 f4       	brcc	.+14     	; 0x4cf2 <__divmodsi4_exit>

00004ce4 <__divmodsi4_neg2>:
    4ce4:	50 95       	com	r21
    4ce6:	40 95       	com	r20
    4ce8:	30 95       	com	r19
    4cea:	21 95       	neg	r18
    4cec:	3f 4f       	sbci	r19, 0xFF	; 255
    4cee:	4f 4f       	sbci	r20, 0xFF	; 255
    4cf0:	5f 4f       	sbci	r21, 0xFF	; 255

00004cf2 <__divmodsi4_exit>:
    4cf2:	08 95       	ret

00004cf4 <__divmodsi4_neg1>:
    4cf4:	f6 f7       	brtc	.-4      	; 0x4cf2 <__divmodsi4_exit>
    4cf6:	90 95       	com	r25
    4cf8:	80 95       	com	r24
    4cfa:	70 95       	com	r23
    4cfc:	61 95       	neg	r22
    4cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4d00:	8f 4f       	sbci	r24, 0xFF	; 255
    4d02:	9f 4f       	sbci	r25, 0xFF	; 255
    4d04:	08 95       	ret

00004d06 <__udivmodsi4>:
    4d06:	a1 e2       	ldi	r26, 0x21	; 33
    4d08:	1a 2e       	mov	r1, r26
    4d0a:	aa 1b       	sub	r26, r26
    4d0c:	bb 1b       	sub	r27, r27
    4d0e:	fd 01       	movw	r30, r26
    4d10:	0d c0       	rjmp	.+26     	; 0x4d2c <__udivmodsi4_ep>

00004d12 <__udivmodsi4_loop>:
    4d12:	aa 1f       	adc	r26, r26
    4d14:	bb 1f       	adc	r27, r27
    4d16:	ee 1f       	adc	r30, r30
    4d18:	ff 1f       	adc	r31, r31
    4d1a:	a2 17       	cp	r26, r18
    4d1c:	b3 07       	cpc	r27, r19
    4d1e:	e4 07       	cpc	r30, r20
    4d20:	f5 07       	cpc	r31, r21
    4d22:	20 f0       	brcs	.+8      	; 0x4d2c <__udivmodsi4_ep>
    4d24:	a2 1b       	sub	r26, r18
    4d26:	b3 0b       	sbc	r27, r19
    4d28:	e4 0b       	sbc	r30, r20
    4d2a:	f5 0b       	sbc	r31, r21

00004d2c <__udivmodsi4_ep>:
    4d2c:	66 1f       	adc	r22, r22
    4d2e:	77 1f       	adc	r23, r23
    4d30:	88 1f       	adc	r24, r24
    4d32:	99 1f       	adc	r25, r25
    4d34:	1a 94       	dec	r1
    4d36:	69 f7       	brne	.-38     	; 0x4d12 <__udivmodsi4_loop>
    4d38:	60 95       	com	r22
    4d3a:	70 95       	com	r23
    4d3c:	80 95       	com	r24
    4d3e:	90 95       	com	r25
    4d40:	9b 01       	movw	r18, r22
    4d42:	ac 01       	movw	r20, r24
    4d44:	bd 01       	movw	r22, r26
    4d46:	cf 01       	movw	r24, r30
    4d48:	08 95       	ret

00004d4a <__prologue_saves__>:
    4d4a:	2f 92       	push	r2
    4d4c:	3f 92       	push	r3
    4d4e:	4f 92       	push	r4
    4d50:	5f 92       	push	r5
    4d52:	6f 92       	push	r6
    4d54:	7f 92       	push	r7
    4d56:	8f 92       	push	r8
    4d58:	9f 92       	push	r9
    4d5a:	af 92       	push	r10
    4d5c:	bf 92       	push	r11
    4d5e:	cf 92       	push	r12
    4d60:	df 92       	push	r13
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	ca 1b       	sub	r28, r26
    4d74:	db 0b       	sbc	r29, r27
    4d76:	0f b6       	in	r0, 0x3f	; 63
    4d78:	f8 94       	cli
    4d7a:	de bf       	out	0x3e, r29	; 62
    4d7c:	0f be       	out	0x3f, r0	; 63
    4d7e:	cd bf       	out	0x3d, r28	; 61
    4d80:	09 94       	ijmp

00004d82 <__epilogue_restores__>:
    4d82:	2a 88       	ldd	r2, Y+18	; 0x12
    4d84:	39 88       	ldd	r3, Y+17	; 0x11
    4d86:	48 88       	ldd	r4, Y+16	; 0x10
    4d88:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d90:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d92:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d94:	b9 84       	ldd	r11, Y+9	; 0x09
    4d96:	c8 84       	ldd	r12, Y+8	; 0x08
    4d98:	df 80       	ldd	r13, Y+7	; 0x07
    4d9a:	ee 80       	ldd	r14, Y+6	; 0x06
    4d9c:	fd 80       	ldd	r15, Y+5	; 0x05
    4d9e:	0c 81       	ldd	r16, Y+4	; 0x04
    4da0:	1b 81       	ldd	r17, Y+3	; 0x03
    4da2:	aa 81       	ldd	r26, Y+2	; 0x02
    4da4:	b9 81       	ldd	r27, Y+1	; 0x01
    4da6:	ce 0f       	add	r28, r30
    4da8:	d1 1d       	adc	r29, r1
    4daa:	0f b6       	in	r0, 0x3f	; 63
    4dac:	f8 94       	cli
    4dae:	de bf       	out	0x3e, r29	; 62
    4db0:	0f be       	out	0x3f, r0	; 63
    4db2:	cd bf       	out	0x3d, r28	; 61
    4db4:	ed 01       	movw	r28, r26
    4db6:	08 95       	ret

00004db8 <_exit>:
    4db8:	f8 94       	cli

00004dba <__stop_program>:
    4dba:	ff cf       	rjmp	.-2      	; 0x4dba <__stop_program>
